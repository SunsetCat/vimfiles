!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/35226856/
$(html2vimdoc)	plugged\\vim-localvimrc\\Makefile	/^$(html2vimdoc):$/;"	t
$LANG	_vimrc	/^let $LANG = 'en'$/;"	v
$myconf	_vimrc	/^let $myconf = fnamemodify($myvimrc, ':h')$/;"	v
$myvimrc	_vimrc	/^let $myvimrc = expand('<sfile>')$/;"	v
%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^nnoremap <buffer> <silent> %  :<C-U>call <SID>PyMatch('%','n') <CR>$/;"	m
%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^onoremap <buffer> <silent> %  v:<C-U>call <SID>PyMatch('%','o') <CR>$/;"	m
%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^vnoremap <buffer> <silent> %  :<C-U>call <SID>PyMatch('%','v') <CR>m'gv``$/;"	m
(a.1) jump between matching words	plugged\\vim-matchup\\README.md	/^#### (a.1) jump between matching words$/;"	t
(a.2) jump to open and close words	plugged\\vim-matchup\\README.md	/^#### (a.2) jump to open and close words$/;"	t
(a.3) jump inside	plugged\\vim-matchup\\README.md	/^#### (a.3) jump inside$/;"	t
(b.1) full set of text objects	plugged\\vim-matchup\\README.md	/^#### (b.1) full set of text objects$/;"	t
(c.1) highlight `()`, `[]`, and `{}`	plugged\\vim-matchup\\README.md	/^#### (c.1) highlight `()`, `[]`, and `{}`$/;"	t
(c.2) highlight _all_ matches	plugged\\vim-matchup\\README.md	/^#### (c.2) highlight _all_ matches$/;"	t
(c.3) display matches off screen	plugged\\vim-matchup\\README.md	/^#### (c.3) display matches off screen$/;"	t
(d.1) parallel transmutation	plugged\\vim-matchup\\README.md	/^#### (d.1) parallel transmutation$/;"	t
,'	_vimrc	/^	nnoremap ,' :AsyncRun! hg commit -A<CR>$/;"	m
,;	_vimrc	/^	nnoremap ,; :AsyncRun! hg version<CR>:botright copen 8<CR>$/;"	m
,[	_vimrc	/^	nnoremap ,[ :AsyncRun! hg pull --rebase<CR>$/;"	m
,]	_vimrc	/^	nnoremap ,] :AsyncRun! hg push<CR>$/;"	m
-84,7 +84,7	plugged\\vim-localvimrc\\support\\vim-tools.patch	/^@@ -84,7 +84,7 @@ SHIFT_WIDTH = 2$/;"	h	modifiedFile:a/html2vimdoc.py
0	plugged\\vim-json\\json-test.json	/^						"GlossSeeAlso": ["GML", "XML"]$/;"	s	array:GlossDiv.GlossList.GlossEntry.GlossDef.GlossSeeAlso
0	plugged\\vim-json\\json-test.json	/^      {"value": "New", "onclick": "CreateNewDoc()"},$/;"	o	array:menu.popup.menuitem
1	plugged\\vim-json\\json-test.json	/^						"GlossSeeAlso": ["GML", "XML"]$/;"	s	array:GlossDiv.GlossList.GlossEntry.GlossDef.GlossSeeAlso
1	plugged\\vim-json\\json-test.json	/^      {"value": "Open", "onclick": "OpenDoc()"},$/;"	o	array:menu.popup.menuitem
1. Supported Languages and Tools	plugged\\ale\\README.md	/^## 1. Supported Languages and Tools$/;"	s
2	plugged\\vim-json\\json-test.json	/^      {"value": "Close", "onclick": "CloseDoc()"}$/;"	o	array:menu.popup.menuitem
2. Usage	plugged\\ale\\README.md	/^## 2. Usage$/;"	s
2.i Linting	plugged\\ale\\README.md	/^### 2.i Linting$/;"	S
2.ii Fixing	plugged\\ale\\README.md	/^### 2.ii Fixing$/;"	S
2.iii Completion	plugged\\ale\\README.md	/^### 2.iii Completion$/;"	S
2.iv Go To Definition	plugged\\ale\\README.md	/^### 2.iv Go To Definition$/;"	S
2.v Find References	plugged\\ale\\README.md	/^### 2.v Find References$/;"	S
2.vi Hovering	plugged\\ale\\README.md	/^### 2.vi Hovering$/;"	S
3. Installation	plugged\\ale\\README.md	/^## 3. Installation$/;"	s
3.i. Installation with Vim package management	plugged\\ale\\README.md	/^### 3.i. Installation with Vim package management$/;"	S
3.ii. Installation with Pathogen	plugged\\ale\\README.md	/^### 3.ii. Installation with Pathogen$/;"	S
3.iii. Installation with Vundle	plugged\\ale\\README.md	/^### 3.iii. Installation with Vundle$/;"	S
4. Contributing	plugged\\ale\\README.md	/^## 4. Contributing$/;"	s
5. FAQ	plugged\\ale\\README.md	/^## 5. FAQ$/;"	s
5.i. How do I disable particular linters?	plugged\\ale\\README.md	/^### 5.i. How do I disable particular linters?$/;"	S
5.ii. How can I keep the sign gutter open?	plugged\\ale\\README.md	/^### 5.ii. How can I keep the sign gutter open?$/;"	S
5.iii. How can I change the signs ALE uses?	plugged\\ale\\README.md	/^### 5.iii. How can I change the signs ALE uses?$/;"	S
5.iv. How can I change or disable the highlights ALE uses?	plugged\\ale\\README.md	/^### 5.iv. How can I change or disable the highlights ALE uses?$/;"	S
5.ix. How can I navigate between errors quickly?	plugged\\ale\\README.md	/^### 5.ix. How can I navigate between errors quickly?$/;"	S
5.v. How can I show errors or warnings in my statusline?	plugged\\ale\\README.md	/^### 5.v. How can I show errors or warnings in my statusline?$/;"	S
5.vi. How can I show errors or warnings in my lightline?	plugged\\ale\\README.md	/^### 5.vi. How can I show errors or warnings in my lightline?$/;"	S
5.vii. How can I change the format for echo messages?	plugged\\ale\\README.md	/^### 5.vii. How can I change the format for echo messages?$/;"	S
5.viii. How can I execute some code when ALE starts or stops linting?	plugged\\ale\\README.md	/^### 5.viii. How can I execute some code when ALE starts or stops linting?$/;"	S
5.x. How can I run linters only when I save files?	plugged\\ale\\README.md	/^### 5.x. How can I run linters only when I save files?$/;"	S
5.xi. How can I use the quickfix list instead of the loclist?	plugged\\ale\\README.md	/^### 5.xi. How can I use the quickfix list instead of the loclist?$/;"	S
5.xii. How can I check JSX files with both stylelint and eslint?	plugged\\ale\\README.md	/^### 5.xii. How can I check JSX files with both stylelint and eslint?$/;"	S
5.xiii. Will this plugin eat all of my laptop battery power?	plugged\\ale\\README.md	/^### 5.xiii. Will this plugin eat all of my laptop battery power?$/;"	S
5.xiv. How can I configure my C or C++ project?	plugged\\ale\\README.md	/^### 5.xiv. How can I configure my C or C++ project?$/;"	S
5.xv. How can I configure ALE differently for different buffers?	plugged\\ale\\README.md	/^### 5.xv. How can I configure ALE differently for different buffers?$/;"	S
5.xvi. How can I configure the height of the list in which ALE displays errors?	plugged\\ale\\README.md	/^### 5.xvi. How can I configure the height of the list in which ALE displays errors?$/;"	S
:ALEInfo	plugged\\ale\\.github\\ISSUE_TEMPLATE\\report-a-bug.md	/^### :ALEInfo$/;"	S
<	_vimrc	/^smap < <C-o><$/;"	m
<	_vimrc	/^xnoremap < <gv$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py b:Lf_AnyExplManager."accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "bufTagExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "bufExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "colorschemeExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "fileExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "functionExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "helpExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "lineExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "mruExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "selfExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> <2-LeftMouse> :exec g:Lf_py "tagExplManager.accept()"<CR>$/;"	m
<2-LeftMouse>	plugged\\tagbar\\autoload\\tagbar.vim	/^    inoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<2-LeftMouse>	plugged\\tagbar\\autoload\\tagbar.vim	/^    nnoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<A-#>	_vimrc	/^imap <silent> <A-#> <C-o>:setlocal cursorcolumn! cursorline!<CR>$/;"	m
<A-#>	_vimrc	/^nmap <silent> <A-#> :setlocal cursorcolumn! cursorline!<CR>$/;"	m
<A-+>	plugin\\underscore.vim	/^inoremap <silent> <A-+> <C-o>mZ<C-o>viw"-d<C-o>:let @- = UnderscoreToCamelCase(@-)<CR><C-o>"-P<C/;"	m
<A-+>	plugin\\underscore.vim	/^nnoremap <silent> <A-+> mZviw"-d:let @- = UnderscoreToCamelCase(@-)<CR>"-Pg`Z$/;"	m
<A-+>	plugin\\underscore.vim	/^xnoremap <silent> <A-+> mZ"-d:let @- = UnderscoreToCamelCase(@-)<CR>"-Pg`Z$/;"	m
<A-,>	plugin\\tabs.vim	/^	imap <silent> <A-,> <C-c>:tabp<CR>$/;"	m
<A-,>	plugin\\tabs.vim	/^	map <silent> <A-,> :tabp<CR>$/;"	m
<A-->	plugin\\underscore.vim	/^inoremap <silent> <A--> <C-o>mZ<C-o>viwgu<C-o>g`Z$/;"	m
<A-->	plugin\\underscore.vim	/^nnoremap <silent> <A--> mZviwgug`Z$/;"	m
<A-->	plugin\\underscore.vim	/^xnoremap <silent> <A--> mZgug`Z$/;"	m
<A-.>	plugin\\tabs.vim	/^	imap <silent> <A-.> <C-c>:tabn<CR>$/;"	m
<A-.>	plugin\\tabs.vim	/^	map <silent> <A-.> :tabn<CR>$/;"	m
<A-<>	plugin\\tabs.vim	/^	imap <silent> <A-<> <Esc>:if tabpagenr() > 1 \\| execute ":tabmove ".(tabpagenr()-2) \\| endif</;"	m
<A-<>	plugin\\tabs.vim	/^	map <silent> <A-<> :if tabpagenr() > 1 \\| execute ":tabmove ".(tabpagenr()-2) \\| endif<CR>$/;"	m
<A-=>	plugin\\underscore.vim	/^inoremap <silent> <A-=> <C-o>mZ<C-o>viwgU<C-o>g`Z$/;"	m
<A-=>	plugin\\underscore.vim	/^nnoremap <silent> <A-=> mZviwgUg`Z$/;"	m
<A-=>	plugin\\underscore.vim	/^xnoremap <silent> <A-=> mZgUg`Z$/;"	m
<A->>	plugin\\tabs.vim	/^	imap <silent> <A->> <Esc>:execute ":tabmove ".tabpagenr()<CR>$/;"	m
<A->>	plugin\\tabs.vim	/^	map <silent> <A->> :execute ":tabmove ".tabpagenr()<CR>$/;"	m
<A-BS>	plugin\\backspace.vim	/^cnoremap <silent> <A-BS> <C-w>$/;"	m
<A-BS>	plugin\\backspace.vim	/^inoremap <silent> <A-BS> <C-o>"_d:call SmartBackspace()<CR>$/;"	m
<A-C>	ftplugin\\php.vim	/^xmap <buffer> <A-C> <C-_>aphp_2_block<CR>$/;"	m
<A-E>	plugin\\ctrlspace.vim	/^map <A-E> :call myconf#ctrlspace#ReloadAll()<CR>$/;"	m
<A-E>	plugin\\tabs.vim	/^	map <A-E> :call ReloadTabs()<CR>$/;"	m
<A-G>	_vimrc	/^nnoremap <A-G> :echo fnamemodify(getcwd(), ':g')<CR>$/;"	m
<A-H>	_vimrc	/^nnoremap <A-H> :redraw \\| echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans/;"	m
<A-Left>	plugin\\ctrlspace.vim	/^imap <silent> <A-Left> <C-c>:call myconf#ctrlspace#Go('up')<CR>$/;"	m
<A-Left>	plugin\\ctrlspace.vim	/^nmap <silent> <A-Left> :call myconf#ctrlspace#Go('up')<CR>$/;"	m
<A-Q>	_vimrc	/^noremap <A-Q> <C-c>:qa!<CR>$/;"	m
<A-Q>	_vimrc	/^noremap! <A-Q> <C-c>:qa!<CR>$/;"	m
<A-Right>	plugin\\ctrlspace.vim	/^imap <silent> <A-Right> <C-c>:call myconf#ctrlspace#Go('down')<CR>$/;"	m
<A-Right>	plugin\\ctrlspace.vim	/^nmap <silent> <A-Right> :call myconf#ctrlspace#Go('down')<CR>$/;"	m
<A-T>	plugin\\tabs.vim	/^	imap <silent> <A-T> <C-c>:call CloneTab()<CR>$/;"	m
<A-T>	plugin\\tabs.vim	/^	map <silent> <A-T> :call CloneTab()<CR>$/;"	m
<A-W>	_vimrc	/^noremap <A-W> <C-c>:xa!<CR>$/;"	m
<A-W>	_vimrc	/^noremap! <A-W> <C-c>:xa!<CR>$/;"	m
<A-_>	plugin\\underscore.vim	/^inoremap <silent> <A-_> <C-o>mZ<C-o>viw"-d<C-o>:let @- = CamelCaseToUnderscore(@-)<CR><C-o>"-P<C/;"	m
<A-_>	plugin\\underscore.vim	/^nnoremap <silent> <A-_> mZviw"-d:let @- = CamelCaseToUnderscore(@-)<CR>"-Pg`Z$/;"	m
<A-_>	plugin\\underscore.vim	/^xnoremap <silent> <A-_> mZ"-d:let @- = CamelCaseToUnderscore(@-)<CR>"-Pg`Z$/;"	m
<A-c>	_vimrc	/^imap <A-c> <C-_><C-_><C-o><Down>$/;"	m
<A-c>	_vimrc	/^nmap <A-c> gcc<Down>$/;"	m
<A-c>	_vimrc	/^smap <A-c> <C-g>gc$/;"	m
<A-c>	_vimrc	/^xmap <A-c> gc$/;"	m
<A-d>	_vimrc	/^inoremap <A-d> <C-o>"_dd$/;"	m
<A-d>	_vimrc	/^nnoremap <A-d> "_dd$/;"	m
<A-d>	_vimrc	/^vnoremap <A-d> "_d$/;"	m
<A-e>	plugin\\ctrlspace.vim	/^map <A-e> :e!<CR>$/;"	m
<A-e>	plugin\\tabs.vim	/^	map <A-e> :e<CR>$/;"	m
<A-f>	_vimrc	/^inoremap <silent> <A-f> <C-O>za$/;"	m
<A-f>	_vimrc	/^nnoremap <silent> <A-f> za$/;"	m
<A-g>	_vimrc	/^nnoremap <A-g> :echo expand('%:p:g')<CR>$/;"	m
<A-h>	_vimrc	/^nnoremap <A-h> :noh<CR>$/;"	m
<A-k>	plugin\\tabs.vim	/^	imap <silent> <A-k> <C-o>:call CloseBuffer()<CR>$/;"	m
<A-k>	plugin\\tabs.vim	/^	nmap <silent> <A-k> :call CloseBuffer()<CR>$/;"	m
<A-l>	_vimrc	/^inoremap <A-l> <C-O>:set list!<CR>$/;"	m
<A-l>	_vimrc	/^nnoremap <A-l> :set list!<CR>$/;"	m
<A-m>	_vimrc	/^nnoremap <A-m> :call myconf#func#ToggleMatchParen()<CR>$/;"	m
<A-m>	_vimrc	/^noremap! <A-m> <C-o>:call myconf#func#ToggleMatchParen()<CR>$/;"	m
<A-n>	_vimrc	/^nmap <silent> <A-n> 0<Plug>(ale_next_wrap)zv$/;"	m
<A-o>	_vimrc	/^	inoremap <A-o> <C-o>$/;"	m
<A-o>	_vimrc	/^	nnoremap <A-o> <C-o>$/;"	m
<A-o>	_vimrc	/^	vnoremap <A-o> <C-o>$/;"	m
<A-p>	_vimrc	/^nmap <silent> <A-p> 0<Plug>(ale_previous_wrap)zv$/;"	m
<A-p>	plugin\\tabs.vim	/^	nnoremap <A-p> :exe "lcd " . expand("%:p:h")<CR>$/;"	m
<A-q>	_vimrc	/^noremap <A-q> <C-c>:q!<CR>$/;"	m
<A-q>	_vimrc	/^noremap! <A-q> <C-c>:q!<CR>$/;"	m
<A-q>	plugin\\ctrlspace.vim	/^noremap <silent> <A-q> :call myconf#ctrlspace#Quit()<CR>$/;"	m
<A-q>	plugin\\ctrlspace.vim	/^noremap! <silent> <A-q> <C-c>:call myconf#ctrlspace#Quit()<CR>$/;"	m
<A-r>	_vimrc	/^nnoremap <A-r> <C-R>$/;"	m
<A-r>	_vimrc	/^noremap! <A-r> <C-o><C-R>$/;"	m
<A-t>	_vimrc	/^inoremap <silent> <A-t> <C-r>=localtime()<CR>$/;"	m
<A-t>	plugin\\tabs.vim	/^	imap <silent> <A-t> <C-c>:tabnew<CR>$/;"	m
<A-t>	plugin\\tabs.vim	/^	map <silent> <A-t> :tabnew<CR>$/;"	m
<A-u>	_vimrc	/^nnoremap <A-u> u$/;"	m
<A-u>	_vimrc	/^noremap! <A-u> <C-o>u$/;"	m
<A-v>	_vimrc	/^inoremap <A-v> <C-o>viW$/;"	m
<A-v>	_vimrc	/^nnoremap <A-v> viW$/;"	m
<A-v>	_vimrc	/^vnoremap <A-v> <C-c>viW$/;"	m
<A-w>	_vimrc	/^noremap <A-w> <C-c>:x!<CR>$/;"	m
<A-w>	_vimrc	/^noremap! <A-w> <C-c>:x!<CR>$/;"	m
<A-w>	plugin\\ctrlspace.vim	/^noremap <silent> <A-w> :call myconf#ctrlspace#Write()<CR>$/;"	m
<A-w>	plugin\\ctrlspace.vim	/^noremap! <silent> <A-w> <C-c>:call myconf#ctrlspace#Write()<CR>$/;"	m
<BS>	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    snoremap <silent> <BS> <c-g>c$/;"	m
<C-C>	_vimrc	/^	vnoremap <C-C> y$/;"	m
<C-Del>	_vimrc	/^inoremap <C-Del> <C-o>"_dd$/;"	m
<C-Del>	_vimrc	/^nnoremap <C-Del> "_dd$/;"	m
<C-Del>	_vimrc	/^vnoremap <C-Del> "_d$/;"	m
<C-Enter>	plugin\\ctrlspace.vim	/^map <silent> <C-Enter> <C-c>:CtrlSpace \/<CR>$/;"	m
<C-Enter>	plugin\\ctrlspace.vim	/^map! <silent> <C-Enter> <C-c>:CtrlSpace \/<CR>$/;"	m
<C-F12>	plugin\\sftpsync_conf.vim	/^nnoremap <silent> <C-F12> :call sftpsync#Upload(expand('%:p'), 'beta')<CR>$/;"	m
<C-I>	plugged\\LeaderF\\autoload\\leaderf\\History.vim	/^    nnoremap <buffer> <silent> <C-I>         :exec g:Lf_py "historyExplManager.input()"<CR>$/;"	m
<C-PageDown>	_vimrc	/^imap <silent> <C-PageDown> <Esc>:tabnext<CR>$/;"	m
<C-PageDown>	plugin\\tabs.vim	/^	imap <silent> <C-PageDown> <C-c>:tabn<CR>$/;"	m
<C-PageDown>	plugin\\tabs.vim	/^	map <silent> <C-PageDown> :tabn<CR>$/;"	m
<C-PageUp>	_vimrc	/^imap <silent> <C-PageUp> <Esc>:tabprev<CR>$/;"	m
<C-PageUp>	plugin\\tabs.vim	/^	imap <silent> <C-PageUp> <C-c>:tabp<CR>$/;"	m
<C-PageUp>	plugin\\tabs.vim	/^	map <silent> <C-PageUp> :tabp<CR>$/;"	m
<C-V>	_vimrc	/^	inoremap <C-V> <C-o>P$/;"	m
<C-V>	_vimrc	/^	nnoremap <C-V> P$/;"	m
<C-X>	_vimrc	/^	vnoremap <C-X> d$/;"	m
<C-Y>	_vimrc	/^	inoremap <C-Y> <C-o><C-R>$/;"	m
<C-Y>	_vimrc	/^	nnoremap <C-Y> <C-R>$/;"	m
<C-Y>	_vimrc	/^inoremap <expr> <C-Y> pumvisible() ? "\\<C-Y>" : "\\<C-O>\\<C-R>"$/;"	m
<C-Z>	_vimrc	/^	inoremap <C-Z> <C-o>u$/;"	m
<C-Z>	_vimrc	/^	nnoremap <C-Z> u$/;"	m
<C-c>	_vimrc	/^	snoremap <C-c> <C-o>"+y$/;"	m
<C-h>	_vimrc	/^nmap <silent> <C-h> :LeaderfMru<CR>$/;"	m
<C-l>	_vimrc	/^nmap <silent> <C-l> :redraw<CR>:redraws<CR>$/;"	m
<C-q>	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> <C-q> <NOP>$/;"	m
<C-v>	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> <C-v> <NOP>$/;"	m
<C-x>	_vimrc	/^	snoremap <C-x> <C-o>"+d$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py b:Lf_AnyExplManager."accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "bufTagExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "bufExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "colorschemeExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "fileExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "functionExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "helpExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\History.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "historyExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "lineExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "mruExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "selfExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> <CR>          :exec g:Lf_py "tagExplManager.accept()"<CR>$/;"	m
<CR>	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> <CR> :call ale#preview#OpenSelectionInBuffer()<CR>$/;"	m
<DEL>	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    snoremap <silent> <DEL> <c-g>c$/;"	m
<Down>	_vimrc	/^	snoremap <Down> <C-c><Down>$/;"	m
<Down>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <Down>        <Down>:exec g:Lf_py "bufTagExplManager._previewResu/;"	m
<Down>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <Down>        <Down>:exec g:Lf_py "colorschemeExplManager._previe/;"	m
<Down>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <Down>        <Down>:exec g:Lf_py "functionExplManager._previewRe/;"	m
<Esc><Esc>	plugged\\lexima.vim\\plugin\\lexima.vim	/^  inoremap <unique> <Esc><Esc> <Esc>$/;"	m
<F12>	plugin\\sftpsync_conf.vim	/^nnoremap <silent> <F12> :call sftpsync#Upload(expand('%:p'), 'test')<CR>$/;"	m
<F1>	_vimrc	/^nnoremap <silent> <F1> :set paste!<CR>$/;"	m
<F1>	_vimrc	/^noremap! <silent> <F1> <C-o>:set paste!<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py b:Lf_AnyExplManager."toggleHelp()"<CR/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "bufTagExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "bufExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "colorschemeExplManager.toggleHelp()"/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "fileExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "functionExplManager.toggleHelp()"<CR/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "helpExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "lineExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "mruExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "selfExplManager.toggleHelp()"<CR>$/;"	m
<F1>	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> <F1>          :exec g:Lf_py "tagExplManager.toggleHelp()"<CR>$/;"	m
<F2>	_vimrc	/^nnoremap <F2> :w<CR>$/;"	m
<F2>	_vimrc	/^noremap! <F2> <C-o>:w<CR>$/;"	m
<F3>	_vimrc	/^nmap <silent> <F3> <Plug>(ale_lint)$/;"	m
<F4>	_vimrc	/^nnoremap <silent> <F4> :call <SID>ToggleNERDTree()<CR>$/;"	m
<F5>	_vimrc	/^	nnoremap <silent> <F5> :TagbarOpenAutoClose<CR>$/;"	m
<F5>	ftplugin\\tagbar.vim	/^nmap <buffer> <F5> q$/;"	m
<F5>	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> <F5>          :exec g:Lf_py "fileExplManager.refresh()"<CR>$/;"	m
<F5>	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> <F5>          :exec g:Lf_py "tagExplManager.refresh()"<CR>$/;"	m
<F9>	plugin\\quickfix.vim	/^map! <F9> <C-o><F9>$/;"	m
<F9>	plugin\\quickfix.vim	/^nnoremap <silent> <F9> :call myconf#quickfix#ToggleList("Location List", 'l')<CR>$/;"	m
<Leader><A-t>	_vimrc	/^nnoremap <silent> <Leader><A-t> :%s@^\\(  \\)\\+@\\=repeat('	', strlen(submatch(0))\/2)@g<CR>:no/;"	m
<Leader><A-t>	_vimrc	/^vnoremap <silent> <Leader><A-t> :s@^\\(  \\)\\+@\\=repeat('	', strlen(submatch(0))\/2)@g<CR>:noh/;"	m
<Leader>P	ftplugin\\php.vim	/^	map <buffer> <Leader>P :call ft#php#FixParensPsr2()<CR>$/;"	m
<Leader>S	_vimrc	/^xnoremap <Leader>S :sort u<CR>$/;"	m
<Leader>T	_vimrc	/^nnoremap <silent> <Leader>T :%s@^\\s\\+$@@g<CR>:noh<CR>$/;"	m
<Leader>T	_vimrc	/^vnoremap <silent> <Leader>T :s@^\\s\\+$@@g<CR>:noh<CR>$/;"	m
<Leader>c	ftplugin\\css_colours.vim	/^map <Leader>c :call FixCssColours()<CR>$/;"	m
<Leader>m	_vimrc	/^nnoremap <Leader>m :%s:\\%x0d::g<CR>$/;"	m
<Leader>n	_vimrc	/^nnoremap <Leader>n \/\\(\\p\\\\|$\\\\|\\s\\)\\@!.<CR>$/;"	m
<Leader>p	ftplugin\\php.vim	/^	map <buffer> <Leader>p :call ft#php#FixParens()<CR>$/;"	m
<Leader>p	ftplugin\\php.vim	/^	map <buffer> <Leader>p :call ft#php#Phpcbf()<CR>$/;"	m
<Leader>s	_vimrc	/^xnoremap <Leader>s :sort<CR>$/;"	m
<Leader>t	_vimrc	/^nnoremap <silent> <Leader>t :%s@^\\(    \\)\\+@\\=repeat('	', strlen(submatch(0))\/4)@g<CR>:noh</;"	m
<Leader>t	_vimrc	/^vnoremap <silent> <Leader>t :s@^\\(    \\)\\+@\\=repeat('	', strlen(submatch(0))\/4)@g<CR>:noh<C/;"	m
<Leader>v	_vimrc	/^nnoremap <silent> <Leader>v :e $myvimrc<CR>:cd $myconf<CR>$/;"	m
<Leader>w	_vimrc	/^nmap <silent> <Leader>w :ToggleStripWhitespaceOnSave<CR>:echo 'Changed b:strip_whitespace_on_sav/;"	m
<Leader>y	_vimrc	/^nnoremap <silent> <Leader>y :%s@^\\(	\\)\\+@\\=repeat(' ', strlen(submatch(0))*&ts)@g<CR>:noh<CR/;"	m
<Leader>y	_vimrc	/^vnoremap <silent> <Leader>y :s@^\\(	\\)\\+@\\=repeat(' ', strlen(submatch(0))*&ts)@g<CR>:noh<CR>$/;"	m
<Left>	_vimrc	/^	snoremap <Left> <C-c><Left>$/;"	m
<LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <LeftMouse>   <LeftMouse>:exec g:Lf_py "bufTagExplManager._previe/;"	m
<LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <LeftMouse>   <LeftMouse>:exec g:Lf_py "colorschemeExplManager._p/;"	m
<LeftMouse>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <LeftMouse>   <LeftMouse>:exec g:Lf_py "functionExplManager._prev/;"	m
<LeftRelease>	plugged\\tagbar\\autoload\\tagbar.vim	/^    inoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<LeftRelease>	plugged\\tagbar\\autoload\\tagbar.vim	/^    nnoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<M-">	_vimrc	/^			inoremap <M-"> "$/;"	m
<M-'>	_vimrc	/^			inoremap <M-'> '$/;"	m
<M-Down>	_vimrc	/^imap <M-Down> <C-o><C-w><Down>$/;"	m
<M-Down>	_vimrc	/^nmap <M-Down> <C-w><Down>$/;"	m
<M-F12>	plugin\\sftpsync_conf.vim	/^nnoremap <silent> <M-F12> :call sftpsync#Cycle(['test', '', 'emisja'])<CR>$/;"	m
<M-Up>	_vimrc	/^imap <M-Up> <C-o><C-w><Up>$/;"	m
<M-Up>	_vimrc	/^nmap <M-Up> <C-w><Up>$/;"	m
<MiddleMouse>	_vimrc	/^noremap! <MiddleMouse> <C-o>:set paste<CR><MiddleMouse><C-o>:set nopaste<CR>$/;"	m
<PageDown>	_vimrc	/^	snoremap <PageDown> <C-c><PageDown>$/;"	m
<PageDown>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <PageDown>    <PageDown>:exec g:Lf_py "bufTagExplManager._preview/;"	m
<PageDown>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <PageDown>    <PageDown>:exec g:Lf_py "colorschemeExplManager._pr/;"	m
<PageDown>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <PageDown>    <PageDown>:exec g:Lf_py "functionExplManager._previ/;"	m
<PageUp>	_vimrc	/^	snoremap <PageUp> <C-c><PageUp>$/;"	m
<PageUp>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <PageUp>      <PageUp>:exec g:Lf_py "bufTagExplManager._previewRe/;"	m
<PageUp>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <PageUp>      <PageUp>:exec g:Lf_py "colorschemeExplManager._prev/;"	m
<PageUp>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <PageUp>      <PageUp>:exec g:Lf_py "functionExplManager._preview/;"	m
<Plug>(ale_detail)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>$/;"	m
<Plug>(ale_disable)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>$/;"	m
<Plug>(ale_disable_buffer)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>$/;"	m
<Plug>(ale_enable)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>$/;"	m
<Plug>(ale_enable_buffer)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>$/;"	m
<Plug>(ale_find_references)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>$/;"	m
<Plug>(ale_first)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>$/;"	m
<Plug>(ale_fix)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>$/;"	m
<Plug>(ale_go_to_definition)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>$/;"	m
<Plug>(ale_go_to_definition_in_tab)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinitionInTab<Return>$/;"	m
<Plug>(ale_hover)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>$/;"	m
<Plug>(ale_last)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast<Return>$/;"	m
<Plug>(ale_lint)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>$/;"	m
<Plug>(ale_next)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext<Return>$/;"	m
<Plug>(ale_next_wrap)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>$/;"	m
<Plug>(ale_previous)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>$/;"	m
<Plug>(ale_previous_wrap)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>$/;"	m
<Plug>(ale_reset)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>$/;"	m
<Plug>(ale_reset_buffer)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>$/;"	m
<Plug>(ale_show_completion_menu)	plugged\\ale\\autoload\\ale\\completion.vim	/^cnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	plugged\\ale\\autoload\\ale\\completion.vim	/^inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o>$/;"	m
<Plug>(ale_show_completion_menu)	plugged\\ale\\autoload\\ale\\completion.vim	/^nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions/;"	m
<Plug>(ale_show_completion_menu)	plugged\\ale\\autoload\\ale\\completion.vim	/^onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	plugged\\ale\\autoload\\ale\\completion.vim	/^vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_toggle)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>$/;"	m
<Plug>(ale_toggle_buffer)	plugged\\ale\\plugin\\ale.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>$/;"	m
<Plug><cfile>	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^  cnoremap <expr><buffer> <Plug><cfile> scriptease#cfile()$/;"	m
<Plug>LeaderfBufferBottom	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfBufferBottom :<C-U>call leaderf#Buffer#startExpl('bottom')<CR>$/;"	m
<Plug>LeaderfBufferFullScreen	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfBufferFullScreen :<C-U>call leaderf#Buffer#startExpl('fullScreen'/;"	m
<Plug>LeaderfBufferLeft	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfBufferLeft :<C-U>call leaderf#Buffer#startExpl('left')<CR>$/;"	m
<Plug>LeaderfBufferRight	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfBufferRight :<C-U>call leaderf#Buffer#startExpl('right')<CR>$/;"	m
<Plug>LeaderfBufferTop	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfBufferTop :<C-U>call leaderf#Buffer#startExpl('top')<CR>$/;"	m
<Plug>LeaderfFileBottom	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfFileBottom :<C-U>call leaderf#File#startExpl('bottom')<CR>$/;"	m
<Plug>LeaderfFileFullScreen	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfFileFullScreen :<C-U>call leaderf#File#startExpl('fullScreen')<CR/;"	m
<Plug>LeaderfFileLeft	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfFileLeft :<C-U>call leaderf#File#startExpl('left')<CR>$/;"	m
<Plug>LeaderfFileRight	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfFileRight :<C-U>call leaderf#File#startExpl('right')<CR>$/;"	m
<Plug>LeaderfFileTop	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfFileTop :<C-U>call leaderf#File#startExpl('top')<CR>$/;"	m
<Plug>LeaderfMruCwdBottom	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfMruCwdBottom :<C-U>call leaderf#Mru#startExpl('bottom')<CR>$/;"	m
<Plug>LeaderfMruCwdFullScreen	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfMruCwdFullScreen :<C-U>call leaderf#Mru#startExpl('fullScreen')<C/;"	m
<Plug>LeaderfMruCwdLeft	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfMruCwdLeft :<C-U>call leaderf#Mru#startExpl('left')<CR>$/;"	m
<Plug>LeaderfMruCwdRight	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfMruCwdRight :<C-U>call leaderf#Mru#startExpl('right')<CR>$/;"	m
<Plug>LeaderfMruCwdTop	plugged\\LeaderF\\plugin\\leaderf.vim	/^nnoremap <silent> <Plug>LeaderfMruCwdTop :<C-U>call leaderf#Mru#startExpl('top')<CR>$/;"	m
<Plug>ScripteaseFilter	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^nnoremap <expr> <Plug>ScripteaseFilter scriptease#filterop()$/;"	m
<Plug>ScripteaseFilter	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^xnoremap <expr> <Plug>ScripteaseFilter scriptease#filterop()$/;"	m
<Plug>ScripteaseHelp	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^  nnoremap <silent><buffer> <Plug>ScripteaseHelp :<C-U>exe 'help '.scriptease#helptopic()<CR>$/;"	m
<Plug>ScripteaseSynnames	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^nnoremap <silent> <Plug>ScripteaseSynnames :<C-U>exe scriptease#synnames_map(v:count)<CR>$/;"	m
<Plug>SuperTabBackward	plugged\\supertab\\plugin\\supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	plugged\\supertab\\plugin\\supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=SuperTab('n')<cr>$/;"	m
<Plug>TComment_<Leader>_<space>	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_<space> :TComment $/;"	m
<Plug>TComment_<Leader>__	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>__ :TComment<cr>$/;"	m
<Plug>TComment_<Leader>__	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^xnoremap <Plug>TComment_<Leader>__ :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_<Leader>_a	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_a :TCommentAs $/;"	m
<Plug>TComment_<Leader>_b	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<Leader>_i	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^xnoremap <Plug>TComment_<Leader>_i :TCommentInline<cr>$/;"	m
<Plug>TComment_<Leader>_n	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<Leader>_p	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_p vip:TComment<cr>$/;"	m
<Plug>TComment_<Leader>_r	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_r :TCommentRight<cr>$/;"	m
<Plug>TComment_<Leader>_s	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<Leader>_s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_><c-_>	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_><c-_> <c-o>:TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_><c-_> :TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^vnoremap <Plug>TComment_<c-_><c-_> :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_<c-_><space>	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_><space> <c-o>:TComment $/;"	m
<Plug>TComment_<c-_><space>	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_><space> :TComment $/;"	m
<Plug>TComment_<c-_>a	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>a <c-o>:TCommentAs $/;"	m
<Plug>TComment_<c-_>a	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>a :TCommentAs $/;"	m
<Plug>TComment_<c-_>b	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>b <c-\\><c-o>:TCommentBlock mode=#<cr>$/;"	m
<Plug>TComment_<c-_>b	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<c-_>ca	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>ca :<c-u>call tcomment#SetOption("as", input("Comment as: ", &filety/;"	m
<Plug>TComment_<c-_>cc	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>cc :<c-u>call tcomment#SetOption("count", v:count1)<cr>$/;"	m
<Plug>TComment_<c-_>i	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>i <c-\\><c-o>v:TCommentInline mode=#<cr>$/;"	m
<Plug>TComment_<c-_>i	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>i v:TCommentInline mode=I#<cr>$/;"	m
<Plug>TComment_<c-_>i	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^vnoremap <Plug>TComment_<c-_>i :TCommentInline<cr>$/;"	m
<Plug>TComment_<c-_>n	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>n <c-o>:TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>n	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>p	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>p <c-o>:norm! m`vip<cr>:TComment<cr><c-o>``$/;"	m
<Plug>TComment_<c-_>p	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>p m`vip:TComment<cr>``$/;"	m
<Plug>TComment_<c-_>r	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>r <c-o>:TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>r	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>r :TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>s	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^inoremap <Plug>TComment_<c-_>s <c-o>:TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_>s	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_<c-_>s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_Comment	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^xnoremap <silent> <Plug>TComment_Comment :<c-u>if v:count > 0 \\| call tcomment#SetOption("count/;"	m
<Plug>TComment_Uncomment	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^xnoremap <silent> <Plug>TComment_Uncomment :<c-u>if v:count > 0 \\| call tcomment#SetOption("cou/;"	m
<Plug>TComment_gc	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^xnoremap <Plug>TComment_gc :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_ic	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^noremap <Plug>TComment_ic :<c-U>call tcomment#textobject#InlineComment()<cr>$/;"	m
<Plug>TComment_ic	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^vnoremap <Plug>TComment_ic :<c-U>call tcomment#textobject#InlineComment()<cr>$/;"	m
<Right>	_vimrc	/^	snoremap <Right> <C-c><Right>$/;"	m
<S-CR>	ftplugin\\nerdtree.vim	/^map <buffer> <silent> <S-CR> go$/;"	m
<S-F12>	plugin\\sftpsync_conf.vim	/^nnoremap <silent> <S-F12> :call sftpsync#Upload(expand('%:p'), 'production')<CR>$/;"	m
<S-F1>	_vimrc	/^nnoremap <S-F1> :call <SID>ToggleSyntax()<CR>$/;"	m
<S-F1>	_vimrc	/^noremap! <S-F1> <C-o>::call <SID>ToggleSyntax()<CR>$/;"	m
<S-F2>	_vimrc	/^nnoremap <S-F2> :wa<CR>$/;"	m
<S-F2>	_vimrc	/^noremap! <S-F2> <C-o>:wa<CR>$/;"	m
<S-F3>	_vimrc	/^nmap <silent> <S-F3> <Plug>(ale_fix)$/;"	m
<S-F4>	_vimrc	/^nnoremap <silent> <S-F4> :NERDTreeClose<CR>$/;"	m
<S-F5>	_vimrc	/^	nnoremap <silent> <S-F5> :TagbarToggle<CR>$/;"	m
<S-F9>	plugin\\quickfix.vim	/^map! <S-F9> <C-o><S-F9>$/;"	m
<S-F9>	plugin\\quickfix.vim	/^nnoremap <silent> <S-F9> :call myconf#quickfix#ToggleList("Quickfix List", 'c')<CR>$/;"	m
<S-v>	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> <S-v> <NOP>$/;"	m
<SID>_	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^onoremap <SID>_ _$/;"	m
<Space>	_vimrc	/^nnoremap <Space> zz$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py b:Lf_AnyExplManager."input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "bufTagExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "bufExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "colorschemeExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "fileExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "functionExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "helpExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "lineExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "mruExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "selfExplManager.input()"<CR>$/;"	m
<Tab>	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> <Tab>         :exec g:Lf_py "tagExplManager.input()"<CR>$/;"	m
<Up>	_vimrc	/^	snoremap <Up> <C-c><Up>$/;"	m
<Up>	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> <Up>          <Up>:exec g:Lf_py "bufTagExplManager._previewResult/;"	m
<Up>	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> <Up>          <Up>:exec g:Lf_py "colorschemeExplManager._previewR/;"	m
<Up>	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> <Up>          <Up>:exec g:Lf_py "functionExplManager._previewResu/;"	m
<bs>	plugged\\supertab\\plugin\\supertab.vim	/^    imap <buffer> <bs> <c-r>=<SID>CompletionReset("\\<lt>bs>")<cr>$/;"	m
<c-]>	plugged\\supertab\\plugin\\supertab.vim	/^    nmap <silent> <buffer> <c-]> :call <SID>SetCompletionType()<cr>$/;"	m
<c-h>	plugged\\supertab\\plugin\\supertab.vim	/^    imap <buffer> <c-h> <c-r>=<SID>CompletionReset("\\<lt>c-h>")<cr>$/;"	m
<c-h>	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    snoremap <silent> <c-h> <c-g>c$/;"	m
<c-r>	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    snoremap <c-r> <c-g>"_c<c-r>$/;"	m
<c-x>	plugged\\supertab\\plugin\\supertab.vim	/^  inoremap <silent> <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	autoload\\plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    nnoremap <silent> <buffer> <cr> :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNod/;"	m
<cr>	plugged\\supertab\\plugin\\supertab.vim	/^      inoremap <silent> <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<cr>	plugged\\supertab\\plugin\\supertab.vim	/^    nmap <silent> <buffer> <cr> :call <SID>SetCompletionType()<cr>$/;"	m
<esc>[	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^		noremap <silent><buffer><esc>[ :call ctrlspace#keys#MarkKeyEscSequence()<CR>$/;"	m
<plug>(matchup-%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent> <plug>(matchup-%)$/;"	m
<plug>(matchup-%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  onoremap <silent> <plug>(matchup-%)$/;"	m
<plug>(matchup-%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)$/;"	m
<plug>(matchup-[%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent> <plug>(matchup-[%)$/;"	m
<plug>(matchup-[%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  onoremap <silent> <plug>(matchup-[%)$/;"	m
<plug>(matchup-[%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xmap     <plug>(matchup-[%) <sid>(matchup-[%)$/;"	m
<plug>(matchup-]%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent> <plug>(matchup-]%)$/;"	m
<plug>(matchup-]%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  onoremap <silent> <plug>(matchup-]%)$/;"	m
<plug>(matchup-]%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xmap     <plug>(matchup-]%) <sid>(matchup-]%)$/;"	m
<plug>(matchup-c_g%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  inoremap <silent> <plug>(matchup-c_g%)$/;"	m
<plug>(matchup-double-click)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent> <plug>(matchup-double-click)$/;"	m
<plug>(matchup-g%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent> <plug>(matchup-g%)$/;"	m
<plug>(matchup-g%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  onoremap <silent> <plug>(matchup-g%)$/;"	m
<plug>(matchup-g%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xmap     <silent> <plug>(matchup-g%) <sid>(matchup-g%)$/;"	m
<plug>(matchup-hi-surround)	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^  nnoremap <silent> <plug>(matchup-hi-surround)$/;"	m
<plug>(matchup-reload)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <plug>(matchup-reload) :<c-u>MatchupReload<cr>$/;"	m
<plug>(matchup-z%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent> <plug>(matchup-z%)$/;"	m
<plug>(matchup-z%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  onoremap <silent> <plug>(matchup-z%)$/;"	m
<plug>(matchup-z%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xmap     <silent> <plug>(matchup-z%) <sid>(matchup-z%)$/;"	m
<plug>(plug-preview)	autoload\\plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<sid>(matchup-%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xnoremap <silent> <sid>(matchup-%)$/;"	m
<sid>(matchup-[%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xnoremap <silent> <sid>(matchup-[%)$/;"	m
<sid>(matchup-]%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xnoremap <silent> <sid>(matchup-]%)$/;"	m
<sid>(matchup-g%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xnoremap <silent> <sid>(matchup-g%)$/;"	m
<sid>(matchup-z%)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  xnoremap <silent> <sid>(matchup-z%)$/;"	m
<sid>(wise)	plugged\\vim-matchup\\autoload\\matchup.vim	/^  nnoremap <silent><expr> <sid>(wise)$/;"	m
>	_vimrc	/^smap > <C-o>>$/;"	m
>	_vimrc	/^xnoremap > >gv$/;"	m
A	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> A <NOP>$/;"	m
ALEBufferFixGroup	plugged\\ale\\autoload\\ale\\fix.vim	/^augroup ALEBufferFixGroup$/;"	a
ALECleanupGroup	plugged\\ale\\plugin\\ale.vim	/^augroup ALECleanupGroup$/;"	a
ALECompletionGroup	plugged\\ale\\autoload\\ale\\completion.vim	/^    augroup ALECompletionGroup$/;"	a
ALEDetail	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()$/;"	c
ALEDisable	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEDisable :call ale#toggle#Disable()$/;"	c
ALEDisableBuffer	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEDisableBuffer :call ale#toggle#DisableBuffer(bufnr(''))$/;"	c
ALEEnable	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEEnable :call ale#toggle#Enable()$/;"	c
ALEEnableBuffer	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEEnableBuffer :call ale#toggle#EnableBuffer(bufnr(''))$/;"	c
ALEEvents	plugged\\ale\\autoload\\ale\\events.vim	/^    augroup ALEEvents$/;"	a
ALEFindReferences	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEFindReferences :call ale#references#Find()$/;"	c
ALEFirst	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)$/;"	c
ALEFix	plugged\\ale\\plugin\\ale.vim	/^command! -bar -nargs=* -complete=customlist,ale#fix#registry#CompleteFixers ALEFix :call ale#fix/;"	c
ALEFixSuggest	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)$/;"	c
ALEGoToDefinition	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEGoToDefinition :call ale#definition#GoTo({})$/;"	c
ALEGoToDefinitionInTab	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEGoToDefinitionInTab :call ale#definition#GoTo({'open_in_tab': 1})$/;"	c
ALEHighlightBufferGroup	plugged\\ale\\autoload\\ale\\highlight.vim	/^augroup ALEHighlightBufferGroup$/;"	a
ALEHover	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEHover :call ale#hover#Show(bufnr(''), getcurpos()[1],$/;"	c
ALEInfo	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEInfo :call ale#debugging#Info()$/;"	c
ALEInfoToClipboard	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboard()$/;"	c
ALEInfoToFile	plugged\\ale\\plugin\\ale.vim	/^command! -bar -nargs=1 ALEInfoToFile :call ale#debugging#InfoToFile(<f-args>)$/;"	c
ALELast	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)$/;"	c
ALELint	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALELint :call ale#Queue(0, 'lint_file')$/;"	c
ALENext	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALENext :call ale#loclist_jumping#Jump('after', 0)$/;"	c
ALENextWrap	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)$/;"	c
ALEPrevious	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEPrevious :call ale#loclist_jumping#Jump('before', 0)$/;"	c
ALEPreviousWrap	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)$/;"	c
ALEReset	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEReset :call ale#toggle#Reset()$/;"	c
ALEResetBuffer	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEResetBuffer :call ale#toggle#ResetBuffer(bufnr(''))$/;"	c
ALEStopAllLSPs	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEStopAllLSPs :call ale#lsp#reset#StopAllLSPs()$/;"	c
ALEToggle	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEToggle :call ale#toggle#Toggle()$/;"	c
ALEToggleBuffer	plugged\\ale\\plugin\\ale.vim	/^command! -bar ALEToggleBuffer :call ale#toggle#ToggleBuffer(bufnr(''))$/;"	c
ALWAYS	plugged\\vim-snippets\\pythonx\\javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
AO	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use ArrayObject as AO; \/\/ same with rename$/;"	a	namespace:Foo	typeref:unknown:ArrayObject
ARR_D	plugged\\ultisnips\\test\\constant.py	/^ARR_D = '\\x1bOB'$/;"	v
ARR_L	plugged\\ultisnips\\test\\constant.py	/^ARR_L = '\\x1bOD'$/;"	v
ARR_R	plugged\\ultisnips\\test\\constant.py	/^ARR_R = '\\x1bOC'$/;"	v
ARR_U	plugged\\ultisnips\\test\\constant.py	/^ARR_U = '\\x1bOA'$/;"	v
A_CONST	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    const A_CONST = 'foo';$/;"	d	class:UserClass
Abbrev	plugged\\vim-json\\json-test.json	/^					"Abbrev": "ISO 8879:1986",$/;"	s	object:GlossDiv.GlossList.GlossEntry
About	plugged\\phpcomplete.vim\\README.md	/^## About$/;"	s
Acknowledgements	plugged\\tagbar-phpctags.vim\\README.md	/^Acknowledgements$/;"	s
Acknowledgments	plugged\\vim-matchup\\README.md	/^## Acknowledgments$/;"	s
Acronym	plugged\\vim-json\\json-test.json	/^					"Acronym": "SGML",$/;"	s	object:GlossDiv.GlossList.GlossEntry
Actual behaviour	plugged\\LeaderF\\ISSUE_TEMPLATE.md	/^### Actual behaviour$/;"	S
AddFunc_Opt	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class AddFunc_Opt(_AddFuncBase):$/;"	c
AddFunc_Simple	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class AddFunc_Simple(_AddFuncBase):$/;"	c
AddNewSnippetSource	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class AddNewSnippetSource(_VimTest):$/;"	c
AddedSnippetsSource	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\added.py	/^class AddedSnippetsSource(SnippetSource):$/;"	c
Aliases for snippets	plugged\\ultisnips\\doc\\examples\\snippets-aliasing\\README.md	/^# Aliases for snippets$/;"	c
Anon_NoTrigger_AfterSpace	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_NoTrigger_AfterSpace(_AnonBase):$/;"	c
Anon_NoTrigger_BeginningOfLine	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_NoTrigger_BeginningOfLine(_AnonBase):$/;"	c
Anon_NoTrigger_FirstCharOfLine	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_NoTrigger_FirstCharOfLine(_AnonBase):$/;"	c
Anon_NoTrigger_Multi	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_NoTrigger_Multi(_AnonBase):$/;"	c
Anon_NoTrigger_Simple	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_NoTrigger_Simple(_AnonBase):$/;"	c
Anon_Trigger_Multi	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_Trigger_Multi(_AnonBase):$/;"	c
Anon_Trigger_Opts	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_Trigger_Opts(_AnonBase):$/;"	c
Anon_Trigger_Simple	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_Trigger_Simple(_AnonBase):$/;"	c
Anon_Trigger_Twice	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class Anon_Trigger_Twice(_AnonBase):$/;"	c
AnyExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^class AnyExplManager(Manager):$/;"	c
AnyExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^class AnyExplorer(Explorer):$/;"	c
AnyHub	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^class AnyHub(object):$/;"	c
ArrayAccess	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use ArrayAccess; \/\/ simple bilt in class import$/;"	a	namespace:Foo	typeref:unknown:ArrayAccess
AssertLSPLanguage	plugged\\ale\\autoload\\ale\\assert.vim	/^    command! -nargs=+ AssertLSPLanguage :call ale#assert#LSPLanguage(<args>)$/;"	c
AssertLSPOptions	plugged\\ale\\autoload\\ale\\assert.vim	/^    command! -nargs=+ AssertLSPOptions :call ale#assert#LSPOptions(<args>)$/;"	c
AssertLSPProject	plugged\\ale\\autoload\\ale\\assert.vim	/^    command! -nargs=+ AssertLSPProject :call ale#assert#LSPProject(<args>)$/;"	c
AssertLinter	plugged\\ale\\autoload\\ale\\assert.vim	/^    command! -nargs=+ AssertLinter :call ale#assert#Linter(<args>)$/;"	c
AssertLinterNotExecuted	plugged\\ale\\autoload\\ale\\assert.vim	/^    command! -nargs=0 AssertLinterNotExecuted :call ale#assert#LinterNotExecuted()$/;"	c
Async run gcc to compile current file	plugged\\asyncrun.vim\\README.md	/^#### Async run gcc to compile current file$/;"	t
Async run make	plugged\\asyncrun.vim\\README.md	/^#### Async run make$/;"	t
AsyncExecutor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^class AsyncExecutor(object):$/;"	c
AsyncRun	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^command! -bang -nargs=+ -range=0 -complete=file AsyncRun $/;"	c
AsyncRun - Run shell command	plugged\\asyncrun.vim\\README.md	/^#### AsyncRun - Run shell command$/;"	t
AsyncRunExit	_vimrc	/^function! AsyncRunExit()$/;"	f
AsyncRun_Job_OnTimer	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! g:AsyncRun_Job_OnTimer(id)$/;"	f
AsyncStop	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^command! -bang -nargs=0 AsyncStop call asyncrun#stop('<bang>')$/;"	c
AsyncStop - Stop the running job	plugged\\asyncrun.vim\\README.md	/^#### AsyncStop - Stop the running job$/;"	t
Asynchronous Lint Engine [![Travis CI Build Status](https://travis-ci.org/w0rp/ale.svg?branch=master)](https://travis-ci.org/w0rp/ale) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/w0rp/ale)	plugged\\ale\\README.md	/^# Asynchronous Lint Engine [![Travis CI Build Status](https:\/\/travis-ci.org\/w0rp\/ale.svg?bra/;"	c
AugroupHotfix	plugged\\vim-matchup\\test\\issues\\7\\hotfix.vim	/^function! AugroupHotfix()$/;"	f
AugroupHotfix	plugged\\vim-matchup\\test\\issues\\7\\hotfix2.vim	/^function! AugroupHotfix()$/;"	f
Author	plugged\\vim-editorconfig\\README.md	/^Author$/;"	s
Author	plugged\\vim-gitbranch\\README.md	/^## Author$/;"	s
Authors and License	plugged\\vim-ctrlspace\\README.md	/^## Authors and License$/;"	s
Autocmd:	plugged\\asyncrun.vim\\README.md	/^#### Autocmd:$/;"	t
Autocommands	plugged\\ultisnips\\test\\test_Autocommands.py	/^class Autocommands(_VimTest):$/;"	c
Autocommands	plugged\\vim-localvimrc\\README.md	/^## Autocommands$/;"	s
Autojump from tabstop when it's empty	plugged\\ultisnips\\doc\\examples\\autojump-if-empty\\README.md	/^# Autojump from tabstop when it's empty$/;"	c
Automatically Saving Workspace	plugged\\vim-ctrlspace\\README.md	/^### Automatically Saving Workspace$/;"	S
Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne	plugged\\ultisnips\\test\\test_Autotrigger.py	/^class Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne(_VimTest):$/;"	c
Autotrigger_CanMatchContext	plugged\\ultisnips\\test\\test_Autotrigger.py	/^class Autotrigger_CanMatchContext(_VimTest):$/;"	c
Autotrigger_CanMatchPreviouslySelectedPlaceholder	plugged\\ultisnips\\test\\test_Autotrigger.py	/^class Autotrigger_CanMatchPreviouslySelectedPlaceholder(_VimTest):$/;"	c
Autotrigger_CanMatchSimpleTrigger	plugged\\ultisnips\\test\\test_Autotrigger.py	/^class Autotrigger_CanMatchSimpleTrigger(_VimTest):$/;"	c
Autotrigger_WillProduceNoExceptionWithVimLowerThan214	plugged\\ultisnips\\test\\test_Autotrigger.py	/^class Autotrigger_WillProduceNoExceptionWithVimLowerThan214(_VimTest):$/;"	c
BRACES	plugged\\ultisnips\\test\\vim_interface.py	/^    BRACES = re.compile('([}{])')$/;"	v	class:VimInterfaceWindows
BS	plugged\\ultisnips\\test\\constant.py	/^BS = '\\x7f'$/;"	v
Backspace_TabStop_NotZero	plugged\\ultisnips\\test\\test_Editing.py	/^class Backspace_TabStop_NotZero(_VimTest):$/;"	c
Backspace_TabStop_Zero	plugged\\ultisnips\\test\\test_Editing.py	/^class Backspace_TabStop_Zero(_VimTest):$/;"	c
Bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^class Bar {$/;"	c
Bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_new_oneline_chain.php	/^class Bar {$/;"	c
Bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^class Bar {$/;"	c
Bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^    Bar \/\/ cursor just before the comment$/;"	a	typeref:unknown:Bar
Bar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^class Bar2 {$/;"	c
BarClass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\foo.class.php	/^class BarClass {$/;"	c
BarClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\extends\\bar.class.php	/^class BarClass { }$/;"	c
BarClass2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\extends_extends\\bar2_extends_baz.class.php	/^class BarClass2 extends BazClass { }$/;"	c
BarInterface	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\foo.class.php	/^interface BarInterface {$/;"	i
BarNS\\Things	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^namespace BarNS\\Things;$/;"	n
BaseFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\base_foo.php	/^class BaseFoo {$/;"	c
Basic Options	plugged\\ctrlp.vim\\readme.md	/^## Basic Options$/;"	s
Basic Rules	plugged\\lexima.vim\\README.md	/^### Basic Rules$/;"	S
Basic Settings	plugged\\vim-ctrlspace\\README.md	/^### Basic Settings$/;"	S
Basic Usage	plugged\\ctrlp.vim\\readme.md	/^## Basic Usage$/;"	s
Baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^    Baz \/\/ cursor just before the comment$/;"	a	typeref:unknown:Baz
Baz2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type.php	/^class Baz2 {$/;"	c
Baz2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo2.php	/^class Baz2 {$/;"	c	namespace:NS2
Baz3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^class Baz3 {$/;"	c
BazClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\extends_extends\\baz.class.php	/^class BazClass { }$/;"	c
BazClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\typehinted_functions.php	/^class BazClass$/;"	c
Before you add a feature	plugged\\ultisnips\\CONTRIBUTING.md	/^## Before you add a feature$/;"	s
Beginner's Guide	plugged\\phpcomplete.vim\\GUIDE.md	/^## Beginner's Guide$/;"	s
Better JSON for VIM	plugged\\vim-json\\readme.md	/^Better JSON for VIM$/;"	c
Bookmark	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Branch model	plugged\\vim-matchup\\CONTRIBUTING.md	/^## Branch model$/;"	s
Breakadd	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^  command! -buffer -bar -nargs=? -complete=custom,s:Complete_breakadd Breakadd$/;"	c
Breakdel	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^  command! -buffer -bar -nargs=? -complete=custom,s:Complete_breakdel Breakdel$/;"	c
BufExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^class BufExplManager(Manager):$/;"	c
BufTagExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^class BufTagExplManager(Manager):$/;"	c
BufTagExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^class BufTagExplorer(Explorer):$/;"	c
BufferExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^class BufferExplorer(Explorer):$/;"	c
Bug1251994	plugged\\ultisnips\\test\\test_Fixes.py	/^class Bug1251994(_VimTest):$/;"	c
C, C++	plugged\\vim-matchup\\README.md	/^#### C, C++$/;"	t
CHECK	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    CHECK = re.compile(r"^\\${VISUAL[:}\/]")$/;"	v	class:VisualToken
CHECK	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    CHECK = re.compile(r'^\\$\\d+')$/;"	v	class:MirrorToken
CHECK	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    CHECK = re.compile(r'^\\${\\d+[:}]')$/;"	v	class:TabStopToken
CHECK	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    CHECK = re.compile(r'^\\${\\d+\\\/')$/;"	v	class:TransformationToken
CHECK	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    CHECK = re.compile(r'^`!p\\s')$/;"	v	class:PythonCodeToken
CHECK	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    CHECK = re.compile(r'^`!v\\s')$/;"	v	class:VimLCodeToken
COMPLETION_OPTIONS	plugged\\ultisnips\\test\\test_Completion.py	/^COMPLETION_OPTIONS = 'completion1\\ncompletion2\\n'$/;"	v
COMPL_ACCEPT	plugged\\ultisnips\\test\\constant.py	/^COMPL_ACCEPT = chr(25)$/;"	v
COMPL_KW	plugged\\ultisnips\\test\\constant.py	/^COMPL_KW = chr(24) + chr(14)$/;"	v
CONFIG_FILE	plugged\\html5.vim\\Makefile	/^CONFIG_FILE=config.mk$/;"	m
CURL_OPT	plugged\\html5.vim\\Makefile	/^CURL_OPT=$/;"	m
CUSTOMIZATION	plugged\\lexima.vim\\README.md	/^CUSTOMIZATION$/;"	s
CamelCaseToUnderscore	plugin\\underscore.vim	/^function! CamelCaseToUnderscore(s)$/;"	f
Change Log	plugged\\html5.vim\\CHANGES.markdown	/^## Change Log$/;"	s
Change Log	plugged\\html5.vim\\README.md	/^## Change Log$/;"	s
Changelog	plugged\\vim-localvimrc\\README.md	/^## Changelog$/;"	s
ChildFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\child_foo.php	/^class ChildFoo extends BaseFoo {$/;"	c
ClearAllBookmarks	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearAllCtrlPCaches	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearBookmarks	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearCtrlPCache	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
CloneTab	plugin\\tabs.vim	/^	function! CloneTab()$/;"	f
CloseBuffer	plugin\\tabs.vim	/^	function! CloseBuffer()$/;"	f
CloseTagDisableBuffer	plugged\\vim-closetag\\plugin\\closetag.vim	/^    com! -nargs=* -complete=file CloseTagDisableBuffer let b:closetag_disabled = 1$/;"	c
CloseTagEnableBuffer	plugged\\vim-closetag\\plugin\\closetag.vim	/^    com! -nargs=* -complete=file CloseTagEnableBuffer let b:closetag_disabled = 0$/;"	c
CloseTagToggleBuffer	plugged\\vim-closetag\\plugin\\closetag.vim	/^    com! -nargs=* -complete=file CloseTagToggleBuffer let b:closetag_disabled = exists('b:closet/;"	c
Code style	plugged\\vim-matchup\\CONTRIBUTING.md	/^## Code style$/;"	s
Colors	plugged\\vim-ctrlspace\\README.md	/^#### Colors$/;"	t
ColorschemeExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^class ColorschemeExplManager(Manager):$/;"	c
ColorschemeExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^class ColorschemeExplorer(Explorer):$/;"	c
Colourising namespace separator in `use`, `extends` and `implements`	plugged\\php.vim\\README.md	/^##### Colourising namespace separator in `use`, `extends` and `implements`$/;"	T
Colourising parentheses	plugged\\php.vim\\README.md	/^##### Colourising parentheses$/;"	T
Columns	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Columns    int$/;"	m	struct:main.Context
Commands	plugged\\vim-closetag\\README.md	/^#### Commands$/;"	t
Commands	plugged\\vim-localvimrc\\README.md	/^## Commands$/;"	s
CommentedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^class CommentedFoo {$/;"	c
Common problems	plugged\\vim-json\\readme.md	/^Common problems$/;"	s
CommonFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^class CommonFoo {$/;"	c
CommonTrait	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^trait CommonTrait {}$/;"	t
Compile go project	plugged\\asyncrun.vim\\README.md	/^#### Compile go project$/;"	t
CompilerSet	plugged\\vim-javascript\\compiler\\eslint.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
Completion_BackwardsJumpWithoutCOMPL_ACCEPT	plugged\\ultisnips\\test\\test_Completion.py	/^class Completion_BackwardsJumpWithoutCOMPL_ACCEPT(_VimTest):$/;"	c
Completion_ForwardsJumpWithoutCOMPL_ACCEPT	plugged\\ultisnips\\test\\test_Completion.py	/^class Completion_ForwardsJumpWithoutCOMPL_ACCEPT(_VimTest):$/;"	c
Completion_SimpleExample_ECR	plugged\\ultisnips\\test\\test_Completion.py	/^class Completion_SimpleExample_ECR(_VimTest):$/;"	c
ComputeNoise	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (item *FileItem) ComputeNoise() {$/;"	f	unknown:main.FileItem
Concealing Characters	plugged\\vim-javascript\\README.md	/^## Concealing Characters$/;"	s
Configuration	plugged\\php.vim\\README.md	/^Configuration$/;"	s
Configuration	plugged\\tagbar-phpctags.vim\\README.md	/^Configuration$/;"	s
Configuration Variables	plugged\\vim-javascript\\README.md	/^## Configuration Variables$/;"	s
Configure	plugged\\html5.vim\\README.md	/^## Configure$/;"	s
Console	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^  command! -bar -bang -buffer Console PP$/;"	c
Console	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^  command! -bar -bang -buffer Console Runtime|PP$/;"	c
Contents	plugged\\vim-snippets\\README.md	/^Contents$/;"	s
Context	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type Context struct {$/;"	s	package:main
ContextSnippets_ContextHasAccessToVisual	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_ContextHasAccessToVisual(_VimTest):$/;"	c
ContextSnippets_ContextIsClearedBeforeExpand	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_ContextIsClearedBeforeExpand(_VimTest):$/;"	c
ContextSnippets_CursorIsZeroBased	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_CursorIsZeroBased(_VimTest):$/;"	c
ContextSnippets_DoNotExpandOnFalse	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_DoNotExpandOnFalse(_VimTest):$/;"	c
ContextSnippets_ExpandOnTrue	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_ExpandOnTrue(_VimTest):$/;"	c
ContextSnippets_Header_DoNotExpandOnFalse	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_Header_DoNotExpandOnFalse(_VimTest):$/;"	c
ContextSnippets_Header_ExpandOnTrue	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_Header_ExpandOnTrue(_VimTest):$/;"	c
ContextSnippets_PriorityKeyword	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_PriorityKeyword(_VimTest):$/;"	c
ContextSnippets_ReportError	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_ReportError(_VimTest):$/;"	c
ContextSnippets_ReportErrorOnIndexOutOfRange	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_ReportErrorOnIndexOutOfRange(_VimTest):$/;"	c
ContextSnippets_SimpleSnippet	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_SimpleSnippet(_VimTest):$/;"	c
ContextSnippets_SnippetPriority	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_SnippetPriority(_VimTest):$/;"	c
ContextSnippets_UseContext	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^class ContextSnippets_UseContext(_VimTest):$/;"	c
Contribute	plugged\\vim-localvimrc\\README.md	/^## Contribute$/;"	s
Contributing	plugged\\vim-javascript\\README.md	/^## Contributing$/;"	s
Contributing	plugged\\vim-matchup\\README.md	/^### Contributing$/;"	S
Contributing	plugged\\vim-scriptease\\README.markdown	/^## Contributing$/;"	s
Contributing to UltiSnips	plugged\\ultisnips\\CONTRIBUTING.md	/^# Contributing to UltiSnips$/;"	c
Cooperate with other Plugins	plugged\\asyncrun.vim\\README.md	/^## Cooperate with other Plugins$/;"	s
Cooperate with vim-fugitive:	plugged\\asyncrun.vim\\README.md	/^#### Cooperate with vim-fugitive:$/;"	t
Create a release	plugged\\vim-localvimrc\\RELEASE.md	/^# Create a release$/;"	c
Creating Issues	plugged\\ale\\.github\\CONTRIBUTING.md	/^## Creating Issues$/;"	s
Credits	plugged\\asyncrun.vim\\README.md	/^## Credits$/;"	s
Credits	plugged\\vim-better-whitespace\\README.md	/^## Credits$/;"	s
Credits	plugged\\vim-localvimrc\\README.md	/^## Credits$/;"	s
CtagsBetterPhp	plugged\\phpcomplete.vim\\misc\\ctags-better-php.rb	/^class CtagsBetterPhp < Formula$/;"	c
CtrlP	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=dir CtrlP         cal ctrlp#init(0, { 'dir': <q-args> })$/;"	c
CtrlPAug	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPBookmarkDir	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDirAdd	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=dir -bang CtrlPBookmarkDirAdd$/;"	c
CtrlPBufTag	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTagAll	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBuffer	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init('buf')$/;"	c
CtrlPChange	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChangeAll	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPClearAllCaches	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearCache	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPCurFile	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init('fil', { 'mode': 'c' })$/;"	c
CtrlPCurWD	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init('fil', { 'mode': '' })$/;"	c
CtrlPDir	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=dir CtrlPDir$/;"	c
CtrlPLastMode	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLazy	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^		aug CtrlPLazy$/;"	a
CtrlPLine	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=buffer CtrlPLine$/;"	c
CtrlPMRUF	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^	aug CtrlPMRUF$/;"	a
CtrlPMRUFiles	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -n=? -com=dir CtrlPMRUFiles cal ctrlp#init('mru', { 'dir': <q-args> })$/;"	c
CtrlPMixed	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPPyMatch	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.py	/^def CtrlPPyMatch():$/;"	f
CtrlPQuickfix	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPRTS	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRoot	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init('fil', { 'mode': 'r' })$/;"	c
CtrlPTag	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPUndo	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
CtrlSpace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=* -range CtrlSpace :call ctrlspace#window#Toggle(0) | :call feedkeys(<q-args>)$/;"	c
CtrlSpaceAddProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=* -range -complete=dir CtrlSpaceAddProjectRoot :call ctrlspace#roots#AddProject/;"	c
CtrlSpaceClearTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=0 -range CtrlSpaceClearTabLabel :call ctrlspace#tabs#RemoveTabLabel(0)$/;"	c
CtrlSpaceGoDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=0 -range CtrlSpaceGoDown :call ctrlspace#window#GoToBufferListPosition("down")$/;"	c
CtrlSpaceGoUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=0 -range CtrlSpaceGoUp :call ctrlspace#window#GoToBufferListPosition("up")$/;"	c
CtrlSpaceLeave	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^	augroup CtrlSpaceLeave$/;"	a
CtrlSpaceLoadWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=* -range -bang CtrlSpaceLoadWorkspace :call ctrlspace#workspaces#LoadWorkspace(/;"	c
CtrlSpaceNewWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=0 -range CtrlSpaceNewWorkspace :call ctrlspace#workspaces#NewWorkspace()$/;"	c
CtrlSpaceRemoveProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=* -range -complete=dir CtrlSpaceRemoveProjectRoot :call ctrlspace#roots#RemoveP/;"	c
CtrlSpaceSaveWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=* -range CtrlSpaceSaveWorkspace :call ctrlspace#workspaces#SaveWorkspace(<q-arg/;"	c
CtrlSpaceTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^	command! -nargs=0 -range CtrlSpaceTabLabel :call ctrlspace#tabs#NewTabLabel(0)$/;"	c
CtrlSpaceUpdateSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^	augroup CtrlSpaceUpdateSearch$/;"	a
Current Result	plugged\\nerdtree\\.github\\ISSUE_TEMPLATE.md	/^### Current Result$/;"	S
CurrentLineWhitespaceOff	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! -nargs=* CurrentLineWhitespaceOff call <SID>CurrentLineWhitespaceOff( <f-args> )$/;"	c
CurrentLineWhitespaceOn	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! CurrentLineWhitespaceOn call <SID>CurrentLineWhitespaceOn()$/;"	c
CursorMovement_BS_InEditMode	plugged\\ultisnips\\test\\test_Movement.py	/^class CursorMovement_BS_InEditMode(_VimTest):$/;"	c
CursorMovement_Multiline_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class CursorMovement_Multiline_ECR(_VimTest):$/;"	c
Customization	plugged\\LeaderF\\README.md	/^Customization$/;"	s
Customizing the highlighting colors	plugged\\vim-matchup\\README.md	/^#### Customizing the highlighting colors$/;"	t
D	autoload\\plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> D             :exec g:Lf_py "bufExplManager.deleteBuffer()"<CR>$/;"	m
DEFAULT RULES	plugged\\lexima.vim\\README.md	/^DEFAULT RULES$/;"	s
DEPEND_DIR	plugged\\html5.vim\\Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
DIRS	plugged\\html5.vim\\Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
DJANGO_SETTINGS_MODULE	plugged\\ale\\test\\command_callback\\python_paths\\namespace_package_pytest\\pytest.ini	/^DJANGO_SETTINGS_MODULE=foo.settings$/;"	k	section:pytest
DONT_FIND_ME	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\constants.php	/^define('DONT_FIND_ME', 6 * 7);$/;"	d
DOT REPEATABLE	plugged\\lexima.vim\\README.md	/^DOT REPEATABLE$/;"	s
DT	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace_uppercase.php	/^USE DateTime AS DT;$/;"	a	namespace:Mahou	typeref:unknown:DateTime
DUMP_FILENAME	plugged\\ultisnips\\pythonx\\UltiSnips\\debug.py	/^DUMP_FILENAME = '\/tmp\/file.txt' if not sys.platform.lower().startswith('win') \\$/;"	v
DateTime	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use DateTime, DateTimeZone; \/\/ multiple import in one line$/;"	a	namespace:Foo	typeref:unknown:DateTime
DateTime	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\traits.php	/^use DateTime;$/;"	a	namespace:NS1	typeref:unknown:DateTime
DateTimeZone	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use DateTime, DateTimeZone; \/\/ multiple import in one line$/;"	a	namespace:Foo	typeref:unknown:DateTimeZone
DeleteCurrentTabStop1_JumpBack	plugged\\ultisnips\\test\\test_Editing.py	/^class DeleteCurrentTabStop1_JumpBack(_VimTest):$/;"	c
DeleteCurrentTabStop2_JumpBack	plugged\\ultisnips\\test\\test_Editing.py	/^class DeleteCurrentTabStop2_JumpBack(_VimTest):$/;"	c
DeleteCurrentTabStop3_JumpAround	plugged\\ultisnips\\test\\test_Editing.py	/^class DeleteCurrentTabStop3_JumpAround(_VimTest):$/;"	c
DeleteLastTwoLinesInSnippet	plugged\\ultisnips\\test\\test_Editing.py	/^class DeleteLastTwoLinesInSnippet(_VimTest):$/;"	c
DeleteSnippetInsertion0	plugged\\ultisnips\\test\\test_Editing.py	/^class DeleteSnippetInsertion0(_VimTest):$/;"	c
DeleteSnippetInsertion1	plugged\\ultisnips\\test\\test_Editing.py	/^class DeleteSnippetInsertion1(_VimTest):$/;"	c
Dependencies	plugged\\tagbar\\README.md	/^## Dependencies$/;"	s
Describe your question, feature request, or bug.	plugged\\LeaderF\\ISSUE_TEMPLATE.md	/^### Describe your question, feature request, or bug.$/;"	S
Description	plugged\\vim-editorconfig\\README.md	/^Description$/;"	s
Detailed feature documentation	plugged\\vim-matchup\\README.md	/^### Detailed feature documentation$/;"	S
Developing	plugged\\php.vim\\README.md	/^Developing$/;"	s
Development	plugged\\vim-matchup\\README.md	/^## Development$/;"	s
DisableStripWhitespaceOnSave	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! DisableStripWhitespaceOnSave call <SID>DisableStripWhitespaceOnSave()$/;"	c
DisableWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! DisableWhitespace call <SID>DisableWhitespace()$/;"	c
Disarm	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bang -bar -nargs=* -complete=customlist,scriptease#complete Disarm$/;"	c
DoMatchParen	plugged\\vim-matchup\\plugin\\matchup.vim	/^command! DoMatchParen call matchup#matchparen#toggle(1)$/;"	c
DoNotCrashOnUndoAndJumpInNestedSnippet	plugged\\ultisnips\\test\\test_Editing.py	/^class DoNotCrashOnUndoAndJumpInNestedSnippet(_VimTest):$/;"	c
DoNotExpandAfterSpace_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class DoNotExpandAfterSpace_ExpectCorrectResult(_SimpleExpands):$/;"	c
DoNotTrimSpacesAtEndOfLinesByDefault	plugged\\ultisnips\\test\\test_Chars.py	/^class DoNotTrimSpacesAtEndOfLinesByDefault(_VimTest):$/;"	c
DocBlockedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\docblocked_foo.php	/^class DocBlockedFoo {$/;"	c
Documentation	plugged\\supertab\\README.rst	/^Documentation$/;"	s	chapter:Overview
Documentation style	plugged\\vim-matchup\\CONTRIBUTING.md	/^## Documentation style$/;"	s
Documenting	plugged\\ultisnips\\CONTRIBUTING.md	/^## Documenting$/;"	s
DontFindMe	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^namespace DontFindMe;$/;"	n
DontFindMe	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\multiple_namespace.php	/^namespace DontFindMe {$/;"	n
Dots	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Dots       string$/;"	m	struct:main.Context
DotsSize	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	DotsSize   int$/;"	m	struct:main.Context
Dynamic tabstop generation	plugged\\ultisnips\\doc\\examples\\tabstop-generation\\README.md	/^# Dynamic tabstop generation$/;"	c
E	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use Exception as E,$/;"	a	namespace:Foo	typeref:unknown:Exception
EA	plugged\\ultisnips\\test\\constant.py	/^EA = '#'  # Expand anonymous$/;"	v
EE	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^    ErrorException as EE; \/\/ multiple imports on multiple lines with renames$/;"	a	namespace:Foo	typeref:unknown:ErrorException
EOF	plugged\\vim-localvimrc\\support\\build_vim-tools.sh	/^cat > $DEST\/bin\/html2vimdoc <<EOF$/;"	h
EOF	plugged\\vim-localvimrc\\test\\setup.sh	/^  cat >${DIR}\/.localvimrc <<EOF$/;"	h
EOF	plugged\\vim-localvimrc\\test\\setup.sh	/^  cat >${DIR}\/.lvimrc <<EOF$/;"	h
ESC	plugged\\ultisnips\\test\\constant.py	/^ESC = '\\x1b'$/;"	v
EX	plugged\\ultisnips\\test\\constant.py	/^EX = '\\t'  # EXPAND$/;"	v
EditableTextObject	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^class EditableTextObject(TextObject):$/;"	c
EnableJSX	plugged\\vim-jsx\\ftdetect\\javascript.vim	/^fu! <SID>EnableJSX()$/;"	f
EnableStripWhitespaceOnSave	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! EnableStripWhitespaceOnSave call <SID>EnableStripWhitespaceOnSave()$/;"	c
EnableWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! EnableWhitespace call <SID>EnableWhitespace()$/;"	c
EndOfTextToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class EndOfTextToken(Token):$/;"	c
Endwise Rules	plugged\\lexima.vim\\README.md	/^### Endwise Rules$/;"	S
Environment	plugged\\nerdtree\\.github\\ISSUE_TEMPLATE.md	/^### Environment$/;"	S
EscapeCharToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class EscapeCharToken(Token):$/;"	c
EscapedChar	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_escaped_char.py	/^class EscapedChar(NoneditableTextObject):$/;"	c
Example	plugged\\asyncrun.vim\\README.md	/^## Example$/;"	s
Example	plugged\\vim-matchup\\test\\issues\\26\\example.rb	/^class Example$/;"	c
ExclusiveSelection_RealWorldCase_Test	plugged\\ultisnips\\test\\test_Selection.py	/^class ExclusiveSelection_RealWorldCase_Test(_ES_Base):$/;"	c
ExclusiveSelection_SimpleTabstop_Test	plugged\\ultisnips\\test\\test_Selection.py	/^class ExclusiveSelection_SimpleTabstop_Test(_ES_Base):$/;"	c
ExitSnippetModeAfterTabstopZero	plugged\\ultisnips\\test\\test_Expand.py	/^class ExitSnippetModeAfterTabstopZero(_VimTest):$/;"	c
ExpandInTheMiddleOfLine_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class ExpandInTheMiddleOfLine_ExpectCorrectResult(_SimpleExpands):$/;"	c
Expected Result	plugged\\nerdtree\\.github\\ISSUE_TEMPLATE.md	/^### Expected Result$/;"	S
Expected behaviour	plugged\\LeaderF\\ISSUE_TEMPLATE.md	/^### Expected behaviour$/;"	S
Explain the issue	plugged\\vim-matchup\\ISSUE_TEMPLATE.md	/^### Explain the issue$/;"	S
Explorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^class Explorer(object):$/;"	c
Explorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^class Explorer(metaclass = ABCMeta):$/;"	c
ExtendsNonExistsing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_file_class.php	/^class ExtendsNonExistsing extends NoSuchClass {$/;"	c
F	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^use Foo\\FooClass as F;$/;"	a	namespace:Foo	typeref:unknown:Foo\\FooClass
F.A.Q.	plugged\\nerdtree\\README.markdown	/^F.A.Q.$/;"	s
FAQ	plugged\\vim-matchup\\README.md	/^## FAQ$/;"	s
FILES	plugged\\html5.vim\\Makefile	/^FILES=`ls -1 | grep '.vim$$'`$/;"	m
FINDME_FOO	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\constants.php	/^define('FINDME_FOO', 42);$/;"	d
FM_BITSCAN_WINDOWS	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    #define FM_BITSCAN_WINDOWS$/;"	d	file:
FM_BITSCAN_WINDOWS64	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^        #define FM_BITSCAN_WINDOWS64$/;"	d	file:
FM_BIT_LENGTH	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^        #define FM_BIT_LENGTH(/;"	d	file:
FM_BIT_LENGTH	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    #define FM_BIT_LENGTH(/;"	d	file:
FM_BIT_LENGTH	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint32_t FM_BIT_LENGTH(uint64_t x)$/;"	f	typeref:typename:uint32_t
FM_BitLength	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint32_t FM_BitLength(uint64_t x)$/;"	f	typeref:typename:uint32_t
FM_CTZ	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^#define FM_CTZ(/;"	d	file:
FOO2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetFunctionLocation\\foo.function.php	/^function FOO2 ()$/;"	f
FOO_CONST	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    const FOO_CONST = 42;$/;"	d	class:Foo
FOSimple_Break_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Format.py	/^class FOSimple_Break_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOTextAfter_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Format.py	/^class FOTextAfter_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOTextBeforeAndAfter_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Format.py	/^class FOTextBeforeAndAfter_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOWrapOnLongWord_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Format.py	/^class FOWrapOnLongWord_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
Fcn	plugged\\vim-matchup\\test\\issues\\16\\blocks.vim	/^function! Fcn()$/;"	f
Feature	plugged\\html5.vim\\README.md	/^## Feature$/;"	s
Features	plugged\\phpcomplete.vim\\README.md	/^## Features$/;"	s
Features	plugged\\supertab\\README.rst	/^Features$/;"	s	chapter:Overview
Features	plugged\\vim-matchup\\README.md	/^## Features$/;"	s
Features	plugged\\vim-scriptease\\README.markdown	/^## Features$/;"	s
FileExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^class FileExplManager(Manager):$/;"	c
FileExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^class FileExplorer(Explorer):$/;"	c
FileItem	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type FileItem struct {$/;"	s	package:main
FindMe	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\multiple_namespace.php	/^namespace FindMe {$/;"	n
First Steps	plugged\\vim-ctrlspace\\README.md	/^### First Steps$/;"	S
FixCssColours	ftplugin\\css_colours.vim	/^function! FixCssColours()$/;"	f
FoldOverwrite_Simple_ECR	plugged\\ultisnips\\test\\test_Folding.py	/^class FoldOverwrite_Simple_ECR(_VimTest):$/;"	c
Fold_DeleteMiddleLine_ECR	plugged\\ultisnips\\test\\test_Folding.py	/^class Fold_DeleteMiddleLine_ECR(_VimTest):$/;"	c
FoldingEnabled_SnippetWithFold_ExpectNoFolding	plugged\\ultisnips\\test\\test_Folding.py	/^class FoldingEnabled_SnippetWithFold_ExpectNoFolding(_VimTest):$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^class Foo {$/;"	c	namespace:NS1
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\commented_foo.class.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_interface_implemented.php	/^class Foo implements FooAble {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\interfaces.php	/^interface Foo {$/;"	i
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_classname\\foo.class.php	/^class Foo extends \\NS1\\Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_classname\\ns1_foo.class.php	/^class Foo { }$/;"	c	namespace:NS1
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassLocation\\foo.class.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\arrays.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\builtin_function.php	/^namespace Foo;$/;"	n
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\completion_in_function_insides.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^class Foo {$/;"	c	namespace:FooNS
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^use FooNS\\Foo;$/;"	a	namespace:FooNS\\SubNameSpace	typeref:unknown:FooNS\\Foo
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_new_oneline_chain.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^namespace Foo;$/;"	n
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\parent.php	/^class Foo extends FooBase {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^namespace Foo;$/;"	n
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\stuff_with_the_word_class_in_them.php	/^class Foo extends DateTime {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^class Foo extends Bar implements ArrayAccess, It$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^namespace Foo;$/;"	n
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use NS1\\Foo; \/\/ imported class$/;"	a	namespace:Foo	typeref:unknown:NS1\\Foo
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace.php	/^class Foo {$/;"	c	namespace:Mahou
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace2.php	/^class Foo {$/;"	c	namespace:Mahou
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace_uppercase.php	/^class Foo {$/;"	c	namespace:Mahou
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\traits.php	/^class Foo {$/;"	c	namespace:NS1
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo.php	/^class Foo {$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^class Foo {$/;"	c	namespace:NS1
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetFunctionReturnTypeHint\\functions.php	/^class Foo$/;"	c
Foo	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^class Foo {$/;"	c	namespace:NS1
Foo1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^use Foo1 \/\/ cursor just before the comment$/;"	a	typeref:unknown:Foo1
Foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo2.class.php	/^class Foo2 {$/;"	c
Foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\interfaces.php	/^interface Foo2 {$/;"	i
Foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassLocation\\foo.class.php	/^ final class Foo2 {$/;"	c
Foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^use Foo2,$/;"	a	typeref:unknown:Foo2
Foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo2.php	/^class Foo2 {$/;"	c	namespace:NS2
Foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo3.class.php	/^class Foo3 {$/;"	c
Foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassLocation\\foo.class.php	/^class Foo3{$/;"	c
Foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^use Foo3,$/;"	a	typeref:unknown:Foo3
Foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo_references.php	/^class Foo3 {$/;"	c
FooAble	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_interface_implemented.php	/^interface FooAble {$/;"	i
FooAbstract	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_abstract.class.php	/^abstract class FooAbstract {$/;"	c
FooAbstract	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_abstract_with_whitespace.class.php	/^    ABSTRACT	class	FooAbstract$/;"	c
FooBar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentFunctionBoundaries\\test.php	/^class FooBar {$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\foo.class.php	/^class FooClass {$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\extends\\foo_extends_bar.class.php	/^class FooClass extends BarClass { }$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo.class.php	/^class FooClass {$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_whitespace.class.php	/^class FooClass$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_with_extra_content.class.php	/^class FooClass {$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo.class.php	/^class FooClass {$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_outside.class.php	/^class FooClass {$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_with_whitespace.class.php	/^    clASs		    FooClass$/;"	c
FooClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^class FooClass {$/;"	c	namespace:Foo
FooClass2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\extends_extends\\foo2_extends_bar2.class.php	/^class FooClass2 extends BarClass2 { }$/;"	c
FooClassNotThisOne	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_whitespace.class.php	/^class FooClassNotThisOne {$/;"	c
FooExtension	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^class FooExtension extends Foo {$/;"	c	namespace:FooNS\\SubNameSpace
FooFoo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\interfaces.php	/^interface FooFoo2 extends Foo, Foo2 {$/;"	i
FooInterface	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo.interface.php	/^interface FooInterface {$/;"	i
FooInterface	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^interface FooInterface {$/;"	i	namespace:NS1
FooMethodsClass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^class FooMethodsClass {$/;"	c
FooNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^namespace FooNS;$/;"	n
FooNS\\SomethingNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^namespace FooNS\\SomethingNS;$/;"	n
FooNS\\SubNameSpace	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^namespace FooNS\\SubNameSpace;$/;"	n
FooPropertiesClass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_properties.class.php	/^class FooPropertiesClass {$/;"	c
FooReturnBars	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^class FooReturnBars {$/;"	c
FooSub	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^class FooSub {$/;"	c	namespace:NS1\\SUBNS
FooSub	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^class FooSub {$/;"	c	namespace:NS1\\SUBNS
FooSubSub	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^class FooSubSub {$/;"	c	namespace:NS1\\SUBNS\\SUBSUB
FooSubSub	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^class FooSubSub {$/;"	c	namespace:NS1\\SUBNS\\SUBSUB
FooTrait	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo.trait.php	/^trait FooTrait {$/;"	t
FooTrait	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_file_class.php	/^trait FooTrait { }$/;"	t
Frequently Asked Questions	plugged\\supertab\\README.rst	/^Frequently Asked Questions$/;"	s	chapter:Overview
Frequently Asked Questions	plugged\\vim-better-whitespace\\README.md	/^## Frequently Asked Questions$/;"	s
Frequently Asked Questions	plugged\\vim-jsx\\README.md	/^Frequently Asked Questions$/;"	s
FunctionExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^class FunctionExplManager(Manager):$/;"	c
FunctionExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^class FunctionExplorer(Explorer):$/;"	c
Functions	plugged\\vim-localvimrc\\README.md	/^## Functions$/;"	s
Future - ideas - examples	plugged\\vim-snippets\\README.md	/^Future - ideas - examples$/;"	s
Fuzzy Search Hints	plugged\\vim-ctrlspace\\README.md	/^### Fuzzy Search Hints$/;"	S
FuzzyMatch	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^class FuzzyMatch(object):$/;"	c
GIT_SOURCES	plugged\\html5.vim\\Makefile	/^GIT_SOURCES=$/;"	m
Generating Vim help files	plugged\\ale\\README.md	/^#### Generating Vim help files$/;"	t
Generating a `tags` file	plugged\\phpcomplete.vim\\GUIDE.md	/^### Generating a `tags` file$/;"	S
GetJSONIndent	plugged\\vim-json\\indent\\json.vim	/^function GetJSONIndent()$/;"	f
GetJavascriptIndent	plugged\\vim-javascript\\indent\\javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetJsxIndent	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! GetJsxIndent()$/;"	f
GetTabNr	plugin\\tabs.vim	/^	function! GetTabNr(nr)$/;"	f
Getting Started	plugged\\vim-ctrlspace\\README.md	/^## Getting Started$/;"	s
Getting completions	plugged\\phpcomplete.vim\\GUIDE.md	/^### Getting completions$/;"	S
Git push	plugged\\asyncrun.vim\\README.md	/^#### Git push$/;"	t
GitBranch	plugged\\vim-gitbranch\\plugin\\gitbranch.vim	/^augroup GitBranch$/;"	a
Glob Command	plugged\\vim-ctrlspace\\README.md	/^#### Glob Command$/;"	t
GlossDef	plugged\\vim-json\\json-test.json	/^					"GlossDef": {$/;"	o	object:GlossDiv.GlossList.GlossEntry
GlossDiv	plugged\\vim-json\\json-test.json	/^		"GlossDiv": {$/;"	o
GlossEntry	plugged\\vim-json\\json-test.json	/^                "GlossEntry": {$/;"	o	object:GlossDiv.GlossList
GlossList	plugged\\vim-json\\json-test.json	/^			"GlossList": {$/;"	o	object:GlossDiv
GlossSee	plugged\\vim-json\\json-test.json	/^					"GlossSee": "markup"$/;"	s	object:GlossDiv.GlossList.GlossEntry
GlossSeeAlso	plugged\\vim-json\\json-test.json	/^						"GlossSeeAlso": ["GML", "XML"]$/;"	a	object:GlossDiv.GlossList.GlossEntry.GlossDef
GlossTerm	plugged\\vim-json\\json-test.json	/^					"GlossTerm": "Standard Generalized Markup Language",$/;"	s	object:GlossDiv.GlossList.GlossEntry
Go Engine	plugged\\vim-ctrlspace\\README.md	/^#### Go Engine$/;"	t
Grep key word	plugged\\asyncrun.vim\\README.md	/^#### Grep key word $/;"	t
Guide for code contributions	plugged\\vim-matchup\\CONTRIBUTING.md	/^# Guide for code contributions$/;"	c
Guidelines	plugged\\ale\\.github\\CONTRIBUTING.md	/^## Guidelines$/;"	s
H	_vimrc	/^command! -nargs=1 -complete=help H :call <SID>Help("<args>")$/;"	c
H	plugin\\quickfix.vim	/^nmap <silent> H :cfirs<CR>zv$/;"	m
HTMLHotFix	plugged\\vim-matchup\\test\\issues\\8\\hotfix.vim	/^function! HTMLHotFix()$/;"	f
HelpExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^class HelpExplManager(Manager):$/;"	c
HelpExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^class HelpExplorer(Explorer):$/;"	c
Helptags	_vimrc	/^command! -bar Helptags :call pathogen#helptags()$/;"	c
Helptags	autoload\\pathogen.vim	/^command! -bar Helptags :call pathogen#helptags()$/;"	c
HiLink	plugged\\vim-javascript\\extras\\flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged\\vim-javascript\\extras\\flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged\\vim-javascript\\extras\\jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged\\vim-javascript\\extras\\jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged\\vim-javascript\\syntax\\javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged\\vim-javascript\\syntax\\javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HighlightGroup	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^typedef struct HighlightGroup$/;"	s	file:
HighlightGroup	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^}HighlightGroup;$/;"	t	typeref:struct:HighlightGroup	file:
HighlightPos	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^typedef struct HighlightPos$/;"	s	file:
HighlightPos	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^}HighlightPos;$/;"	t	typeref:struct:HighlightPos	file:
Historical notes	plugged\\vim-snippets\\README.md	/^Historical notes$/;"	s
History	plugged\\asyncrun.vim\\README.md	/^## History$/;"	s
HistoryExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^class HistoryExplManager(Manager):$/;"	c
HistoryExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^class HistoryExplorer(Explorer):$/;"	c
HtmlIndent	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndent_CheckUserSettings	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CountBraces	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_FindStartTag	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagStart	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_IsOpenTag	plugged\\html5.vim\\indent\\html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
HtmlListHotfix	plugged\\vim-matchup\\test\\issues\\19\\hotfix.vim	/^function! HtmlListHotfix()$/;"	f
I	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> I <NOP>$/;"	m
ID	plugged\\vim-json\\json-test.json	/^                    "ID": "SGML",$/;"	s	object:GlossDiv.GlossList.GlossEntry
IMMoving_AcceptInputWhenMoved_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_AcceptInputWhenMoved_ECR(_VimTest):$/;"	c
IMMoving_CursorsKeys_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_CursorsKeys_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideAbove_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_ExitWhenOutsideAbove_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideBelow_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_ExitWhenOutsideBelow_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideLeft_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_ExitWhenOutsideLeft_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideRight_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_ExitWhenOutsideRight_ECR(_VimTest):$/;"	c
IMMoving_NoExitingEventAtEnd_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_NoExitingEventAtEnd_ECR(_VimTest):$/;"	c
IMMoving_NoExiting_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_NoExiting_ECR(_VimTest):$/;"	c
IMMoving_NotExitingWhenBarelyOutsideLeft_ECR	plugged\\ultisnips\\test\\test_Movement.py	/^class IMMoving_NotExitingWhenBarelyOutsideLeft_ECR(_VimTest):$/;"	c
Idea by Analogy	plugged\\vim-ctrlspace\\README.md	/^## Idea by Analogy$/;"	s
Implementation	plugged\\ultisnips\\doc\\examples\\autojump-if-empty\\README.md	/^## Implementation$/;"	s
Inclusive and exclusive motions	plugged\\vim-matchup\\README.md	/^### Inclusive and exclusive motions$/;"	S
IndentUtil	plugged\\ultisnips\\pythonx\\UltiSnips\\indent_util.py	/^class IndentUtil(object):$/;"	c
Indentation Specific	plugged\\vim-javascript\\README.md	/^## Indentation Specific$/;"	s
Index	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Index      int$/;"	m	struct:main.FileItem
Information	plugged\\ale\\.github\\ISSUE_TEMPLATE\\report-a-bug.md	/^## Information$/;"	s
Init	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (items *ItemCollection) Init() error {$/;"	f	unknown:main.ItemCollection
Init	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func Init(input *os.File) error {$/;"	f	package:main
Install	plugged\\asyncrun.vim\\README.md	/^## Install$/;"	s
Install	plugged\\html5.vim\\README.md	/^## Install$/;"	s
Install	plugged\\phpcomplete.vim\\README.md	/^## Install$/;"	s
Install	plugged\\vim-closetag\\README.md	/^#### Install$/;"	t
Install	plugged\\vim-editorconfig\\README.md	/^Install$/;"	s
Install with [pathogen](https://github.com/tpope/vim-pathogen)	plugged\\vim-javascript\\README.md	/^### Install with [pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S
Installation	plugged\\LeaderF\\README.md	/^Installation$/;"	s
Installation	plugged\\ctrlp-py-matcher\\README.md	/^Installation$/;"	s
Installation	plugged\\ctrlp.vim\\readme.md	/^## Installation$/;"	s
Installation	plugged\\nerdtree\\README.markdown	/^Installation$/;"	s
Installation	plugged\\php.vim\\README.md	/^Installation$/;"	s
Installation	plugged\\supertab\\README.rst	/^Installation$/;"	s	chapter:Overview
Installation	plugged\\tagbar-phpctags.vim\\README.md	/^Installation$/;"	s
Installation	plugged\\tagbar\\README.md	/^## Installation$/;"	s
Installation	plugged\\vim-better-whitespace\\README.md	/^## Installation$/;"	s
Installation	plugged\\vim-ctrlspace\\README.md	/^### Installation$/;"	S
Installation	plugged\\vim-gitbranch\\README.md	/^## Installation$/;"	s
Installation	plugged\\vim-javascript\\README.md	/^## Installation$/;"	s
Installation	plugged\\vim-jsx\\README.md	/^Installation$/;"	s
Installation	plugged\\vim-matchup\\README.md	/^## Installation$/;"	s
Installation	plugged\\vim-scriptease\\README.markdown	/^## Installation$/;"	s
Installation	plugged\\vim-snippets\\README.md	/^Installation$/;"	s
Interoperability	plugged\\vim-matchup\\README.md	/^## Interoperability$/;"	s
Introduction	plugged\\nerdtree\\README.markdown	/^Introduction$/;"	s
Issue descriptions	plugged\\vim-matchup\\CONTRIBUTING.md	/^# Issue descriptions$/;"	c
ItemCollection	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type ItemCollection []*FileItem$/;"	t	package:main
J	plugin\\quickfix.vim	/^nmap <silent> J :cprev<CR>zv$/;"	m
JB	plugged\\ultisnips\\test\\constant.py	/^JB = '+'  # Jump backwards$/;"	v
JF	plugged\\ultisnips\\test\\constant.py	/^JF = '?'  # Jump forwards$/;"	v
JumpForward_DefSnippet	plugged\\ultisnips\\test\\test_Editing.py	/^class JumpForward_DefSnippet(_VimTest):$/;"	c
K	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^    nmap <silent><buffer> K <Plug>ScripteaseHelp$/;"	m
K	plugin\\quickfix.vim	/^nmap <silent> K :cnext<CR>zv$/;"	m
L	autoload\\plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload\\plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	plugin\\quickfix.vim	/^nmap <silent> L :clast<CR>zv$/;"	m
LE	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^    LogicException as LE,$/;"	a	namespace:Foo	typeref:unknown:LogicException
LS	plugged\\ultisnips\\test\\constant.py	/^LS = '@'  # List snippets$/;"	v
Language Tips	plugged\\asyncrun.vim\\README.md	/^## Language Tips$/;"	s
Language maintainers	plugged\\vim-snippets\\README.md	/^Language maintainers$/;"	s
LeaderF	plugged\\LeaderF\\README.md	/^LeaderF$/;"	c
LeaderF_Mru	plugged\\LeaderF\\plugin\\leaderf.vim	/^augroup LeaderF_Mru$/;"	a
Leaderf	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -nargs=* -bang -complete=customlist,leaderf#Any#parseArguments Leaderf call leaderf#Any/;"	c
LeaderfBufTag	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfBufTag call leaderf#BufTag#startExpl(g:Lf_WindowPosition, <b/;"	c
LeaderfBufTagAll	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfBufTagAll call leaderf#BufTag#startExpl(g:Lf_WindowPosition,/;"	c
LeaderfBufTagAllCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfBufTagAllCword call leaderf#BufTag#startExplPattern(g:Lf_Win/;"	c
LeaderfBufTagAllPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 -bang LeaderfBufTagAllPattern call leaderf#BufTag#startExplPattern(g:Lf_W/;"	c
LeaderfBufTagCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfBufTagCword call leaderf#BufTag#startExplPattern(g:Lf_Window/;"	c
LeaderfBufTagPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 -bang LeaderfBufTagPattern call leaderf#BufTag#startExplPattern(g:Lf_Wind/;"	c
LeaderfBuffer	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfBuffer call leaderf#Buffer#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfBufferAll	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfBufferAll call leaderf#Buffer#startExpl(g:Lf_WindowPosition, 1)$/;"	c
LeaderfBufferCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfBufferCword call leaderf#Buffer#startExplPattern(g:Lf_WindowPositi/;"	c
LeaderfBufferPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfBufferPattern call leaderf#Buffer#startExplPattern(g:Lf_WindowPosi/;"	c
LeaderfColorscheme	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfColorscheme call leaderf#Colors#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfFile	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=? -complete=dir LeaderfFile call leaderf#File#startExpl(g:Lf_WindowPosition/;"	c
LeaderfFileCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfFileCword call leaderf#File#startExplPattern(g:Lf_WindowPosition, /;"	c
LeaderfFileFullScreen	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=? -complete=dir LeaderfFileFullScreen call leaderf#File#startExpl('fullScre/;"	c
LeaderfFilePattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfFilePattern call leaderf#File#startExplPattern(g:Lf_WindowPosition/;"	c
LeaderfFunction	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfFunction call leaderf#Function#startExpl(g:Lf_WindowPosition/;"	c
LeaderfFunctionAll	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfFunctionAll call leaderf#Function#startExpl(g:Lf_WindowPosit/;"	c
LeaderfFunctionAllCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfFunctionAllCword call leaderf#Function#startExplPattern(g:Lf/;"	c
LeaderfFunctionAllPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 -bang LeaderfFunctionAllPattern call leaderf#Function#startExplPattern(g:/;"	c
LeaderfFunctionCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 -bang LeaderfFunctionCword call leaderf#Function#startExplPattern(g:Lf_Wi/;"	c
LeaderfFunctionPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 -bang LeaderfFunctionPattern call leaderf#Function#startExplPattern(g:Lf_/;"	c
LeaderfHelp	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfHelp call leaderf#Help#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfHelpCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfHelpCword call leaderf#Help#startExplPattern(g:Lf_WindowPosition, /;"	c
LeaderfHelpPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfHelpPattern call leaderf#Help#startExplPattern(g:Lf_WindowPosition/;"	c
LeaderfHistoryCmd	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfHistoryCmd call leaderf#History#startExpl(g:Lf_WindowPosition, "cm/;"	c
LeaderfHistorySearch	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfHistorySearch call leaderf#History#startExpl(g:Lf_WindowPosition, /;"	c
LeaderfLine	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfLine call leaderf#Line#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfLineAll	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfLineAll call leaderf#Line#startExpl(g:Lf_WindowPosition, 1)$/;"	c
LeaderfLineAllCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfLineAllCword call leaderf#Line#startExplPattern(g:Lf_WindowPositio/;"	c
LeaderfLineAllPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfLineAllPattern call leaderf#Line#startExplPattern(g:Lf_WindowPosit/;"	c
LeaderfLineCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfLineCword call leaderf#Line#startExplPattern(g:Lf_WindowPosition, /;"	c
LeaderfLinePattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfLinePattern call leaderf#Line#startExplPattern(g:Lf_WindowPosition/;"	c
LeaderfMru	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfMru call leaderf#Mru#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfMruCwd	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfMruCwd call leaderf#Mru#startExpl(g:Lf_WindowPosition, 1)$/;"	c
LeaderfMruCwdCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfMruCwdCword call leaderf#Mru#startExplPattern(g:Lf_WindowPosition,/;"	c
LeaderfMruCwdPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfMruCwdPattern call leaderf#Mru#startExplPattern(g:Lf_WindowPositio/;"	c
LeaderfMruCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfMruCword call leaderf#Mru#startExplPattern(g:Lf_WindowPosition, 0,/;"	c
LeaderfMruPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfMruPattern call leaderf#Mru#startExplPattern(g:Lf_WindowPosition, /;"	c
LeaderfSelf	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfSelf call leaderf#Self#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfTabBuffer	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfTabBuffer call leaderf#Buffer#startExpl(g:Lf_WindowPosition, 2)$/;"	c
LeaderfTabBufferAll	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfTabBufferAll call leaderf#Buffer#startExpl(g:Lf_WindowPosition, 3)$/;"	c
LeaderfTag	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfTag call leaderf#Tag#startExpl(g:Lf_WindowPosition)$/;"	c
LeaderfTagCword	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=0 LeaderfTagCword call leaderf#Tag#startExplPattern(g:Lf_WindowPosition, ex/;"	c
LeaderfTagPattern	plugged\\LeaderF\\plugin\\leaderf.vim	/^command! -bar -nargs=1 LeaderfTagPattern call leaderf#Tag#startExplPattern(g:Lf_WindowPosition, /;"	c
LeaveTrailingWhitespace	plugged\\ultisnips\\test\\test_Chars.py	/^class LeaveTrailingWhitespace(_VimTest):$/;"	c
Len	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (s *SortItems) Len() int {$/;"	f	unknown:main.SortItems
Less	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (s *SortByNoiseAndText) Less(i, j int) bool {$/;"	f	unknown:main.SortByNoiseAndText
Less	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (s *SortByText) Less(i, j int) bool {$/;"	f	unknown:main.SortByText
Level1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level1.php	/^class Level1 extends Level2 {$/;"	c	namespace:NS1\\SubNS2
Level2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level1.php	/^use NS2\\SubNS\\Level2;$/;"	a	namespace:NS1\\SubNS2	typeref:unknown:NS2\\SubNS\\Level2
Level2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level2.php	/^class Level2 extends Level3 {$/;"	c	namespace:NS2\\SubNS
Level3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level2.php	/^use NS3\\SubNS\\Level3;$/;"	a	namespace:NS2\\SubNS	typeref:unknown:NS3\\SubNS\\Level3
Level3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^class Level3 {$/;"	c	namespace:NS3\\SubNS
Level31	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^use NS31\\SubNS\\Level31;$/;"	a	namespace:NS3\\SubNS	typeref:unknown:NS31\\SubNS\\Level31
Level31	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level31.php	/^class Level31 {$/;"	c	namespace:NS31\\SubNS
LfCli	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^class LfCli(object):$/;"	c
LfInstance	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^class LfInstance(object):$/;"	c
LfNoErrMsgCmd	plugged\\LeaderF\\plugin\\leaderf.vim	/^function! g:LfNoErrMsgCmd(cmd)$/;"	f
LfNoErrMsgMatch	plugged\\LeaderF\\plugin\\leaderf.vim	/^function! g:LfNoErrMsgMatch(expr, pat)$/;"	f
LfRegisterSelf	plugged\\LeaderF\\plugin\\leaderf.vim	/^function! g:LfRegisterSelf(cmd, description)$/;"	f
License	plugged\\LeaderF\\README.md	/^License$/;"	s
License	plugged\\html5.vim\\README.md	/^## License$/;"	s
License	plugged\\tagbar\\README.md	/^## License$/;"	s
License	plugged\\vim-editorconfig\\README.md	/^License$/;"	s
License	plugged\\vim-gitbranch\\README.md	/^## License$/;"	s
License	plugged\\vim-javascript\\README.md	/^## License$/;"	s
License	plugged\\vim-scriptease\\README.markdown	/^## License$/;"	s
License	plugged\\vim-snippets\\README.md	/^License$/;"	s
Limit	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Limit      int$/;"	m	struct:main.Context
Line-wise operator/text-object combinations	plugged\\vim-matchup\\README.md	/^### Line-wise operator\/text-object combinations$/;"	S
LineExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^class LineExplManager(Manager):$/;"	c
LineExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^class LineExplorer(Explorer):$/;"	c
LineIterator	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^class LineIterator(object):$/;"	c
ListAllAvailable_BraceInFront_ExpectCorrectResult	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class ListAllAvailable_BraceInFront_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_NonDefined_NoExpectionShouldBeRaised	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class ListAllAvailable_NonDefined_NoExpectionShouldBeRaised(_ListAllSnippets):$/;"	c
ListAllAvailable_NothingTyped_ExpectCorrectResult	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class ListAllAvailable_NothingTyped_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_SpaceInFront_ExpectCorrectResult	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class ListAllAvailable_SpaceInFront_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult($/;"	c
ListAllAvailable_testtyped_ExpectCorrectResult	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class ListAllAvailable_testtyped_ExpectCorrectResult(_ListAllSnippets):$/;"	c
LocalVimRC	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^command! LocalVimRC        call s:LocalVimRC()$/;"	c
LocalVimRCClear	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^command! LocalVimRCClear   call s:LocalVimRCClear()$/;"	c
LocalVimRCDisable	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^command! LocalVimRCDisable call s:LocalVimRCDisable()$/;"	c
LocalVimRCEdit	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^command! LocalVimRCEdit    call s:LocalVimRCEdit()$/;"	c
LocalVimRCEnable	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^command! LocalVimRCEnable  call s:LocalVimRCEnable()$/;"	c
LocalVimRCFinish	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! LocalVimRCFinish()$/;"	f
Localvimrc	plugged\\vim-localvimrc\\README.md	/^# Localvimrc$/;"	c
Lookup man page	plugged\\asyncrun.vim\\README.md	/^#### Lookup man page$/;"	t
Lorem	plugged\\vim-matchup\\test\\issues\\33\\test.rb	/^  class Lorem < Ipsum $/;"	c	module:LoremIpsum
LoremIpsum	plugged\\vim-matchup\\test\\issues\\33\\test.rb	/^module LoremIpsum $/;"	m
LowerRunes	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	LowerRunes []rune$/;"	m	struct:main.Context
LowerRunes	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	LowerRunes []rune$/;"	m	struct:main.FileItem
MAKEFILE_DIR	plugged\\ultisnips\\Makefile	/^MAKEFILE_DIR := $(dir ${MAKEFILE_PATH})$/;"	m
MAKEFILE_PATH	plugged\\ultisnips\\Makefile	/^MAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))$/;"	m
MIN_FLOAT	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^#define MIN_FLOAT /;"	d	file:
MIT License	plugged\\vim-json\\license.md	/^MIT License$/;"	c
MKFILES	plugged\\html5.vim\\Makefile	/^MKFILES=Makefile `ls -1 | grep '.mk$$'`$/;"	m
Mahou	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace.php	/^namespace Mahou;$/;"	n
Mahou	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace2.php	/^<?php namespace Mahou;$/;"	n
Mahou	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace_uppercase.php	/^NAMESPACE Mahou;$/;"	n
Maintainer	plugged\\tagbar\\README.md	/^## Maintainer$/;"	s
Making sure Vim can read your `tags` file	plugged\\phpcomplete.vim\\GUIDE.md	/^### Making sure Vim can read your `tags` file$/;"	S
Manager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^class Manager(object):$/;"	c
Manual	plugged\\asyncrun.vim\\README.md	/^## Manual$/;"	s
Manual Installation	plugged\\vim-jsx\\README.md	/^### Manual Installation$/;"	S
MatchIsTooCheap	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class MatchIsTooCheap(_Base, unittest.TestCase):$/;"	c
Matchit	plugged\\vim-matchup\\README.md	/^### Matchit$/;"	S
Matchparen emulation	plugged\\vim-matchup\\README.md	/^### Matchparen emulation$/;"	S
MatchupClearTimes	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^command! MatchupClearTimes let g:matchup#perf#times = {}$/;"	c
MatchupReload	plugged\\vim-matchup\\autoload\\matchup.vim	/^  command! MatchupReload          call matchup#misc#reload()$/;"	c
MatchupShowTimes	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^command! MatchupShowTimes call matchup#perf#show_times()$/;"	c
Messages	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang Messages :execute scriptease#messages_command(<bang>0)$/;"	c
Minimal vimrc file	plugged\\vim-matchup\\ISSUE_TEMPLATE.md	/^### Minimal vimrc file$/;"	S
Minimal working example	plugged\\vim-matchup\\ISSUE_TEMPLATE.md	/^### Minimal working example$/;"	S
Mirror	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_mirror.py	/^class Mirror(NoneditableTextObject):$/;"	c
MirrorBeforeTabstopLeave_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class MirrorBeforeTabstopLeave_ExpectCorrectResult(_VimTest):$/;"	c
MirrorBeforeTabstopOverwrite_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class MirrorBeforeTabstopOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
MirrorRealLifeExample_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class MirrorRealLifeExample_ExpectCorrectResult(_VimTest):$/;"	c
MirrorToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class MirrorToken(Token):$/;"	c
Mirror_TestKillTabstop_Kill	plugged\\ultisnips\\test\\test_Mirror.py	/^class Mirror_TestKillTabstop_Kill(_VimTest):$/;"	c
Mirror_TestKill_InsertAfter_NoKill	plugged\\ultisnips\\test\\test_Mirror.py	/^class Mirror_TestKill_InsertAfter_NoKill(_VimTest):$/;"	c
Mirror_TestKill_InsertBefore_NoKill	plugged\\ultisnips\\test\\test_Mirror.py	/^class Mirror_TestKill_InsertBefore_NoKill(_VimTest):$/;"	c
Mirror_TestKill_InsertBeginning_Kill	plugged\\ultisnips\\test\\test_Mirror.py	/^class Mirror_TestKill_InsertBeginning_Kill(_VimTest):$/;"	c
Mirror_TestKill_InsertEnd_Kill	plugged\\ultisnips\\test\\test_Mirror.py	/^class Mirror_TestKill_InsertEnd_Kill(_VimTest):$/;"	c
Model	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops.php	/^class Model {$/;"	c
Model	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops_extra_whitespace.php	/^class Model {$/;"	c
Module matchparen	plugged\\vim-matchup\\README.md	/^### Module matchparen$/;"	S
Module motion	plugged\\vim-matchup\\README.md	/^### Module motion$/;"	S
Module text_obj	plugged\\vim-matchup\\README.md	/^### Module text_obj$/;"	S
Module transmute	plugged\\vim-matchup\\README.md	/^### Module transmute$/;"	S
More	plugged\\asyncrun.vim\\README.md	/^## More$/;"	s
MovePosition_DelSameLine	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class MovePosition_DelSameLine(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSameLine1	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class MovePosition_DelSameLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSecondLine	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class MovePosition_DelSecondLine(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSecondLine1	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class MovePosition_DelSecondLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_InsSameLine1	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class MovePosition_InsSameLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_InsSameLine2	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class MovePosition_InsSameLine2(_MPBase, unittest.TestCase):$/;"	c
Mru	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^class Mru(object):$/;"	c
MruExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^class MruExplManager(Manager):$/;"	c
MruExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^class MruExplorer(Explorer):$/;"	c
MultiLine	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class MultiLine(_Base, unittest.TestCase):$/;"	c
MultiLineDefault_BS	plugged\\ultisnips\\test\\test_Chars.py	/^class MultiLineDefault_BS(_MultiLineDefault):$/;"	c
MultiLineDefault_Jump	plugged\\ultisnips\\test\\test_Chars.py	/^class MultiLineDefault_Jump(_MultiLineDefault):$/;"	c
MultiLineDefault_Type	plugged\\ultisnips\\test\\test_Chars.py	/^class MultiLineDefault_Type(_MultiLineDefault):$/;"	c
MultiWordSnippet_Simple	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWordSnippet_Simple(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix($/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand($/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand($/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose($/;"	c
MultilineExpandTestTyping_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class MultilineExpandTestTyping_ExpectCorrectResult(_VimTest):$/;"	c
MultilineExpand_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class MultilineExpand_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult(_VimTest):$/;"	c
Multiple_ManySnippetsOneTrigger_ECR	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class Multiple_ManySnippetsOneTrigger_ECR(_VimTest):$/;"	c
Multiple_SimpleCaseEscapeOut_ECR	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class Multiple_SimpleCaseEscapeOut_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectFirst_ECR	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectFirst_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectSecond_ECR	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectSecond_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectTooHigh_ESelectLast	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectTooHigh_ESelectLast(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectZero_EEscape	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectZero_EEscape(_MultipleMatches):$/;"	c
MultiplyDeBruijnBitPosition	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static uint8_t MultiplyDeBruijnBitPosition[64] =$/;"	v	typeref:typename:uint8_t[64]	file:
MyDiff	backup\\_vimrc	/^function! MyDiff()$/;"	f
NAME	plugged\\html5.vim\\Makefile	/^NAME=`basename \\`pwd\\``$/;"	m
NERDTree	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeAddKeyMap	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeClose	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	plugged\\nerdtree\\nerdtree_plugin\\exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	plugged\\nerdtree\\nerdtree_plugin\\exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeFind	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeToggle	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NEVER	plugged\\vim-snippets\\pythonx\\javascript_snippets.py	/^NEVER = 'never'$/;"	v
NOT a string	plugged\\vim-json\\json-test.json	/^    "NOT a string": 500,$/;"	n
NOT a string	plugged\\vim-json\\json-test.json	/^    "NOT a string": true$/;"	b
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\namespaced.foo.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_constants.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\import\\ns1_foo2.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\ns1_foo2.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_classname\\ns1_foo.class.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\traits.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^namespace NS1;$/;"	n
NS1	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^namespace NS1;$/;"	n
NS1\\SUBNS	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_constants.php	/^namespace NS1\\SUBNS;$/;"	n
NS1\\SUBNS	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^namespace NS1\\SUBNS;$/;"	n
NS1\\SUBNS	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^namespace NS1\\SUBNS;$/;"	n
NS1\\SUBNS\\SUBSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^namespace NS1\\SUBNS\\SUBSUB;$/;"	n
NS1\\SUBNS\\SUBSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^namespace NS1\\SUBNS\\SUBSUB;$/;"	n
NS1\\SUBNS\\SUBSUBNS	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_constants.php	/^namespace NS1\\SUBNS\\SUBSUBNS;$/;"	n
NS1\\SubNS	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\subnamespace.php	/^namespace NS1\\SubNS;$/;"	n
NS1\\SubNS2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level1.php	/^namespace NS1\\SubNS2;$/;"	n
NS2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\import\\ns2_foo.php	/^namespace NS2;$/;"	n
NS2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\ns2_foo.php	/^namespace NS2;$/;"	n
NS2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo2.php	/^namespace NS2;$/;"	n
NS2\\SubNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level2.php	/^namespace NS2\\SubNS;$/;"	n
NS31\\SubNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level31.php	/^namespace NS31\/SubNS;$/;"	n
NS3\\SubNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^namespace NS3\\SubNS;$/;"	n
Name	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Name       string$/;"	m	struct:main.FileItem
NameSpacedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\namespaced.foo.php	/^class NameSpacedFoo {$/;"	c	namespace:NS1
NameSpacedFooInterface	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\namespaced.foo.php	/^interface NameSpacedFooInterface {$/;"	i	namespace:NS1
NamespacedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\import\\ns1_foo2.php	/^use NS2\\NamespacedFoo as NamespacedFoo;$/;"	a	namespace:NS1	typeref:unknown:NS2\\NamespacedFoo
NamespacedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\import\\ns2_foo.php	/^class NamespacedFoo {}$/;"	c	namespace:NS2
NamespacedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\ns2_foo.php	/^class NamespacedFoo {}$/;"	c	namespace:NS2
NamespacedFoo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\import\\ns1_foo2.php	/^class NamespacedFoo2 extends NamespacedFoo {}$/;"	c	namespace:NS1
NamespacedFoo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\ns1_foo2.php	/^class NamespacedFoo2 extends \\NS2\\NamespacedFoo {}$/;"	c	namespace:NS1
NeoBundle (https://github.com/Shougo/neobundle.vim)	plugged\\ctrlp-py-matcher\\README.md	/^### NeoBundle (https:\/\/github.com\/Shougo\/neobundle.vim)$/;"	S
NeoVim on Unix	plugged\\ale\\README.md	/^#### NeoVim on Unix$/;"	t
New Line Rules	plugged\\lexima.vim\\README.md	/^### New Line Rules$/;"	S
News	plugged\\asyncrun.vim\\README.md	/^## News$/;"	s
NextTrailingWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! -range=% NextTrailingWhitespace call <SID>GotoTrailingWhitespace(0, <line1>, <line2>)$/;"	c
NoMatchParen	plugged\\vim-matchup\\plugin\\matchup.vim	/^command! NoMatchParen call matchup#matchparen#toggle(0)$/;"	c
NoUmlautsBeforeTriggerAndCharsAfter	plugged\\ultisnips\\test\\test_Chars.py	/^class NoUmlautsBeforeTriggerAndCharsAfter(_UmlautsBase):$/;"	c
No_Tab_Expand_ET	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_ET(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_Leading_Spaces	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_ET_Leading_Spaces(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_SW	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_ET_SW(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_SW_TS	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_ET_SW_TS(_No_Tab_Expand):$/;"	c
No_Tab_Expand_Leading_Spaces	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_Leading_Spaces(_No_Tab_Expand):$/;"	c
No_Tab_Expand_Leading_Tabs	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_Leading_Tabs(_No_Tab_Expand):$/;"	c
No_Tab_Expand_No_TS	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_No_TS(_No_Tab_Expand):$/;"	c
No_Tab_Expand_RealWorld	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_RealWorld(_TabExpand_RealWorld, _VimTest):$/;"	c
No_Tab_Expand_Simple	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class No_Tab_Expand_Simple(_No_Tab_Expand):$/;"	c
Noise	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Noise      int$/;"	m	struct:main.FileItem
NonUnicodeDataInUnnamedRegister	plugged\\ultisnips\\test\\test_Fixes.py	/^class NonUnicodeDataInUnnamedRegister(_VimTest):$/;"	c
NoneditableTextObject	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^class NoneditableTextObject(TextObject):$/;"	c
Note: If the file structure display is wrong	plugged\\tagbar\\README.md	/^## Note: If the file structure display is wrong$/;"	s
O	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> O <NOP>$/;"	m
OldSelection_RealWorldCase_Test	plugged\\ultisnips\\test\\test_Selection.py	/^class OldSelection_RealWorldCase_Test(_OS_Base):$/;"	c
OldSelection_SimpleTabstop_Test	plugged\\ultisnips\\test\\test_Selection.py	/^class OldSelection_SimpleTabstop_Test(_OS_Base):$/;"	c
OnReady	plugged\\ale\\autoload\\ale\\completion.vim	/^    function! OnReady(...) abort closure$/;"	f
OnReady	plugged\\ale\\autoload\\ale\\definition.vim	/^    function! OnReady(...) abort closure$/;"	f
OnReady	plugged\\ale\\autoload\\ale\\hover.vim	/^    function! OnReady(...) abort closure$/;"	f
OnReady	plugged\\ale\\autoload\\ale\\references.vim	/^    function! OnReady(...) abort closure$/;"	f
Once CtrlP is open:	plugged\\ctrlp.vim\\readme.md	/^##### Once CtrlP is open:$/;"	T
OpenBookmark	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
Optional: concerning jsx.	plugged\\vim-javascript\\ISSUE_TEMPLATE.md	/^#### Optional: concerning jsx.$/;"	t
OptionalAction	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^class OptionalAction(argparse.Action):$/;"	c
Options	plugged\\phpcomplete.vim\\README.md	/^## Options$/;"	s
Options	plugged\\vim-closetag\\README.md	/^#### Options$/;"	t
Options	plugged\\vim-editorconfig\\README.md	/^Options$/;"	s
Options	plugged\\vim-matchup\\README.md	/^## Options$/;"	s
Origins	plugged\\vim-matchup\\README.md	/^### Origins$/;"	S
Other inspirations	plugged\\vim-matchup\\README.md	/^### Other inspirations$/;"	S
Other recommended software	plugged\\vim-json\\readme.md	/^Other recommended software$/;"	s
Overriding highlighting	plugged\\php.vim\\README.md	/^### Overriding highlighting$/;"	S
Overview	plugged\\supertab\\README.rst	/^Overview$/;"	c
Overview	plugged\\vim-matchup\\README.md	/^## Overview$/;"	s
P	_vimrc	/^xnoremap P "_d:set paste<CR>P:set nopaste<CR>$/;"	m
P	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^use Foo\\Page as P;$/;"	a	namespace:Foo	typeref:unknown:Foo\\Page
PP	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bang -range=-1 -nargs=? -complete=expression PP$/;"	c
PPmsg	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bang -range=0      -nargs=? -complete=expression PPmsg$/;"	c
PWD	plugged\\html5.vim\\Makefile	/^PWD=`pwd`$/;"	m
PYTHON3	plugged\\ultisnips\\test\\constant.py	/^PYTHON3 = sys.version_info >= (3, 0)$/;"	v
PYTHON3	plugged\\ultisnips\\test\\test_Plugin.py	/^PYTHON3 = sys.version_info >= (3, 0)$/;"	v
Page	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^class Page {$/;"	c	namespace:Foo
Page	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced_imported.php	/^use Foo\\Page;$/;"	a	typeref:unknown:Foo\\Page
ParseSnippets_ClearAll	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_ClearAll(_VimTest):$/;"	c
ParseSnippets_ClearOne	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_ClearOne(_VimTest):$/;"	c
ParseSnippets_ClearTwo	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_ClearTwo(_VimTest):$/;"	c
ParseSnippets_ExtendsWithoutFiletype	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_ExtendsWithoutFiletype(_VimTest):$/;"	c
ParseSnippets_Global_Local_Python	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_Global_Local_Python(_VimTest):$/;"	c
ParseSnippets_Global_Python	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_Global_Python(_VimTest):$/;"	c
ParseSnippets_InvalidPriorityLine	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_InvalidPriorityLine(_VimTest):$/;"	c
ParseSnippets_InvalidPriorityLine1	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_InvalidPriorityLine1(_VimTest):$/;"	c
ParseSnippets_MissingEndSnippet	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MissingEndSnippet(_VimTest):$/;"	c
ParseSnippets_MultiWord_Description	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Description(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_Description_Option	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Description_Option(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_NoContainer	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_NoContainer(_VimTest):$/;"	c
ParseSnippets_MultiWord_Quotes	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Quotes(_VimTest):$/;"	c
ParseSnippets_MultiWord_RE1	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE1(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_RE2	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE2(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_RE3	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE3(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_Simple	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Simple(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_UnmatchedContainer	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_UnmatchedContainer(_VimTest):$/;"	c
ParseSnippets_MultiWord_WithQuotes	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_MultiWord_WithQuotes(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippet	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippet(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetContext	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetContext(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetLocation	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetLocation(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetPostAction	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetPostAction(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetPreAction	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetPreAction(_VimTest):$/;"	c
ParseSnippets_PrintPythonStacktrace	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintPythonStacktrace(_VimTest):$/;"	c
ParseSnippets_PrintPythonStacktraceMultiline	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_PrintPythonStacktraceMultiline(_VimTest):$/;"	c
ParseSnippets_SimpleSnippet	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_SimpleSnippet(_VimTest):$/;"	c
ParseSnippets_UnknownDirective	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class ParseSnippets_UnknownDirective(_VimTest):$/;"	c
Pathogen	plugged\\phpcomplete.vim\\README.md	/^### Pathogen$/;"	S
Pathogen	plugged\\vim-jsx\\README.md	/^### Pathogen$/;"	S
Pathogen (https://github.com/tpope/vim-pathogen)	plugged\\ctrlp-py-matcher\\README.md	/^### Pathogen (https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S
Pattern	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Pattern    string$/;"	m	struct:main.FileItem
PatternContext	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^typedef struct PatternContext$/;"	s	file:
PatternContext	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^}PatternContext;$/;"	t	typeref:struct:PatternContext	file:
Performance	plugged\\LeaderF\\README.md	/^Performance$/;"	s
PerlSyntaxFold	plugged\\ultisnips\\test\\test_Folding.py	/^class PerlSyntaxFold(_VimTest):$/;"	c
Plug	autoload\\plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload\\plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload\\plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload\\plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload\\plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload\\plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload\\plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload\\plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload\\plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Plugin_SuperTab_SimpleTest	plugged\\ultisnips\\test\\test_Plugin.py	/^class Plugin_SuperTab_SimpleTest(_VimTest):$/;"	c
Policies / for contributors	plugged\\vim-snippets\\README.md	/^Policies \/ for contributors$/;"	s
Position	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^class Position(object):$/;"	c
Possible Fix	plugged\\nerdtree\\.github\\ISSUE_TEMPLATE.md	/^### Possible Fix$/;"	S
Preface	plugged\\asyncrun.vim\\README.md	/^## Preface$/;"	s
PrepareContent	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func PrepareContent() ([]string, []string, string, []string) {$/;"	f	package:main
PrevTrailingWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! -range=% PrevTrailingWhitespace call <SID>GotoTrailingWhitespace(1, <line1>, <line2>)$/;"	c
Process	plugged\\nerdtree\\.github\\ISSUE_TEMPLATE.md	/^### Process$/;"	S
Project Root	plugged\\asyncrun.vim\\README.md	/^#### Project Root$/;"	t
Projects of interest	plugged\\php.vim\\README.md	/^### Projects of interest$/;"	S
Promotion	plugged\\vim-better-whitespace\\README.md	/^## Promotion$/;"	s
ProperIndenting_AutoIndentAndNewline_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class ProperIndenting_AutoIndentAndNewline_ECR(_VimTest):$/;"	c
ProperIndenting_FirstLineInFileComplete_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class ProperIndenting_FirstLineInFileComplete_ECR($/;"	c
ProperIndenting_FirstLineInFile_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class ProperIndenting_FirstLineInFile_ECR(_VimTest):$/;"	c
ProperIndenting_SimpleCase_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class ProperIndenting_SimpleCase_ECR(_VimTest):$/;"	c
ProperIndenting_SingleLineNoReindenting_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class ProperIndenting_SingleLineNoReindenting_ECR(_VimTest):$/;"	c
PyInit_fuzzyMatchC	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^PyMODINIT_FUNC PyInit_fuzzyMatchC(void)$/;"	f	typeref:typename:PyMODINIT_FUNC
PythonCode	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^class PythonCode(NoneditableTextObject):$/;"	c
PythonCodeOld_IndentedMultiline	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCodeOld_IndentedMultiline(_VimTest):$/;"	c
PythonCodeOld_ReferencePlaceholderAfter	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCodeOld_ReferencePlaceholderAfter(_VimTest):$/;"	c
PythonCodeOld_ReferencePlaceholderBefore	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCodeOld_ReferencePlaceholderBefore(_VimTest):$/;"	c
PythonCodeOld_SimpleExample	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCodeOld_SimpleExample(_VimTest):$/;"	c
PythonCodeOld_TransformedBeforeMultiLine	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCodeOld_TransformedBeforeMultiLine(_VimTest):$/;"	c
PythonCodeToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class PythonCodeToken(Token):$/;"	c
PythonCode_AccessKilledTabstop_OverwriteFirst	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_AccessKilledTabstop_OverwriteFirst(_VimTest):$/;"	c
PythonCode_AccessKilledTabstop_OverwriteSecond	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_AccessKilledTabstop_OverwriteSecond(_VimTest):$/;"	c
PythonCode_CanOverwriteTabstop	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_CanOverwriteTabstop(_VimTest):$/;"	c
PythonCode_IndentEtSw	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_IndentEtSw(_VimTest):$/;"	c
PythonCode_IndentEtSwOffset	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_IndentEtSwOffset(_VimTest):$/;"	c
PythonCode_IndentNoetSwTs	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_IndentNoetSwTs(_VimTest):$/;"	c
PythonCode_IndentProblem	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_IndentProblem(_VimTest):$/;"	c
PythonCode_Locals	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_Locals(_VimTest):$/;"	c
PythonCode_LongerTextThanSource_Chars	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_LongerTextThanSource_Chars(_VimTest):$/;"	c
PythonCode_LongerTextThanSource_MultiLine	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_LongerTextThanSource_MultiLine(_VimTest):$/;"	c
PythonCode_MultiAppend	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_MultiAppend(_VimTest):$/;"	c
PythonCode_MultiAppendShift	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_MultiAppendShift(_VimTest):$/;"	c
PythonCode_MultiAppendShiftMethods	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_MultiAppendShiftMethods(_VimTest):$/;"	c
PythonCode_MultiAppendSimpleIndent	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_MultiAppendSimpleIndent(_VimTest):$/;"	c
PythonCode_MultilineIndented	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_MultilineIndented(_VimTest):$/;"	c
PythonCode_OptExists	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_OptExists(_VimTest):$/;"	c
PythonCode_OptNoExists	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_OptNoExists(_VimTest):$/;"	c
PythonCode_ReferencePlaceholder	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_ReferencePlaceholder(_VimTest):$/;"	c
PythonCode_ReferencePlaceholderBefore	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_ReferencePlaceholderBefore(_VimTest):$/;"	c
PythonCode_ResetIndent	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_ResetIndent(_VimTest):$/;"	c
PythonCode_SimpleAppend	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_SimpleAppend(_VimTest):$/;"	c
PythonCode_SimpleExample	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_SimpleExample(_VimTest):$/;"	c
PythonCode_SimpleExample_ReturnValueIsEmptyString	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_SimpleExample_ReturnValueIsEmptyString(_VimTest):$/;"	c
PythonCode_SimpleMkline	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_SimpleMkline(_VimTest):$/;"	c
PythonCode_TransformedBeforeMultiLine	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_TransformedBeforeMultiLine(_VimTest):$/;"	c
PythonCode_TrickyReferences	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_TrickyReferences(_VimTest):$/;"	c
PythonCode_UseNewOverOld	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonCode_UseNewOverOld(_VimTest):$/;"	c
PythonVisual_HasAccessToSelectedPlaceholders	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonVisual_HasAccessToSelectedPlaceholders(_VimTest):$/;"	c
PythonVisual_HasAccessToZeroPlaceholders	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonVisual_HasAccessToZeroPlaceholders(_VimTest):$/;"	c
PythonVisual_LineSelect_Simple	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonVisual_LineSelect_Simple(_VimTest):$/;"	c
PythonVisual_NoVisualSelection_Ignore	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonVisual_NoVisualSelection_Ignore(_VimTest):$/;"	c
PythonVisual_SelectOneWord	plugged\\ultisnips\\test\\test_Interpolation.py	/^class PythonVisual_SelectOneWord(_VimTest):$/;"	c
Python_WeirdScoping_Error	plugged\\ultisnips\\test\\test_Interpolation.py	/^class Python_WeirdScoping_Error(_VimTest):$/;"	c
Query	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Query      string$/;"	m	struct:main.Context
Queue	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    import queue as Queue$/;"	I
Quick Start	plugged\\ultisnips\\README.md	/^Quick Start$/;"	s
Quickfix window	plugged\\asyncrun.vim\\README.md	/^#### Quickfix window$/;"	t
QuickfixStatus	_vimrc	/^augroup QuickfixStatus$/;"	a
Quickstart	plugged\\tagbar\\README.md	/^## Quickstart$/;"	s
R	autoload\\plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
RCFI	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use RecursiveCallbackFilterIterator as RCFI; \/\/ lookup from the last line should not find this$/;"	a	namespace:DontFindMe	typeref:unknown:RecursiveCallbackFilterIterator
README.md	plugged\\vim-matchup\\.projections.json	/^  "README.md": {"type": "readme"},$/;"	o
README_FILES	plugged\\html5.vim\\Makefile	/^README_FILES=`ls -1 | grep -i readme`$/;"	m
RECORD_FILE	plugged\\html5.vim\\Makefile	/^RECORD_FILE=.record$/;"	m
RECORD_SCRIPT	plugged\\html5.vim\\Makefile	/^RECORD_SCRIPT=.mkrecord$/;"	m
Range support	plugged\\asyncrun.vim\\README.md	/^#### Range support$/;"	t
ReadBookmarks	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
RecTabStopsWithExpandtab_SimpleExample_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class RecTabStopsWithExpandtab_SimpleExample_ECR(_ExpandTabs):$/;"	c
RecTabStopsWithExpandtab_SpecialIndentProblem_ECR	plugged\\ultisnips\\test\\test_Format.py	/^class RecTabStopsWithExpandtab_SpecialIndentProblem_ECR(_ExpandTabs):$/;"	c
RecTabStops_BarelyNotLeavingInner_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_BarelyNotLeavingInner_ECR(_VimTest):$/;"	c
RecTabStops_ChildTriggerContainsParentTextObjects	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_ChildTriggerContainsParentTextObjects(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTSSecondTime_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_ExpandedInZeroTSSecondTime_ECR(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTSTwice_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_ExpandedInZeroTSTwice_ECR(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTS_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_ExpandedInZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineInTabstop_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineInTabstop_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_InNewlineManualIndentTextInFront_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineManualIndentTextInFront_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineManualIndent_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineManualIndent_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultilineWithIndent_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineMultilineWithIndent_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultilineWithNonZeroTS_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineMultilineWithNonZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultiline_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InNewlineMultiline_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStopTwiceDirectly_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InnerWOTabStopTwiceDirectly_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStopTwice_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InnerWOTabStopTwice_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStop_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_InnerWOTabStop_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInnerInnerTwo_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_LeavingInnerInnerTwo_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInnerInner_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_LeavingInnerInner_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInner_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_LeavingInner_ECR(_VimTest):$/;"	c
RecTabStops_MirrorInnerSnippet_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_MirrorInnerSnippet_ECR(_VimTest):$/;"	c
RecTabStops_MirroredZeroTS_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_MirroredZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_OuterOnlyWithZeroTS_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_OuterOnlyWithZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_OuterOnlyWithZero_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_OuterOnlyWithZero_ECR(_VimTest):$/;"	c
RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_SimpleCase_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_SimpleCase_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_ZeroTSisNothingSpecial_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabStops_ZeroTSisNothingSpecial_ECR(_VimTest):$/;"	c
RecTabsStops_BackspaceZero_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabsStops_BackspaceZero_ECR(_VimTest):$/;"	c
RecTabsStops_TypeInZero2_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabsStops_TypeInZero2_ECR(_VimTest):$/;"	c
RecTabsStops_TypeInZero_ECR	plugged\\ultisnips\\test\\test_Recursive.py	/^class RecTabsStops_TypeInZero_ECR(_VimTest):$/;"	c
References	plugged\\html5.vim\\README.md	/^## References$/;"	s
Related repositories	plugged\\vim-snippets\\README.md	/^Related repositories$/;"	s
ReloadTabs	plugin\\tabs.vim	/^	function! ReloadTabs()$/;"	f
RemoveTrailingWhitespace	plugged\\ultisnips\\test\\test_Chars.py	/^class RemoveTrailingWhitespace(_VimTest):$/;"	c
RenamedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^use Foo as RenamedFoo;$/;"	a	namespace:Foo	typeref:unknown:Foo
RenamedFoo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^use NS2\\Foo2 as RenamedFoo2;$/;"	a	namespace:NS1	typeref:unknown:NS2\\Foo2
Reporting problems	plugged\\vim-matchup\\README.md	/^### Reporting problems$/;"	S
Reproducing Bugs	plugged\\ultisnips\\CONTRIBUTING.md	/^# Reproducing Bugs$/;"	c
Reproducing the bug	plugged\\ale\\.github\\ISSUE_TEMPLATE\\report-a-bug.md	/^## Reproducing the bug$/;"	s
Requirements	plugged\\LeaderF\\README.md	/^Requirements$/;"	s
Requirements:	plugged\\asyncrun.vim\\README.md	/^#### Requirements:$/;"	t
RetainsTheUnnamedRegister	plugged\\ultisnips\\test\\test_Fixes.py	/^class RetainsTheUnnamedRegister(_VimTest):$/;"	c
RetainsTheUnnamedRegister_ButOnlyOnce	plugged\\ultisnips\\test\\test_Fixes.py	/^class RetainsTheUnnamedRegister_ButOnlyOnce(_VimTest):$/;"	c
RevealBookmark	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Rg	_vimrc	/^	command! -nargs=* Rg :silent grep! <args> | cw$/;"	c
Run a python script	plugged\\asyncrun.vim\\README.md	/^#### Run a python script$/;"	t
Run these commands in the "Git for Windows" Bash terminal	plugged\\ale\\README.md	/^# Run these commands in the "Git for Windows" Bash terminal$/;"	c
Runes	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Runes      []rune$/;"	m	struct:main.FileItem
Running the test suite.	plugged\\ultisnips\\CONTRIBUTING.md	/^### Running the test suite.$/;"	S
Running the tests	plugged\\phpcomplete.vim\\tests\\README.md	/^## Running the tests$/;"	s
Running using docker.	plugged\\ultisnips\\CONTRIBUTING.md	/^#### Running using docker.$/;"	t
Runtime	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bang -bar -range=-1 -nargs=* -complete=customlist,scriptease#complete Runtime$/;"	c
S	autoload\\plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
SEQUENCES	plugged\\ultisnips\\test\\constant.py	/^SEQUENCES = [ARR_L, ARR_R, ARR_U, ARR_D]$/;"	v
SHELL	plugged\\html5.vim\\Makefile	/^SHELL=bash$/;"	m
SHELL	plugged\\supertab\\Makefile	/^SHELL=\/bin\/bash$/;"	m
SNIPMATE_SNIPPET_PRIORITY	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\snipmate.py	/^    SNIPMATE_SNIPPET_PRIORITY = -1000$/;"	v	class:SnipMateSnippetDefinition
SOME_CONTENT	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo.interface.php	/^    const SOME_CONTENT = 'bar';$/;"	d	interface:FooInterface
SQLHotFix	plugged\\vim-matchup\\test\\issues\\3\\hotfix.vim	/^function! SQLHotFix()$/;"	f
SUBNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\imports.php	/^use NS1\\SUBNS; \/\/ importing namespaces, the name will be the segment after the last \\$/;"	a	namespace:Foo	typeref:unknown:NS1\\SUBNS
Screen Shots	plugged\\lexima.vim\\README.md	/^Screen Shots$/;"	s
Screencasts	plugged\\ultisnips\\README.md	/^Screencasts$/;"	s
Screenshot	plugged\\vim-matchup\\README.md	/^## Screenshot$/;"	s
Screenshot(s)	plugged\\nerdtree\\.github\\ISSUE_TEMPLATE.md	/^### Screenshot(s)$/;"	S
Screenshots	plugged\\LeaderF\\README.md	/^Screenshots$/;"	s
Screenshots	plugged\\tagbar\\README.md	/^## Screenshots$/;"	s
Screenshots	plugged\\vim-better-whitespace\\README.md	/^## Screenshots$/;"	s
Screenshots	plugged\\vim-json\\readme.md	/^Screenshots$/;"	s
Scriptnames	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -count=0 Scriptnames$/;"	c
Search Timing	plugged\\vim-ctrlspace\\README.md	/^#### Search Timing$/;"	t
SelectModeMappings_BufferLocalMappings_ECR	plugged\\ultisnips\\test\\test_Selection.py	/^class SelectModeMappings_BufferLocalMappings_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_DisableRemoveBeforeSelecting_ECR	plugged\\ultisnips\\test\\test_Selection.py	/^class SelectModeMappings_DisableRemoveBeforeSelecting_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings1_ECR	plugged\\ultisnips\\test\\test_Selection.py	/^class SelectModeMappings_IgnoreMappings1_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings2_ECR	plugged\\ultisnips\\test\\test_Selection.py	/^class SelectModeMappings_IgnoreMappings2_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings_ECR	plugged\\ultisnips\\test\\test_Selection.py	/^class SelectModeMappings_IgnoreMappings_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_RemoveBeforeSelecting_ECR	plugged\\ultisnips\\test\\test_Selection.py	/^class SelectModeMappings_RemoveBeforeSelecting_ECR(_SelectModeMappings):$/;"	c
Self-Promotion	plugged\\vim-scriptease\\README.markdown	/^## Self-Promotion$/;"	s
SelfExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^class SelfExplManager(Manager):$/;"	c
SelfExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^class SelfExplorer(Explorer):$/;"	c
SetUp	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\ExpandClassName_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetFunctionLocation_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\GetFunctionReturnTypeHint_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\LoadData_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^fun! SetUp()$/;"	f
SetUp	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! SetUp()$/;"	f
Settings	plugged\\vim-localvimrc\\README.md	/^## Settings$/;"	s
Settings:	plugged\\asyncrun.vim\\README.md	/^#### Settings:$/;"	t
Setup `<F7>` to compile file	plugged\\asyncrun.vim\\README.md	/^#### Setup `<F7>` to compile file$/;"	t
SetupAutoCommands	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! <SID>SetupAutoCommands()$/;"	f
SftpSync	autoload\\sftpsync\\python\\sftpsync.py	/^class SftpSync(object):$/;"	c
ShellCode	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_shell_code.py	/^class ShellCode(NoneditableTextObject):$/;"	c
ShellCodeToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class ShellCodeToken(Token):$/;"	c
ShiftWidthZero	plugged\\ultisnips\\test\\test_Fixes.py	/^class ShiftWidthZero(_VimTest):$/;"	c
SimilarNames	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^class SimilarNames {$/;"	c
SimpleExpandEndingWithNewline_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class SimpleExpandEndingWithNewline_ExpectCorrectResult(_VimTest):$/;"	c
SimpleExpandNewLineAndBackspae_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class SimpleExpandNewLineAndBackspae_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTwice_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class SimpleExpandTwice_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTypeAfterExpand_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class SimpleExpandTypeAfterExpand_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTypeAndDelete_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class SimpleExpandTypeAndDelete_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpand_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Expand.py	/^class SimpleExpand_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorDelete_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorDelete_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorMultilineMany_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorMultilineMany_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR(_VimTest):$/;"	c
SimpleMirrorSameLineBeforeTabDefVal_ECR	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorSameLineBeforeTabDefVal_ECR(_VimTest):$/;"	c
SimpleMirrorSameLineManyMultiline_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorSameLineManyMultiline_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineMany_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorSameLineMany_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLine_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorSameLine_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLine_InText_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleMirrorSameLine_InText_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultComplexType_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleTabstopWithDefaultComplexType_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult(_VimTest):$/;"	c
SmallNoise	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	SmallNoise int$/;"	m	struct:main.FileItem
SmartBackspace	plugin\\backspace.vim	/^function! SmartBackspace()$/;"	f
SnipMateFileSource	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^class SnipMateFileSource(SnippetFileSource):$/;"	c
SnipMateSnippetDefinition	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\snipmate.py	/^class SnipMateSnippetDefinition(SnippetDefinition):$/;"	c
Snippet engines supporting vim-snippets	plugged\\vim-snippets\\README.md	/^Snippet engines supporting vim-snippets$/;"	s
SnippetActions_CanEvenWrapSnippetInPreAction	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanEvenWrapSnippetInPreAction(_VimTest):$/;"	c
SnippetActions_CanExpandAnonOnPreExpand	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanExpandAnonOnPreExpand(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetInJumpAction	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetInJumpAction(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetOnFirstJump	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetOnFirstJump(_VimTest):$/;"	c
SnippetActions_CanExpandSnippetInDifferentPlace	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanExpandSnippetInDifferentPlace(_VimTest):$/;"	c
SnippetActions_CanMirrorTabStopsOutsideOfSnippet	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanMirrorTabStopsOutsideOfSnippet(_VimTest):$/;"	c
SnippetActions_CanModifyParentBody	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanModifyParentBody(_VimTest):$/;"	c
SnippetActions_CanUseContextFromContextMatch	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanUseContextFromContextMatch(_VimTest):$/;"	c
SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre(_VimTest):$/;"	c
SnippetActions_DoNotBreakCursorOnSingleLikeChange	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_DoNotBreakCursorOnSingleLikeChange(_VimTest):$/;"	c
SnippetActions_EnsureIndent	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_EnsureIndent(_VimTest):$/;"	c
SnippetActions_ErrorOnBufferModificationThroughCommand	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_ErrorOnBufferModificationThroughCommand(_VimTest):$/;"	c
SnippetActions_ErrorOnModificationSnippetLine	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_ErrorOnModificationSnippetLine(_VimTest):$/;"	c
SnippetActions_MoveParentSnippetFromChildInPreAction	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_MoveParentSnippetFromChildInPreAction(_VimTest):$/;"	c
SnippetActions_MoveVisual	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_MoveVisual(_VimTest):$/;"	c
SnippetActions_PostActionCanUseSnippetRange	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_PostActionCanUseSnippetRange(_VimTest):$/;"	c
SnippetActions_PostActionModifiesBuffer	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_PostActionModifiesBuffer(_VimTest):$/;"	c
SnippetActions_PostActionModifiesCharAfterSnippet	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_PostActionModifiesCharAfterSnippet(_VimTest):$/;"	c
SnippetActions_PostActionModifiesLineAfterSnippet	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_PostActionModifiesLineAfterSnippet(_VimTest):$/;"	c
SnippetActions_PreActionModifiesBuffer	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_PreActionModifiesBuffer(_VimTest):$/;"	c
SnippetActions_UseCorrectJumpActions	plugged\\ultisnips\\test\\test_SnippetActions.py	/^class SnippetActions_UseCorrectJumpActions(_VimTest):$/;"	c
SnippetDefinition	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^class SnippetDefinition(object):$/;"	c
SnippetDictionary	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_snippet_dictionary.py	/^class SnippetDictionary(object):$/;"	c
SnippetFileSource	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^class SnippetFileSource(SnippetSource):$/;"	c
SnippetInstance	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^class SnippetInstance(EditableTextObject):$/;"	c
SnippetManager	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^class SnippetManager(object):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippets_ExpandSingle	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippets_ExpandSingle(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippets_SimpleExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippets_SimpleExpand(_VimTest):$/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix($/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix2	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix2($/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix3	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix3($/;"	c
SnippetOptions_ExpandWordSnippets_NoExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_NoExpand($/;"	c
SnippetOptions_ExpandWordSnippets_NormalExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_NormalExpand($/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_DontExpand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_DontExpand(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_Expand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_Expand(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_Expand2	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_Expand2(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose(_VimTest):$/;"	c
SnippetOptions_Regex_Expand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_Expand(_VimTest):$/;"	c
SnippetOptions_Regex_Multiple	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_Multiple(_VimTest):$/;"	c
SnippetOptions_Regex_PythonBlockMatch	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_PythonBlockMatch(_VimTest):$/;"	c
SnippetOptions_Regex_PythonBlockNoMatch	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_PythonBlockNoMatch(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Long_End	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Long_End(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Long_Start	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Long_Start(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Simple	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Simple(_VimTest):$/;"	c
SnippetOptions_Regex_Self_Space	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_Space(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_Start	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_Start(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_TextAfter	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_TextAfter(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_TextBefore	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_TextBefore(_Regex_Self):$/;"	c
SnippetOptions_Regex_WithSpace	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class SnippetOptions_Regex_WithSpace(_VimTest):$/;"	c
SnippetPriorities_AddedHasHigherThanFile	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_AddedHasHigherThanFile(_VimTest):$/;"	c
SnippetPriorities_ClearedByChild	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_ClearedByChild(_VimTest):$/;"	c
SnippetPriorities_ClearedByParent	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_ClearedByParent(_VimTest):$/;"	c
SnippetPriorities_DoNotCareAboutNonMatchings	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_DoNotCareAboutNonMatchings(_VimTest):$/;"	c
SnippetPriorities_FileHasHigherThanAdded	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_FileHasHigherThanAdded(_VimTest):$/;"	c
SnippetPriorities_FileHasHigherThanAdded_neg_prio	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_FileHasHigherThanAdded_neg_prio(_VimTest):$/;"	c
SnippetPriorities_MultiWordTriggerOverwriteExisting	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_MultiWordTriggerOverwriteExisting(_VimTest):$/;"	c
SnippetPriorities_OverwriteExisting	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteExisting(_VimTest):$/;"	c
SnippetPriorities_OverwriteThenChoose_ECR	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteThenChoose_ECR(_VimTest):$/;"	c
SnippetPriorities_OverwriteTwice_ECR	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteTwice_ECR(_VimTest):$/;"	c
SnippetPriorities_SimpleClear	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_SimpleClear(_VimTest):$/;"	c
SnippetPriorities_SimpleClear2	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^class SnippetPriorities_SimpleClear2(_VimTest):$/;"	c
SnippetSource	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^class SnippetSource(object):$/;"	c
SnippetSyntaxError	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^class SnippetSyntaxError(RuntimeError):$/;"	c
SnippetUtil	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^class SnippetUtil(object):$/;"	c
SnippetUtilForAction	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^class SnippetUtilForAction(dict):$/;"	c
Snippet_With_DoubleQuote	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_DoubleQuote(_VimTest):$/;"	c
Snippet_With_DoubleQuote_List	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_DoubleQuote_List(_VimTest):$/;"	c
Snippet_With_SingleQuote	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_SingleQuote(_VimTest):$/;"	c
Snippet_With_SingleQuote_List	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_SingleQuote_List(_VimTest):$/;"	c
Snippet_With_Umlauts	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_List	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_List(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_Mirrors	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_Mirrors(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteFirst	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_OverwriteFirst(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteNone	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_OverwriteNone(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteSecond	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_OverwriteSecond(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_Python	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_Python(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_TypeOn	plugged\\ultisnips\\test\\test_Chars.py	/^class Snippet_With_Umlauts_TypeOn(_UmlautsBase):$/;"	c
Snippets	plugged\\php.vim\\README.md	/^#### Snippets$/;"	t
SomeChildNS	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\code_blocks.php	/^use SomeParentNS\\SomeChildNS;$/;"	a	typeref:unknown:SomeParentNS\\SomeChildNS
SomeTrait	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\traits.php	/^trait SomeTrait {$/;"	t	namespace:NS1
SomeTraitedClass	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_file_class.php	/^class SomeTraitedClass {$/;"	c
Something	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^class Something {$/;"	c	namespace:FooNS\\SomethingNS
Something	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^use FooNS\\SomethingNS\\Something;$/;"	a	namespace:FooNS	typeref:unknown:FooNS\\SomethingNS\\Something
SortAs	plugged\\vim-json\\json-test.json	/^					"SortAs": "SGML",$/;"	s	object:GlossDiv.GlossList.GlossEntry
SortByNoiseAndText	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type SortByNoiseAndText struct{ SortItems }$/;"	s	package:main
SortByText	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type SortByText struct{ SortItems }$/;"	s	package:main
SortItems	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type SortByNoiseAndText struct{ SortItems }$/;"	m	struct:main.SortByNoiseAndText
SortItems	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type SortByText struct{ SortItems }$/;"	m	struct:main.SortByText
SortItems	plugged\\vim-ctrlspace\\go\\file_engine.go	/^type SortItems struct {$/;"	s	package:main
Source	plugged\\ultisnips\\rplugin\\python3\\deoplete\\sources\\ultisnips.py	/^class Source(Base):$/;"	c
Source	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	Source     string$/;"	m	struct:main.Context
Specific customizations	plugged\\vim-json\\readme.md	/^Specific customizations$/;"	s
Steps to reproduce	plugged\\LeaderF\\ISSUE_TEMPLATE.md	/^### Steps to reproduce$/;"	S
String	plugged\\vim-matchup\\test\\issues\\10\\string.vim	/^function String()$/;"	f
StripWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! -range=% StripWhitespace call <SID>StripWhitespace( <line1>, <line2> )$/;"	c
SubNameSpaced	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\subnamespace.php	/^class SubNameSpaced {$/;"	c	namespace:NS1\\SubNS
SubNameSpacedInterface	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\subnamespace.php	/^interface SubNameSpacedInterface {$/;"	i	namespace:NS1\\SubNS
SuperTab	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTab(command) " {{{$/;"	f
SuperTabAlternateCompletion	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTabAlternateCompletion(type) " {{{$/;"	f
SuperTabChain	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTabChain(completefunc, completekeys, ...) " {{{$/;"	f
SuperTabCodeComplete	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTabCodeComplete(findstart, base) " {{{$/;"	f
SuperTabHelp	plugged\\supertab\\plugin\\supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabLongestHighlight	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTabLongestHighlight(dir) " {{{$/;"	f
SuperTabSetCompletionType	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTabSetCompletionType(type) " {{{$/;"	f
SuperTabSetDefaultCompletionType	plugged\\supertab\\plugin\\supertab.vim	/^function! SuperTabSetDefaultCompletionType(type) " {{{$/;"	f
Support for additional filetypes	plugged\\tagbar\\README.md	/^## Support for additional filetypes$/;"	s
Supported Properties	plugged\\vim-editorconfig\\README.md	/^### Supported Properties$/;"	S
Supported Whitespace Characters	plugged\\vim-better-whitespace\\README.md	/^## Supported Whitespace Characters$/;"	s
Swap	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (s *SortItems) Swap(i, j int) {$/;"	f	unknown:main.SortItems
Symbols	plugged\\vim-ctrlspace\\README.md	/^#### Symbols$/;"	t
SynAttrXMLish	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynAttrXMLish(synattr)$/;"	f
SynEOL	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynEOL(lnum)$/;"	f
SynFold	plugged\\php.vim\\syntax\\php.vim	/^  command! -nargs=+ SynFold <args> fold$/;"	c
SynFold	plugged\\php.vim\\syntax\\php.vim	/^  command! -nargs=+ SynFold <args>$/;"	c
SynFoldDoc	plugged\\php.vim\\syntax\\php.vim	/^  command! -nargs=+ SynFoldDoc <args> fold$/;"	c
SynFoldDoc	plugged\\php.vim\\syntax\\php.vim	/^  command! -nargs=+ SynFoldDoc <args>$/;"	c
SynJSXBlockEnd	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynJSXBlockEnd(syns)$/;"	f
SynJSXContinues	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynJSXContinues(cursyn, prevsyn)$/;"	f
SynJSXDepth	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynJSXDepth(syns)$/;"	f
SynSOL	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynSOL(lnum)$/;"	f
SynXMLish	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^fu! SynXMLish(syns)$/;"	f
TAR	plugged\\html5.vim\\Makefile	/^TAR=tar czvf$/;"	m
TComment	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TComment$/;"	c
TCommentAs	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^command! -bar -bang -complete=customlist,tcomment#complete#Complete -range -nargs=+ TCommentAs $/;"	c
TCommentBlock	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentBlock$/;"	c
TCommentInline	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentInline$/;"	c
TCommentMaybeInline	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentMaybeInl/;"	c
TCommentRight	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentRight$/;"	c
TROUBLE	plugged\\vim-snippets\\README.md	/^TROUBLE$/;"	c
TabStop	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_tabstop.py	/^class TabStop(EditableTextObject):$/;"	c
TabStopEscapingWhenSelectedNoCharTS_ECR	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopEscapingWhenSelectedNoCharTS_ECR(_VimTest):$/;"	c
TabStopEscapingWhenSelectedSingleCharTS_ECR	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopEscapingWhenSelectedSingleCharTS_ECR(_VimTest):$/;"	c
TabStopEscapingWhenSelected_ECR	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopEscapingWhenSelected_ECR(_VimTest):$/;"	c
TabStopNavigatingInInsertModeSimple_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopNavigatingInInsertModeSimple_ExpectCorrectResult(_VimTest):$/;"	c
TabStopNoReplace_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopNoReplace_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceReversed_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopSimpleReplaceReversed_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceSurrounded1_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopSimpleReplaceSurrounded1_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceSurrounded_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopSimpleReplaceSurrounded_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplace_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopSimpleReplace_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestBackwardJumping2_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestBackwardJumping2_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestBackwardJumping_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestBackwardJumping_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumping2_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestJumping2_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult($/;"	c
TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumping_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestJumping_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestMultilineExpand_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopTestMultilineExpand_ExpectCorrectResult(_VimTest):$/;"	c
TabStopToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class TabStopToken(Token):$/;"	c
TabStopWithOneChar_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStopWithOneChar_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_AdjacentTabStopAddText_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_AdjacentTabStopAddText_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_CROnlyOnSelectedNear	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_CROnlyOnSelectedNear(_VimTest):$/;"	c
TabStop_EscapingCharsBackticks	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingCharsBackticks(_VimTest):$/;"	c
TabStop_EscapingCharsDollars	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingCharsDollars(_VimTest):$/;"	c
TabStop_EscapingCharsDollars1	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingCharsDollars1(_VimTest):$/;"	c
TabStop_EscapingCharsDollars_BeginningOfDefinitionText	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingCharsDollars_BeginningOfDefinitionText(_VimTest):$/;"	c
TabStop_EscapingCharsDollars_BeginningOfLine	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingCharsDollars_BeginningOfLine(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingChars_Backslash(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash2	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingChars_Backslash2(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash3	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingChars_Backslash3(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash4	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingChars_Backslash4(_VimTest):$/;"	c
TabStop_EscapingChars_RealLife	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_EscapingChars_RealLife(_VimTest):$/;"	c
TabStop_Exit_ExpectCorrectResult	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_Exit_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet(_VimTest):$/;"	c
TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE(_VimTest):$/;"	c
TabStop_Multiline_DelFirstOverwriteSecond_Overwrite	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_Multiline_DelFirstOverwriteSecond_Overwrite(_VimTest):$/;"	c
TabStop_Multiline_Leave	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_Multiline_Leave(_VimTest):$/;"	c
TabStop_Multiline_MirrorInFront_Leave	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_Multiline_MirrorInFront_Leave(_VimTest):$/;"	c
TabStop_Multiline_MirrorInFront_Overwrite	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_Multiline_MirrorInFront_Overwrite(_VimTest):$/;"	c
TabStop_Multiline_Overwrite	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_Multiline_Overwrite(_VimTest):$/;"	c
TabStop_Shell_InDefValue_Leave	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_InDefValue_Leave(_VimTest):$/;"	c
TabStop_Shell_InDefValue_Overwrite	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_InDefValue_Overwrite(_VimTest):$/;"	c
TabStop_Shell_ShebangPython	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_ShebangPython(_VimTest):$/;"	c
TabStop_Shell_SimpleExample	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_SimpleExample(_VimTest):$/;"	c
TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite(_VimTest):$/;"	c
TabStop_Shell_TestEscapedChars_Overwrite	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_TestEscapedChars_Overwrite(_VimTest):$/;"	c
TabStop_Shell_TextInNextLine	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_TextInNextLine(_VimTest):$/;"	c
TabStop_Shell_WithUmlauts	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_Shell_WithUmlauts(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpAround	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpAround(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpToThird	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpToThird(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_DeleteFirst	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_DeleteFirst(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecond	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0($/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1($/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite($/;"	c
TabStop_TSInDefaultText_ZeroLengthZerothTabstop	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthZerothTabstop(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_DoNothing	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_DoNothing(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_Overwrite0	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_Overwrite0(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_Overwrite1	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_Overwrite1(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample	plugged\\ultisnips\\test\\test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample(_VimTest):$/;"	c
TabStop_VimScriptInterpolation_SimpleExample	plugged\\ultisnips\\test\\test_Interpolation.py	/^class TabStop_VimScriptInterpolation_SimpleExample(_VimTest):$/;"	c
Table of Contents	plugged\\ale\\README.md	/^## Table of Contents$/;"	s
Table of contents	plugged\\vim-matchup\\README.md	/^## Table of contents$/;"	s
TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult($/;"	c
TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoType_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultNoType_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorManyFromAll_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TabstopWithMirrorManyFromAll_ExpectCorrectResult(_VimTest):$/;"	c
TagClass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\tagclass.php	/^class TagClass {$/;"	c
TagExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^class TagExplManager(Manager):$/;"	c
TagExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^class TagExplorer(Explorer):$/;"	c
Tagbar	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
Tagbar: a class outline viewer for Vim	plugged\\tagbar\\README.md	/^# Tagbar: a class outline viewer for Vim$/;"	c
TagbarAutoCmds	plugged\\tagbar\\autoload\\tagbar.vim	/^    augroup TagbarAutoCmds$/;"	a
TagbarBalloonExpr	plugged\\tagbar\\autoload\\tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarClose	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarGetTypeConfig	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarOpen	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	plugged\\tagbar\\plugin\\tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	plugged\\tagbar\\plugin\\tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TempFileManager	plugged\\ultisnips\\test\\vim_interface.py	/^class TempFileManager(object):$/;"	c
TestAllMatch	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestAllMatch(_Base, unittest.TestCase):$/;"	c
TestCase_adds_arguments_of_constructors_for_built_in_classes	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_adds_arguments_of_constructors_for_built_in_classes()$/;"	f
TestCase_appends_relative_namespace_parts_from_classname_to_current_namespace	plugged\\phpcomplete.vim\\tests\\ExpandClassName_test.vim	/^fun! TestCase_appends_relative_namespace_parts_from_classname_to_current_namespace()$/;"	f
TestCase_builtin_function_return_type	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_builtin_function_return_type()$/;"	f
TestCase_can_generates_class_from_class_info	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^fun! TestCase_can_generates_class_from_class_info() " {{{$/;"	f
TestCase_can_generates_empty_class	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^fun! TestCase_can_generates_empty_class() " {{{$/;"	f
TestCase_can_generates_empty_interface	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^fun! TestCase_can_generates_empty_interface() " {{{$/;"	f
TestCase_catch_clause	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_catch_clause()$/;"	f
TestCase_collects_lines_up_until_the_first_param_var_or_return_as_description_whitespace_trimmed_down_from_the_ends	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! TestCase_collects_lines_up_until_the_first_param_var_or_return_as_description_whitespace_tr/;"	f
TestCase_complete_classes_from_built_in_classes	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_complete_classes_from_built_in_classes()$/;"	f
TestCase_complete_classes_from_current_file	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_complete_classes_from_current_file()$/;"	f
TestCase_complete_classes_from_tags	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_complete_classes_from_tags()$/;"	f
TestCase_complete_variables_built_in_global_variable	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^fun! TestCase_complete_variables_built_in_global_variable()$/;"	f
TestCase_complete_variables_from_current_file	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^fun! TestCase_complete_variables_from_current_file()$/;"	f
TestCase_complete_variables_from_tags	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^fun! TestCase_complete_variables_from_tags()$/;"	f
TestCase_completes_builtin_class_names	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_class_names() " {{{$/;"	f
TestCase_completes_builtin_class_names_when_in_namespace_and_base_starts_with_slash	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_class_names_when_in_namespace_and_base_starts_with_slash() " {{{$/;"	f
TestCase_completes_builtin_classes	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^fun! TestCase_completes_builtin_classes()$/;"	f
TestCase_completes_builtin_constants	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_constants() " {{{$/;"	f
TestCase_completes_builtin_constants_when_in_namespace	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_constants_when_in_namespace() " {{{$/;"	f
TestCase_completes_builtin_functions	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_functions() " {{{$/;"	f
TestCase_completes_builtin_functions_when_in_namespace	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_functions_when_in_namespace() " {{{$/;"	f
TestCase_completes_builtin_interface_names	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_interface_names() " {{{$/;"	f
TestCase_completes_builtin_keywords	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_builtin_keywords() " {{{$/;"	f
TestCase_completes_class_names_from_imported_names	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_completes_class_names_from_imported_names()$/;"	f
TestCase_completes_class_names_from_imported_namespaces_via_tags	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_completes_class_names_from_imported_namespaces_via_tags()$/;"	f
TestCase_completes_class_names_from_tags_matching_namespaces	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_class_names_from_tags_matching_namespaces() " {{{$/;"	f
TestCase_completes_constants_from_local_file	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_constants_from_local_file() " {{{$/;"	f
TestCase_completes_constants_from_tags_in_matching_namespaces	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_constants_from_tags_in_matching_namespaces() " {{{$/;"	f
TestCase_completes_function_signature_from_tags_if_field_available	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_function_signature_from_tags_if_field_available() " {{{$/;"	f
TestCase_completes_function_signature_from_tags_if_field_available	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! TestCase_completes_function_signature_from_tags_if_field_available()$/;"	f
TestCase_completes_functions_classes_constants_constants_from_tags	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_functions_classes_constants_constants_from_tags() " {{{$/;"	f
TestCase_completes_functions_from_local_file	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_functions_from_local_file() " {{{$/;"	f
TestCase_completes_namespace_names_from_tags	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_namespace_names_from_tags() " {{{$/;"	f
TestCase_completes_namespaces_and_classes_from_tags_when_a_leading_namespace_is_already_typed_in	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^fun! TestCase_completes_namespaces_and_classes_from_tags_when_a_leading_namespace_is_already_typ/;"	f
TestCase_completes_namespaces_from_tags	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^fun! TestCase_completes_namespaces_from_tags()$/;"	f
TestCase_completes_top_level_functions_from_tags_in_matching_namespaces	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_completes_top_level_functions_from_tags_in_matching_namespaces() " {{{$/;"	f
TestCase_creates_various_global_hashes	plugged\\phpcomplete.vim\\tests\\LoadData_test.vim	/^fun! TestCase_creates_various_global_hashes()$/;"	f
TestCase_does_not_pick_up_trait_uses_inside_classes	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_does_not_pick_up_trait_uses_inside_classes()$/;"	f
TestCase_doesnt_complete_keywords_when_theres_a_leading_slash	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_doesnt_complete_keywords_when_theres_a_leading_slash() " {{{$/;"	f
TestCase_extract_class_from_the_same_file_when_line_referes_to_this	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_extract_class_from_the_same_file_when_line_referes_to_this()$/;"	f
TestCase_extract_parameter_type_from_docblock	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_extract_parameter_type_from_docblock()$/;"	f
TestCase_extract_typehint_from_function_calls	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_extract_typehint_from_function_calls()$/;"	f
TestCase_extracts_AT_properties_from_docblock_of_a_class	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! TestCase_extracts_AT_properties_from_docblock_of_a_class()$/;"	f
TestCase_extracts_namespace_from_classname_when_its_prefixed_with_absolute_namespace	plugged\\phpcomplete.vim\\tests\\ExpandClassName_test.vim	/^fun! TestCase_extracts_namespace_from_classname_when_its_prefixed_with_absolute_namespace()$/;"	f
TestCase_extracts_parameters_with_types_and_descriptions	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! TestCase_extracts_parameters_with_types_and_descriptions()$/;"	f
TestCase_extracts_return_type_and_description	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! TestCase_extracts_return_type_and_description()$/;"	f
TestCase_extracts_throws_and_exception_lines_with_type_and_description	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! TestCase_extracts_throws_and_exception_lines_with_type_and_description()$/;"	f
TestCase_extracts_var_lines_with_type_and_description	plugged\\phpcomplete.vim\\tests\\ParseDocBlock_test.vim	/^fun! TestCase_extracts_var_lines_with_type_and_description()$/;"	f
TestCase_filters_class_names_with_the_current_namespace_but_doesnt_add_the_current_namespace_to_the_completion_word	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_filters_class_names_with_the_current_namespace_but_doesnt_add_the_current_namespac/;"	f
TestCase_filters_class_names_with_the_namespaces_typed_in_base	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^fun! TestCase_filters_class_names_with_the_namespaces_typed_in_base()$/;"	f
TestCase_filters_for_instane_level_prefix	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_filters_for_instane_level_prefix()$/;"	f
TestCase_filters_for_static_property_names	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_filters_for_static_property_names()$/;"	f
TestCase_finds_abstract_classes	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_finds_abstract_classes()$/;"	f
TestCase_finds_classes_from_variable_equals_new_class_lines	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_finds_classes_from_variable_equals_new_class_lines()$/;"	f
TestCase_finds_common_singleton_getInstance_calls	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_finds_common_singleton_getInstance_calls()$/;"	f
TestCase_finds_new_keyword_instantiations_in_parentheses_from_php5_4	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_finds_new_keyword_instantiations_in_parentheses_from_php5_4()$/;"	f
TestCase_finds_variables_marked_with_AT_VAR_comments	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_finds_variables_marked_with_AT_VAR_comments()$/;"	f
TestCase_function_invocation_return_type	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_function_invocation_return_type()$/;"	f
TestCase_function_return_type	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_function_return_type()$/;"	f
TestCase_gets_functions_from_implemented_interfaces	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_gets_functions_from_implemented_interfaces()$/;"	f
TestCase_handles_array_completion	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_handles_array_completion()$/;"	f
TestCase_handles_matching_class_name_extends_with_different_namespaces	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_handles_matching_class_name_extends_with_different_namespaces()$/;"	f
TestCase_handles_parent_keyword	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_handles_parent_keyword()$/;"	f
TestCase_have_no_empty_element_on_the_end_if_the_context_ended_with_an_arrow_or_double_colon	plugged\\phpcomplete.vim\\tests\\GetMethodStack_test.vim	/^fun! TestCase_have_no_empty_element_on_the_end_if_the_context_ended_with_an_arrow_or_double_colo/;"	f
TestCase_honors_the_min_num_of_chars_for_namespace_completion_setting_for_classnames	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^fun! TestCase_honors_the_min_num_of_chars_for_namespace_completion_setting_for_classnames()$/;"	f
TestCase_honors_the_min_num_of_chars_for_namespace_completion_setting_for_namespaces	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^fun! TestCase_honors_the_min_num_of_chars_for_namespace_completion_setting_for_namespaces()$/;"	f
TestCase_ignores_arrows_and_double_colons_and_parents_inside_strings	plugged\\phpcomplete.vim\\tests\\GetMethodStack_test.vim	/^fun! TestCase_ignores_arrows_and_double_colons_and_parents_inside_strings()$/;"	f
TestCase_ignores_arrows_and_double_colons_inside_paretns	plugged\\phpcomplete.vim\\tests\\GetMethodStack_test.vim	/^fun! TestCase_ignores_arrows_and_double_colons_inside_paretns()$/;"	f
TestCase_matches_classname_from_imported_names	plugged\\phpcomplete.vim\\tests\\ExpandClassName_test.vim	/^fun! TestCase_matches_classname_from_imported_names()$/;"	f
TestCase_matches_namespace_from_imported_names	plugged\\phpcomplete.vim\\tests\\ExpandClassName_test.vim	/^fun! TestCase_matches_namespace_from_imported_names()$/;"	f
TestCase_only_reads_in_the_class_content	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_only_reads_in_the_class_content()$/;"	f
TestCase_php_built_classnames_and_builtin_classes_are_indexed_lowercase	plugged\\phpcomplete.vim\\tests\\LoadData_test.vim	/^fun! TestCase_php_built_classnames_and_builtin_classes_are_indexed_lowercase()$/;"	f
TestCase_reads_in_the_class_from_the_list_of_lines	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_reads_in_the_class_from_the_list_of_lines()$/;"	f
TestCase_reads_in_the_extended_class_content	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_reads_in_the_extended_class_content()$/;"	f
TestCase_reads_in_the_extended_classes_recursive	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_reads_in_the_extended_classes_recursive()$/;"	f
TestCase_reads_in_the_extended_classes_recursive_with_namespaces	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_reads_in_the_extended_classes_recursive_with_namespaces()$/;"	f
TestCase_reads_in_the_extended_classes_with_imports	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_reads_in_the_extended_classes_with_imports()$/;"	f
TestCase_recognizes_a_oneline_comment_block_for_properties	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^fun! TestCase_recognizes_a_oneline_comment_block_for_properties()$/;"	f
TestCase_removes_leading_slash	plugged\\phpcomplete.vim\\tests\\ExpandClassName_test.vim	/^fun! TestCase_removes_leading_slash()$/;"	f
TestCase_resolves_call_chains_return_type_with_php5_4_new	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_call_chains_return_type_with_php5_4_new()$/;"	f
TestCase_resolves_call_chains_return_type_with_tags	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_call_chains_return_type_with_tags()$/;"	f
TestCase_resolves_call_chains_return_type_with_this	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_call_chains_return_type_with_this()$/;"	f
TestCase_resolves_call_chains_return_type_with_when_chain_head_class_detectable	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_call_chains_return_type_with_when_chain_head_class_detectable()$/;"	f
TestCase_resolves_call_chains_return_type_with_when_chain_head_class_detectable_with_builtin_types	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_call_chains_return_type_with_when_chain_head_class_detectable_with_builti/;"	f
TestCase_resolves_classnames_from_cloned_variables	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_classnames_from_cloned_variables()$/;"	f
TestCase_resolves_classnames_with_multiple_methods_recursively	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_classnames_with_multiple_methods_recursively()$/;"	f
TestCase_resolves_classnames_with_multiple_methods_recursively_even_with_extra_whitespace	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_classnames_with_multiple_methods_recursively_even_with_extra_whitespace()$/;"	f
TestCase_resolves_inside_a_function_body	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_inside_a_function_body()$/;"	f
TestCase_resolves_return_type_hints	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_return_type_hints()$/;"	f
TestCase_resolves_self_this_static_in_return_docblock	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_self_this_static_in_return_docblock()$/;"	f
TestCase_resolves_self_this_static_in_return_docblock_in_array_situation	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_resolves_self_this_static_in_return_docblock_in_array_situation()$/;"	f
TestCase_retuns_docblock_for_the_class_itself	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^fun! TestCase_retuns_docblock_for_the_class_itself()$/;"	f
TestCase_return_VIMPHP_BUILTINFUNCTION_when_function_name_is_builtin	plugged\\phpcomplete.vim\\tests\\GetFunctionLocation_test.vim	/^fun! TestCase_return_VIMPHP_BUILTINFUNCTION_when_function_name_is_builtin()$/;"	f
TestCase_return_VIMPHP_BUILTINOBJECT_when_classname_in_builtin_classes	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^fun! TestCase_return_VIMPHP_BUILTINOBJECT_when_classname_in_builtin_classes()$/;"	f
TestCase_return_class_location_from_tags	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^fun! TestCase_return_class_location_from_tags()$/;"	f
TestCase_return_current_file_path_when_classname_found_in_previous_lines_of_current_buffer	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^fun! TestCase_return_current_file_path_when_classname_found_in_previous_lines_of_current_buffer(/;"	f
TestCase_return_current_file_path_when_function_declaration_is_found_in_the_file	plugged\\phpcomplete.vim\\tests\\GetFunctionLocation_test.vim	/^fun! TestCase_return_current_file_path_when_function_declaration_is_found_in_the_file()$/;"	f
TestCase_return_current_file_path_when_function_declaration_is_found_in_the_file	plugged\\phpcomplete.vim\\tests\\GetFunctionReturnTypeHint_test.vim	/^fun! TestCase_return_current_file_path_when_function_declaration_is_found_in_the_file()$/;"	f
TestCase_return_function_location_from_tags	plugged\\phpcomplete.vim\\tests\\GetFunctionLocation_test.vim	/^fun! TestCase_return_function_location_from_tags()$/;"	f
TestCase_returns_built_in_object_functions	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! TestCase_returns_built_in_object_functions()$/;"	f
TestCase_returns_class_content_from_inside_the_same_file	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_returns_class_content_from_inside_the_same_file()$/;"	f
TestCase_returns_class_from_static_method_call	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_class_from_static_method_call()$/;"	f
TestCase_returns_class_from_tags_with_tag_of_v_kind_and_a_new_equals_class_cmd	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_class_from_tags_with_tag_of_v_kind_and_a_new_equals_class_cmd()$/;"	f
TestCase_returns_class_properties_from_current_file	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! TestCase_returns_class_properties_from_current_file()$/;"	f
TestCase_returns_closest_namespace_from_the_current_line	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_returns_closest_namespace_from_the_current_line()$/;"	f
TestCase_returns_completions_from_imported_names	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_returns_completions_from_imported_names() " {{{$/;"	f
TestCase_returns_constants	plugged\\phpcomplete.vim\\tests\\CompleteBuiltInClass_test.vim	/^fun! TestCase_returns_constants()$/;"	f
TestCase_returns_contents_of_a_class_regardless_of_comments_or_strings	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_returns_contents_of_a_class_regardless_of_comments_or_strings()$/;"	f
TestCase_returns_contents_of_implemented_interfaces	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_returns_contents_of_implemented_interfaces()$/;"	f
TestCase_returns_contents_of_used_traits_too	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_returns_contents_of_used_traits_too()$/;"	f
TestCase_returns_current_symbol_under_cursor	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^fun! TestCase_returns_current_symbol_under_cursor()$/;"	f
TestCase_returns_current_symbol_with_the_current_namespace_and_imports	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^fun! TestCase_returns_current_symbol_with_the_current_namespace_and_imports()$/;"	f
TestCase_returns_empty_list_when_unknown_class_completion_disabled	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! TestCase_returns_empty_list_when_unknown_class_completion_disabled()$/;"	f
TestCase_returns_empty_string_when_no_comment_block_found	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^fun! TestCase_returns_empty_string_when_no_comment_block_found()$/;"	f
TestCase_returns_empty_strings_when_outside_php_block	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^fun! TestCase_returns_empty_strings_when_outside_php_block()$/;"	f
TestCase_returns_empty_strings_when_symbol_not_found	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^fun! TestCase_returns_empty_strings_when_symbol_not_found()$/;"	f
TestCase_returns_empty_when_sees_curlyclose_on_line_start	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_empty_when_sees_curlyclose_on_line_start()$/;"	f
TestCase_returns_everyting_instance_related_when_scope_is_in_class	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_everyting_instance_related_when_scope_is_in_class()$/;"	f
TestCase_returns_everyting_instance_related_when_scope_is_out_of_class	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_everyting_instance_related_when_scope_is_out_of_class()$/;"	f
TestCase_returns_everyting_static_when_scope_is_in_class	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_everyting_static_when_scope_is_in_class()$/;"	f
TestCase_returns_everyting_static_when_scope_is_out_of_class	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_everyting_static_when_scope_is_out_of_class()$/;"	f
TestCase_returns_first_non_primitive_type	plugged\\phpcomplete.vim\\tests\\GetTypeFromDocBlockParam_test.vim	/^fun! TestCase_returns_first_non_primitive_type()$/;"	f
TestCase_returns_functions_from_current_file	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! TestCase_returns_functions_from_current_file()$/;"	f
TestCase_returns_functions_from_tags	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^fun! TestCase_returns_functions_from_tags()$/;"	f
TestCase_returns_imported_namespaces_and_classes_with_their_info_from_tags	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_returns_imported_namespaces_and_classes_with_their_info_from_tags()$/;"	f
TestCase_returns_input_if_no_pipe_detected	plugged\\phpcomplete.vim\\tests\\GetTypeFromDocBlockParam_test.vim	/^fun! TestCase_returns_input_if_no_pipe_detected()$/;"	f
TestCase_returns_instuction_string	plugged\\phpcomplete.vim\\tests\\GetCurrentInstruction_test.vim	/^fun! TestCase_returns_instuction_string()$/;"	f
TestCase_returns_location_for_inherited_methods	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^fun! TestCase_returns_location_for_inherited_methods()$/;"	f
TestCase_returns_locations_for_reference_returning_functions	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^fun! TestCase_returns_locations_for_reference_returning_functions()$/;"	f
TestCase_returns_methods	plugged\\phpcomplete.vim\\tests\\CompleteBuiltInClass_test.vim	/^fun! TestCase_returns_methods()$/;"	f
TestCase_returns_namespace_from_file_lines	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_returns_namespace_from_file_lines()$/;"	f
TestCase_returns_non_explicit_static_methods_when_phpcomplete_relax_static_constraint_enabled	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_non_explicit_static_methods_when_phpcomplete_relax_static_constraint_enabl/;"	f
TestCase_returns_properties	plugged\\phpcomplete.vim\\tests\\CompleteBuiltInClass_test.vim	/^fun! TestCase_returns_properties()$/;"	f
TestCase_returns_return_type_of_built_in_objects_static_methods	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_return_type_of_built_in_objects_static_methods()$/;"	f
TestCase_returns_slash_when_no_namespace_found	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_returns_slash_when_no_namespace_found()$/;"	f
TestCase_returns_static_function_calls_retun_type_with_namespaces	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_static_function_calls_retun_type_with_namespaces()$/;"	f
TestCase_returns_static_function_calls_retun_type_with_namespaces_from_the_global_scope	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_static_function_calls_retun_type_with_namespaces_from_the_global_scope()$/;"	f
TestCase_returns_static_function_calls_return_type	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_returns_static_function_calls_return_type()$/;"	f
TestCase_returns_static_methods	plugged\\phpcomplete.vim\\tests\\CompleteBuiltInClass_test.vim	/^fun! TestCase_returns_static_methods()$/;"	f
TestCase_returns_static_properties	plugged\\phpcomplete.vim\\tests\\CompleteBuiltInClass_test.vim	/^fun! TestCase_returns_static_properties()$/;"	f
TestCase_returns_static_properties_with_only_a_dollarsign_base	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_static_properties_with_only_a_dollarsign_base()$/;"	f
TestCase_returns_symbol_locations	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^fun! TestCase_returns_symbol_locations()$/;"	f
TestCase_returns_symbol_locations_with_namespaces	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^fun! TestCase_returns_symbol_locations_with_namespaces()$/;"	f
TestCase_returns_tags_from_imported_namespaces	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^fun! TestCase_returns_tags_from_imported_namespaces() " {{{$/;"	f
TestCase_returns_the_comment_block_without_last_and_first_line_and_without_leading_stars	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^fun! TestCase_returns_the_comment_block_without_last_and_first_line_and_without_leading_stars()$/;"	f
TestCase_returns_the_contents_of_extended_interfaces	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^fun! TestCase_returns_the_contents_of_extended_interfaces()$/;"	f
TestCase_returns_the_first_type_if_only_primitives_found	plugged\\phpcomplete.vim\\tests\\GetTypeFromDocBlockParam_test.vim	/^fun! TestCase_returns_the_first_type_if_only_primitives_found()$/;"	f
TestCase_returns_the_line_splited_on_arrows_and_double_colons	plugged\\phpcomplete.vim\\tests\\GetMethodStack_test.vim	/^fun! TestCase_returns_the_line_splited_on_arrows_and_double_colons()$/;"	f
TestCase_returns_types_for_properties_and_return_types_from_docblock_comments	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^fun! TestCase_returns_types_for_properties_and_return_types_from_docblock_comments()$/;"	f
TestCase_returns_zero_when_no_function_found_above	plugged\\phpcomplete.vim\\tests\\GetCurrentFunctionBoundaries_test.vim	/^fun! TestCase_returns_zero_when_no_function_found_above()$/;"	f
TestCase_should_find_imports_when_called_with_non_balanced_braces	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_should_find_imports_when_called_with_non_balanced_braces()$/;"	f
TestCase_should_not_loop_forever_around_stuff_having_the_word_class_class_in_them	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^fun! TestCase_should_not_loop_forever_around_stuff_having_the_word_class_class_in_them()$/;"	f
TestCase_should_pick_up_imports_regardeless_the_upperlower_case_of_keywords	plugged\\phpcomplete.vim\\tests\\GetCurrentNameSpace_test.vim	/^fun! TestCase_should_pick_up_imports_regardeless_the_upperlower_case_of_keywords()$/;"	f
TestCase_split_height_doesnt_change_when_completing	plugged\\phpcomplete.vim\\tests\\CompletePHP_test.vim	/^fun! TestCase_split_height_doesnt_change_when_completing()$/;"	f
TestCheapDelete	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestCheapDelete(_Base, unittest.TestCase):$/;"	c
TestCommonCharacters	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestCommonCharacters(_Base, unittest.TestCase):$/;"	c
TestCrash	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestCrash(_Base, unittest.TestCase):$/;"	c
TestEmptyString	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestEmptyString(_Base, unittest.TestCase):$/;"	c
TestGuessing_BackspaceOneChar	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestGuessing_BackspaceOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_DeleteOneChar	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestGuessing_DeleteOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_InsertOneChar	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestGuessing_InsertOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_InsertOneChar1	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestGuessing_InsertOneChar1(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_Noop0	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestGuessing_Noop0(_BaseGuessing, unittest.TestCase):$/;"	c
TestLangmapWithUtf8_ExpectCorrectResult	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class TestLangmapWithUtf8_ExpectCorrectResult(_VimTest):$/;"	c
TestLotsaNewlines	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestLotsaNewlines(_Base, unittest.TestCase):$/;"	c
TestNoSubstring	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestNoSubstring(_Base, unittest.TestCase):$/;"	c
TestNonEmptyLangmapWithSemi_ExpectCorrectResult	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class TestNonEmptyLangmapWithSemi_ExpectCorrectResult(_VimTest):$/;"	c
TestNonEmptyLangmap_ExpectCorrectResult	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class TestNonEmptyLangmap_ExpectCorrectResult(_VimTest):$/;"	c
TestRealLife	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestRealLife(_Base, unittest.TestCase):$/;"	c
TestRealLife1	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestRealLife1(_Base, unittest.TestCase):$/;"	c
TestSuperTabCodeComplete	plugged\\supertab\\plugin\\supertab.vim	/^function! TestSuperTabCodeComplete(findstart, base) " {{{$/;"	f
TestUltiSnipsProblem	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestUltiSnipsProblem(_Base, unittest.TestCase):$/;"	c
TestWithNewline	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class TestWithNewline(_Base, unittest.TestCase):$/;"	c
Testing	plugged\\ultisnips\\CONTRIBUTING.md	/^## Testing$/;"	s
TextContext	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^typedef struct TextContext$/;"	s	file:
TextContext	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^}TextContext;$/;"	t	typeref:struct:TextContext	file:
TextObject	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^class TextObject(object):$/;"	c
TextObjectTransformation	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^class TextObjectTransformation(object):$/;"	c
TextTabStopAfterMirror_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopAfterMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopAllSurrounded_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopAllSurrounded_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopSimpleMirrorMultilineMirrorInFront_ECR	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopSimpleMirrorMultilineMirrorInFront_ECR(_VimTest):$/;"	c
TextTabStopSimpleMirrorMultiline_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopSimpleMirrorMultiline_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopSurroundMirror_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopSurroundMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextAfterTab_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopTextAfterTab_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextBeforeMirror_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopTextBeforeMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextBeforeTab_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopTextBeforeTab_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextSurroundedTab_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Mirror.py	/^class TextTabStopTextSurroundedTab_ExpectCorrectResult(_VimTest):$/;"	c
The NERDTree	plugged\\nerdtree\\README.markdown	/^The NERDTree$/;"	c
The `LocalVimRCClear` command	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCClear` command$/;"	S
The `LocalVimRCDisable` command	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCDisable` command$/;"	S
The `LocalVimRCEdit` command	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCEdit` command$/;"	S
The `LocalVimRCEnable` command	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCEnable` command$/;"	S
The `LocalVimRCFinish` function	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCFinish` function$/;"	S
The `LocalVimRCPost` autocommand	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCPost` autocommand$/;"	S
The `LocalVimRCPre` autocommand	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRCPre` autocommand$/;"	S
The `LocalVimRC` command	plugged\\vim-localvimrc\\README.md	/^### The `LocalVimRC` command$/;"	S
The `g:localvimrc_ask` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_ask` setting$/;"	S
The `g:localvimrc_autocmd` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_autocmd` setting$/;"	S
The `g:localvimrc_blacklist` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_blacklist` setting$/;"	S
The `g:localvimrc_count` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_count` setting$/;"	S
The `g:localvimrc_debug` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_debug` setting$/;"	S
The `g:localvimrc_enable` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_enable` setting$/;"	S
The `g:localvimrc_event_pattern` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_event_pattern` setting$/;"	S
The `g:localvimrc_event` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_event` setting$/;"	S
The `g:localvimrc_file_dir` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_file_dir` variable$/;"	S
The `g:localvimrc_file_directory_only` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_file_directory_only` setting$/;"	S
The `g:localvimrc_file` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_file` variable$/;"	S
The `g:localvimrc_name` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_name` setting$/;"	S
The `g:localvimrc_persistence_file` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_persistence_file` setting$/;"	S
The `g:localvimrc_persistent` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_persistent` setting$/;"	S
The `g:localvimrc_reverse` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_reverse` setting$/;"	S
The `g:localvimrc_sandbox` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_sandbox` setting$/;"	S
The `g:localvimrc_script_dir_unresolved` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_script_dir_unresolved` variable$/;"	S
The `g:localvimrc_script_dir` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_script_dir` variable$/;"	S
The `g:localvimrc_script_unresolved` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_script_unresolved` variable$/;"	S
The `g:localvimrc_script` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_script` variable$/;"	S
The `g:localvimrc_sourced_once_for_file` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_sourced_once_for_file` setting$/;"	S
The `g:localvimrc_sourced_once` variable	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_sourced_once` variable$/;"	S
The `g:localvimrc_whitelist` setting	plugged\\vim-localvimrc\\README.md	/^### The `g:localvimrc_whitelist` setting$/;"	S
Thing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^class Thing {$/;"	c	namespace:BarNS\\Things
Thing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^use BarNS\\Things\\Thing;$/;"	a	namespace:FooNS	typeref:unknown:BarNS\\Things\\Thing
Thing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^use BarNS\\Things\\Thing;$/;"	a	namespace:FooNS\\SomethingNS	typeref:unknown:BarNS\\Things\\Thing
This function will clean up first placeholder when this is empty.	plugged\\ultisnips\\doc\\examples\\autojump-if-empty\\README.md	/^# This function will clean up first placeholder when this is empty.$/;"	c
This function will jump to next placeholder when first is empty.	plugged\\ultisnips\\doc\\examples\\autojump-if-empty\\README.md	/^# This function will jump to next placeholder when first is empty.$/;"	c
Time	plugged\\vim-matchup\\test\\issues\\33\\test.rb	/^class Time$/;"	c
Time	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -count=1 -nargs=? -complete=command Time :exe scriptease#time_command(<q-args>, <count>/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\commentmode.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\cursor.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\operator.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\syntax.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\textobject.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Todo list	plugged\\vim-matchup\\README.md	/^### Todo list$/;"	S
ToggleStripWhitespaceOnSave	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! ToggleStripWhitespaceOnSave call <SID>ToggleStripWhitespaceOnSave()$/;"	c
ToggleWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^command! ToggleWhitespace call <SID>ToggleWhitespace()$/;"	c
Token	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class Token(object):$/;"	c
TrailingNewline_TabStop_EndNL	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_EndNL(_VimTest):$/;"	c
TrailingNewline_TabStop_EndStartNL	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_EndStartNL(_VimTest):$/;"	c
TrailingNewline_TabStop_ExtraNL_ECR	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_ExtraNL_ECR(_VimTest):$/;"	c
TrailingNewline_TabStop_JustNL	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_JustNL(_VimTest):$/;"	c
TrailingNewline_TabStop_NLInsideStuffBehind	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_NLInsideStuffBehind(_VimTest):$/;"	c
TrailingNewline_TabStop_NotEndStartNL	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_NotEndStartNL(_VimTest):$/;"	c
TrailingNewline_TabStop_StartNL	plugged\\ultisnips\\test\\test_Chars.py	/^class TrailingNewline_TabStop_StartNL(_VimTest):$/;"	c
Transformation	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^class Transformation(Mirror, TextObjectTransformation):$/;"	c
TransformationToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class TransformationToken(Token):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR(_VimTest):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR($/;"	c
TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR($/;"	c
TransformationUsingBackspaceToDeleteDefaultValue_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValue_ECR(_VimTest):$/;"	c
Transformation_BackreferenceTwice_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_BackreferenceTwice_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_Backreference_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_Backreference_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIBothDefinedNegative_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CIBothDefinedNegative_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIBothDefinedPositive_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CIBothDefinedPositive_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIEscapedParensinReplace_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CIEscapedParensinReplace_ECR(_VimTest):$/;"	c
Transformation_CINewlines_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CINewlines_ECR(_VimTest):$/;"	c
Transformation_CITabstop_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CITabstop_ECR(_VimTest):$/;"	c
Transformation_CleverTransformLongLower_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CleverTransformLongLower_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformLongUpper_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CleverTransformLongUpper_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformLowercaseChar_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CleverTransformLowercaseChar_ExpectCorrectResult($/;"	c
Transformation_CleverTransformUpercaseChar_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_CleverTransformUpercaseChar_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_ConditionalInConditional_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_ConditionalInConditional_ECR(_VimTest):$/;"	c
Transformation_ConditionalInsertRWEllipsis_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_ConditionalInsertRWEllipsis_ECR(_VimTest):$/;"	c
Transformation_ConditionalInsertionSimple_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_ConditionalInsertionSimple_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_ConditionalWithBackslashBeforeDelimiter	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_ConditionalWithBackslashBeforeDelimiter(_VimTest):$/;"	c
Transformation_ConditionalWithBackslashBeforeDelimiter1	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_ConditionalWithBackslashBeforeDelimiter1(_VimTest):$/;"	c
Transformation_ConditionalWithEscapedDelimiter	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_ConditionalWithEscapedDelimiter(_VimTest):$/;"	c
Transformation_InsideTabLeaveAtDefault_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_InsideTabLeaveAtDefault_ECR(_VimTest):$/;"	c
Transformation_InsideTabOvertype_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_InsideTabOvertype_ECR(_VimTest):$/;"	c
Transformation_LowerCaseAsciiResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_LowerCaseAsciiResult(_VimTest):$/;"	c
Transformation_MultipleTransformations_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_MultipleTransformations_ECR(_VimTest):$/;"	c
Transformation_OptionIgnoreCase_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_OptionIgnoreCase_ECR(_VimTest):$/;"	c
Transformation_OptionMultiline_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_OptionMultiline_ECR(_VimTest):$/;"	c
Transformation_OptionReplaceGlobalMatchInReplace_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_OptionReplaceGlobalMatchInReplace_ECR(_VimTest):$/;"	c
Transformation_OptionReplaceGlobal_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_OptionReplaceGlobal_ECR(_VimTest):$/;"	c
Transformation_SimpleCaseAsciiResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_SimpleCaseAsciiResult(_VimTest):$/;"	c
Transformation_SimpleCaseNoTransform_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_SimpleCaseNoTransform_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_SimpleCaseTransformInFrontDefVal_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_SimpleCaseTransformInFrontDefVal_ECR(_VimTest):$/;"	c
Transformation_SimpleCaseTransformInFront_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_SimpleCaseTransformInFront_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_SimpleCase_ExpectCorrectResult	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_SimpleCase_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_TabIsAtEndAndDeleted1_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TabIsAtEndAndDeleted1_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndAndDeleted_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TabIsAtEndAndDeleted_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndNoTextLeave_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TabIsAtEndNoTextLeave_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndNoTextType_ECR	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TabIsAtEndNoTextType_ECR(_VimTest):$/;"	c
Transformation_TestKill_InsertAfter_NoKill	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TestKill_InsertAfter_NoKill(_VimTest):$/;"	c
Transformation_TestKill_InsertBefore_NoKill	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TestKill_InsertBefore_NoKill(_VimTest):$/;"	c
Transformation_TestKill_InsertBeginning_Kill	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TestKill_InsertBeginning_Kill(_VimTest):$/;"	c
Transformation_TestKill_InsertEnd_Kill	plugged\\ultisnips\\test\\test_Transformation.py	/^class Transformation_TestKill_InsertEnd_Kill(_VimTest):$/;"	c
TrimByNoise	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (items *ItemCollection) TrimByNoise() {$/;"	f	unknown:main.ItemCollection
TrimSpacesAtEndOfLines	plugged\\ultisnips\\test\\test_Chars.py	/^class TrimSpacesAtEndOfLines(_VimTest):$/;"	c
Troubleshooting	plugged\\vim-jsx\\README.md	/^Troubleshooting$/;"	s
Tutorials	plugged\\asyncrun.vim\\README.md	/^## Tutorials$/;"	s
U	autoload\\plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload\\plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UNIDECODE_ALERT_RAISED	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^UNIDECODE_ALERT_RAISED = False$/;"	v
UNIDECODE_IMPORTED	plugged\\ultisnips\\test\\util.py	/^    UNIDECODE_IMPORTED = False$/;"	v
UNIDECODE_IMPORTED	plugged\\ultisnips\\test\\util.py	/^    UNIDECODE_IMPORTED = True$/;"	v
UltiSnips	plugged\\ultisnips\\README.md	/^UltiSnips$/;"	c
UltiSnips#AddFiletypes	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#AddFiletypes(filetypes)$/;"	f
UltiSnips#AddSnippetWithPriority	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#AddSnippetWithPriority(trigger, value, description, options, filetype, prior/;"	f
UltiSnips#Anon	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#Anon(value, ...)$/;"	f
UltiSnips#CursorMoved	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#CursorMoved()$/;"	f
UltiSnips#Edit	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#Edit(bang, ...)$/;"	f
UltiSnips#ExpandSnippet	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#ExpandSnippet()$/;"	f
UltiSnips#ExpandSnippetOrJump	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#ExpandSnippetOrJump()$/;"	f
UltiSnips#FileTypeComplete	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#FileTypeComplete(arglead, cmdline, cursorpos)$/;"	f
UltiSnips#JumpBackwards	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#JumpBackwards()$/;"	f
UltiSnips#JumpForwards	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#JumpForwards()$/;"	f
UltiSnips#LeavingBuffer	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#LeavingBuffer()$/;"	f
UltiSnips#LeavingInsertMode	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#LeavingInsertMode()$/;"	f
UltiSnips#ListSnippets	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#ListSnippets()$/;"	f
UltiSnips#RefreshSnippets	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#RefreshSnippets()$/;"	f
UltiSnips#SaveLastVisualSelection	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#SaveLastVisualSelection() range$/;"	f
UltiSnips#SnippetsInCurrentScope	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#SnippetsInCurrentScope(...)$/;"	f
UltiSnips#TrackChange	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! UltiSnips#TrackChange()$/;"	f
UltiSnips#map_keys#MapKeys	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^function! UltiSnips#map_keys#MapKeys()$/;"	f
UltiSnipsAddFiletypes	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^command! -nargs=1 UltiSnipsAddFiletypes :call UltiSnips#AddFiletypes(<q-args>)$/;"	c
UltiSnipsEdit	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^command! -bang -nargs=? -complete=customlist,UltiSnips#FileTypeComplete UltiSnipsEdit$/;"	c
UltiSnipsFileSource	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^class UltiSnipsFileSource(SnippetFileSource):$/;"	c
UltiSnipsSnippetDefinition	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\ulti_snips.py	/^class UltiSnipsSnippetDefinition(SnippetDefinition):$/;"	c
UltiSnips_AutoTrigger	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^augroup UltiSnips_AutoTrigger$/;"	a
UltiSnips_Manager	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^UltiSnips_Manager = SnippetManager(  # pylint:disable=invalid-name$/;"	v
UmlautsBeforeTriggerAndCharsAfter	plugged\\ultisnips\\test\\test_Chars.py	/^class UmlautsBeforeTriggerAndCharsAfter(_UmlautsBase):$/;"	c
UnderscoreToCamelCase	plugin\\underscore.vim	/^function! UnderscoreToCamelCase(s)$/;"	f
Undo_ChangesInPlaceholder	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_ChangesInPlaceholder(_VimTest):$/;"	c
Undo_CompletelyUndoSnippet	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_CompletelyUndoSnippet(_VimTest):$/;"	c
Undo_RemoveEditInTabstop	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_RemoveEditInTabstop(_VimTest):$/;"	c
Undo_RemoveMultilineSnippet	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_RemoveMultilineSnippet(_VimTest):$/;"	c
Undo_RemoveOneSnippetByTime	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_RemoveOneSnippetByTime(_VimTest):$/;"	c
Undo_RemoveOneSnippetByTime2	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_RemoveOneSnippetByTime2(_VimTest):$/;"	c
Undo_RemoveWholeSnippet	plugged\\ultisnips\\test\\test_Editing.py	/^class Undo_RemoveWholeSnippet(_VimTest):$/;"	c
Unicode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def Unicode(str, encoding):$/;"	f
UnknownVariable	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^class UnknownVariable(Exception):$/;"	c
UnsupportedVariableExpression	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^class UnsupportedVariableExpression(Exception):$/;"	c
UpdateModifiedSnippetWithoutCursorMove1	plugged\\ultisnips\\test\\test_Editing.py	/^class UpdateModifiedSnippetWithoutCursorMove1(_VimTest):$/;"	c
UpdateModifiedSnippetWithoutCursorMove2	plugged\\ultisnips\\test\\test_Editing.py	/^class UpdateModifiedSnippetWithoutCursorMove2(_VimTest):$/;"	c
Usage	plugged\\LeaderF\\README.md	/^Usage$/;"	s
Usage	plugged\\phpcomplete.vim\\README.md	/^## Usage$/;"	s
Usage	plugged\\vim-better-whitespace\\README.md	/^## Usage$/;"	s
Usage	plugged\\vim-closetag\\README.md	/^#### Usage$/;"	t
Usage	plugged\\vim-editorconfig\\README.md	/^Usage$/;"	s
Usage	plugged\\vim-gitbranch\\README.md	/^## Usage$/;"	s
Usage	plugged\\vim-jsx\\README.md	/^Usage$/;"	s
User	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_return.php	/^class User {$/;"	c
UserClass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^class UserClass {$/;"	c
V.S.	plugged\\vim-editorconfig\\README.md	/^V.S.$/;"	s
VADER_OUTPUT_FILE	plugged\\ale\\run-tests.bat	/^set VADER_OUTPUT_FILE=%~dp0\\vader_output$/;"	v
VERSION	plugged\\html5.vim\\Makefile	/^VERSION=0.1$/;"	m
VERSION	plugged\\html5.vim\\config.mk	/^VERSION=0.26$/;"	m
VIMRUNTIME	plugged\\html5.vim\\Makefile	/^VIMRUNTIME=~\/.vim$/;"	m
ValueElements	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^typedef struct ValueElements$/;"	s	file:
ValueElements	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^}ValueElements;$/;"	t	typeref:struct:ValueElements	file:
Variables	plugged\\vim-localvimrc\\README.md	/^## Variables$/;"	s
Variables	plugged\\vim-matchup\\README.md	/^### Variables$/;"	S
Variables:	plugged\\asyncrun.vim\\README.md	/^#### Variables:$/;"	t
Ve	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Ve       :execute s:fi/;"	c
Ve	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Ve$/;"	c
Vedit	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vedit    :execute s:fi/;"	c
Vedit	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vedit$/;"	c
Vendor Snippets	plugged\\vim-snippets\\README.md	/^Vendor Snippets$/;"	s
Verbose	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -range=-1 -nargs=1 -complete=command Verbose$/;"	c
VerifyVimDict1	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class VerifyVimDict1(_VimTest):$/;"	c
VerifyVimDict2	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class VerifyVimDict2(_VimTest):$/;"	c
VerifyVimDict3	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class VerifyVimDict3(_VimTest):$/;"	c
Version 0.1	plugged\\html5.vim\\CHANGES.markdown	/^### Version 0.1$/;"	S
Version 0.1	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.1$/;"	s
Version 0.2	plugged\\html5.vim\\CHANGES.markdown	/^### Version 0.2$/;"	S
Version 0.2	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.2$/;"	s
Version 0.25	plugged\\html5.vim\\CHANGES.markdown	/^### Version 0.25$/;"	S
Version 0.26	plugged\\html5.vim\\CHANGES.markdown	/^### Version 0.26$/;"	S
Version 0.27	plugged\\html5.vim\\CHANGES.markdown	/^### Version 0.27$/;"	S
Version 0.27	plugged\\html5.vim\\README.md	/^### Version 0.27$/;"	S
Version 0.3	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.3$/;"	s
Version 0.4	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.4$/;"	s
Version 0.4.1	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.4.1$/;"	s
Version 0.4.2	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.4.2$/;"	s
Version 0.5	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.5$/;"	s
Version 0.5.1	plugged\\tagbar-phpctags.vim\\ChangeLog.md	/^Version 0.5.1$/;"	s
Version 5	plugged\\vim-ctrlspace\\README.md	/^### Version 5$/;"	S
Versions / dialects / ..	plugged\\vim-snippets\\README.md	/^Versions \/ dialects \/ ..$/;"	c
Vim 8 on Unix	plugged\\ale\\README.md	/^#### Vim 8 on Unix$/;"	t
Vim 8 on Windows	plugged\\ale\\README.md	/^#### Vim 8 on Windows$/;"	t
Vim Better Whitespace Plugin	plugged\\vim-better-whitespace\\README.md	/^# Vim Better Whitespace Plugin$/;"	c
VimBuffer	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^class VimBuffer(object):$/;"	c
VimBufferProxy	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^class VimBufferProxy(_vim.VimBuffer):$/;"	c
VimInterface	plugged\\ultisnips\\test\\vim_interface.py	/^class VimInterface(TempFileManager):$/;"	c
VimInterfaceTmux	plugged\\ultisnips\\test\\vim_interface.py	/^class VimInterfaceTmux(VimInterface):$/;"	c
VimInterfaceTmuxNeovim	plugged\\ultisnips\\test\\vim_interface.py	/^class VimInterfaceTmuxNeovim(VimInterfaceTmux):$/;"	c
VimInterfaceWindows	plugged\\ultisnips\\test\\vim_interface.py	/^class VimInterfaceWindows(VimInterface):$/;"	c
VimLCode	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_viml_code.py	/^class VimLCode(NoneditableTextObject):$/;"	c
VimLCodeToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class VimLCodeToken(Token):$/;"	c
VimPosition	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^class VimPosition(Position):$/;"	c
VimState	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^class VimState(object):$/;"	c
VimTestCase	plugged\\ultisnips\\test\\vim_test_case.py	/^class VimTestCase(unittest.TestCase, TempFileManager):$/;"	c
VirtualEdit	plugged\\ultisnips\\test\\test_Fixes.py	/^class VirtualEdit(_VimTest):$/;"	c
Visual	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_visual.py	/^class Visual(NoneditableTextObject, TextObjectTransformation):$/;"	c
VisualContentPreserver	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^class VisualContentPreserver(object):$/;"	c
VisualToken	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class VisualToken(Token):$/;"	c
VisualTransformationWithDefault_ExpandWithVisual	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualTransformationWithDefault_ExpandWithVisual(_VimTest):$/;"	c
VisualTransformationWithDefault_ExpandWithoutVisual	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualTransformationWithDefault_ExpandWithoutVisual(_VimTest):$/;"	c
VisualTransformation_InDefaultText_LineSelect_NoOverwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualTransformation_InDefaultText_LineSelect_NoOverwrite(_VimTest):$/;"	c
VisualTransformation_InDefaultText_LineSelect_Overwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualTransformation_InDefaultText_LineSelect_Overwrite(_VimTest):$/;"	c
VisualTransformation_LineSelect_Simple	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualTransformation_LineSelect_Simple(_VimTest):$/;"	c
VisualTransformation_SelectOneWord	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualTransformation_SelectOneWord(_VimTest):$/;"	c
VisualWithDefaultWithSlashes_ExpandWithoutVisual	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualWithDefaultWithSlashes_ExpandWithoutVisual(_VimTest):$/;"	c
VisualWithDefault_ExpandWithVisual	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualWithDefault_ExpandWithVisual(_VimTest):$/;"	c
VisualWithDefault_ExpandWithoutVisual	plugged\\ultisnips\\test\\test_Visual.py	/^class VisualWithDefault_ExpandWithoutVisual(_VimTest):$/;"	c
Visual_CrossOneLine	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_CrossOneLine(_VimTest):$/;"	c
Visual_ExpandTwice	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_ExpandTwice(_VimTest):$/;"	c
Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_Overwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_Overwrite(_VimTest):$/;"	c
Visual_InDefaultText_LineSelect_NoOverwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_LineSelect_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_LineSelect_Overwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_LineSelect_Overwrite(_VimTest):$/;"	c
Visual_InDefaultText_SelectOneWord	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_SelectOneWord(_VimTest):$/;"	c
Visual_InDefaultText_SelectOneWord_NoOverwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_InDefaultText_SelectOneWord_NoOverwrite(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentSimple	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_LineSelect_CheckIndentSimple(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentTwice	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_LineSelect_CheckIndentTwice(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentWithTS_NoOverwrite	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_LineSelect_CheckIndentWithTS_NoOverwrite(_VimTest):$/;"	c
Visual_LineSelect_DedentLine	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_LineSelect_DedentLine(_VimTest):$/;"	c
Visual_LineSelect_Simple	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_LineSelect_Simple(_VimTest):$/;"	c
Visual_LineSelect_WithTabStop	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_LineSelect_WithTabStop(_VimTest):$/;"	c
Visual_NoVisualSelection_Ignore	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_NoVisualSelection_Ignore(_VimTest):$/;"	c
Visual_SelectOneWord	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWord(_VimTest):$/;"	c
Visual_SelectOneWordExclusive	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWordExclusive(_VimTest):$/;"	c
Visual_SelectOneWordInclusive	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWordInclusive(_VimTest):$/;"	c
Visual_SelectOneWordWithTabstop_TillEndOfLine	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWordWithTabstop_TillEndOfLine(_VimTest):$/;"	c
Visual_SelectOneWord_Inword	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWord_Inword(_VimTest):$/;"	c
Visual_SelectOneWord_ProblemAfterTab	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWord_ProblemAfterTab(_VimTest):$/;"	c
Visual_SelectOneWord_TillEndOfLine	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWord_TillEndOfLine(_VimTest):$/;"	c
Visual_SelectOneWord_TwiceVisual	plugged\\ultisnips\\test\\test_Visual.py	/^class Visual_SelectOneWord_TwiceVisual(_VimTest):$/;"	c
Vopen	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vopen    :execute s:fi/;"	c
Vopen	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vopen$/;"	c
Vpedit	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vpedit   :execute s:fi/;"	c
Vpedit	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vpedit$/;"	c
Vread	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vread    :execute s:fi/;"	c
Vread	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vread$/;"	c
Vsplit	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vsplit   :execute s:fi/;"	c
Vsplit	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vsplit$/;"	c
Vtabedit	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vtabedit :execute s:fi/;"	c
Vtabedit	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vtabedit$/;"	c
Vundle	plugged\\phpcomplete.vim\\README.md	/^### Vundle$/;"	S
Vundle	plugged\\vim-jsx\\README.md	/^### Vundle$/;"	S
Vundle (https://github.com/gmarik/vundle)	plugged\\ctrlp-py-matcher\\README.md	/^### Vundle (https:\/\/github.com\/gmarik\/vundle)$/;"	S
Vvsplit	autoload\\pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vvsplit  :execute s:fi/;"	c
Vvsplit	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vvsplit$/;"	c
WGET_OPT	plugged\\html5.vim\\Makefile	/^WGET_OPT=-c -nv$/;"	m
WIN_ESCAPES	plugged\\ultisnips\\test\\vim_interface.py	/^    WIN_ESCAPES = ['+', '^', '%', '~', '[', ']', '<', '>', '(', ')']$/;"	v	class:VimInterfaceWindows
WIN_REPLACES	plugged\\ultisnips\\test\\vim_interface.py	/^    WIN_REPLACES = [$/;"	v	class:VimInterfaceWindows
What Tagbar is	plugged\\tagbar\\README.md	/^## What Tagbar is$/;"	s
What Tagbar is not	plugged\\tagbar\\README.md	/^## What Tagbar is not$/;"	s
What can you do with UltiSnips?	plugged\\ultisnips\\README.md	/^What can you do with UltiSnips?$/;"	s
What went wrong	plugged\\ale\\.github\\ISSUE_TEMPLATE\\report-a-bug.md	/^## What went wrong$/;"	s
Why use separate JSON highlighting instead of just Javascript?	plugged\\vim-json\\readme.md	/^Why use separate JSON highlighting instead of just Javascript?$/;"	s
WithChainResults	plugged\\ale\\autoload\\ale\\assert.vim	/^    command! -nargs=+ WithChainResults :call ale#assert#WithChainResults(<args>)$/;"	c
WriteBookmarks	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
X	autoload\\plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\implements.php	/^class X implements Foo {$/;"	c
Y	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\implements.php	/^class Y implements Foo, Foo2 {$/;"	c
ZAP	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_constants.php	/^define('ZAP', 42);$/;"	d	namespace:NS1
ZAP	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^const ZAP = '';$/;"	d	namespace:NS1
ZAP	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^const ZAP = '';$/;"	d	namespace:NS1
ZAPSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_constants.php	/^define('ZAPSUB', 6 * 7);$/;"	d	namespace:NS1\\SUBNS
ZAPSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^const ZAPSUB = '';$/;"	d	namespace:NS1\\SUBNS
ZAPSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^const ZAPSUB = '';$/;"	d	namespace:NS1\\SUBNS
ZAPSUBSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_constants.php	/^define('ZAPSUBSUB', 2 * 3 * 7);$/;"	d	namespace:NS1\\SUBNS\\SUBSUBNS
ZAPSUBSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^const ZAPSUBSUB = '';$/;"	d	namespace:NS1\\SUBNS\\SUBSUB
ZAPSUBSUB	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^const ZAPSUBSUB = '';$/;"	d	namespace:NS1\\SUBNS\\SUBSUB
[%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^nnoremap <buffer> <silent> [% :<C-U>call <SID>PyMatch('[%', 'n') <CR>$/;"	m
[%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^onoremap <buffer> <silent> [% v:<C-U>call <SID>PyMatch('[%', 'o') <CR>$/;"	m
[%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^vnoremap <buffer> <silent> [% :<C-U>call <SID>PyMatch('[%','v') <CR>m'gv``$/;"	m
[[	autoload\\plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[apt-vim](https://github.com/egalpin/apt-vim)	plugged\\nerdtree\\README.markdown	/^#### [apt-vim](https:\/\/github.com\/egalpin\/apt-vim)$/;"	t
[pathogen.vim](https://github.com/tpope/vim-pathogen)	plugged\\nerdtree\\README.markdown	/^#### [pathogen.vim](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	t
]%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^nnoremap <buffer> <silent> ]% :<C-U>call <SID>PyMatch(']%',  'n') <CR>$/;"	m
]%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^onoremap <buffer> <silent> ]% v:<C-U>call <SID>PyMatch(']%',  'o') <CR>$/;"	m
]%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^vnoremap <buffer> <silent> ]% :<C-U>call <SID>PyMatch(']%','v') <CR>m'gv``$/;"	m
]]	autoload\\plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
_AddFuncBase	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^class _AddFuncBase(_VimTest):$/;"	c
_AnonBase	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^class _AnonBase(_VimTest):$/;"	c
_Base	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class _Base(object):$/;"	c
_BaseGuessing	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^class _BaseGuessing(object):$/;"	c
_CONDITIONAL	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^_CONDITIONAL = re.compile(r"\\(\\?(\\d+):", re.DOTALL)$/;"	v
_CleverReplace	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^class _CleverReplace(object):$/;"	c
_DOLLAR	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^_DOLLAR = re.compile(r"\\$(\\d+)", re.DOTALL)$/;"	v
_ES_Base	plugged\\ultisnips\\test\\test_Selection.py	/^class _ES_Base(_VimTest):$/;"	c
_ExpandTabs	plugged\\ultisnips\\test\\test_Format.py	/^class _ExpandTabs(_VimTest):$/;"	c
_FormatoptionsBase	plugged\\ultisnips\\test\\test_Format.py	/^class _FormatoptionsBase(_VimTest):$/;"	c
_INDENT	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    _INDENT = re.compile(r"^[ \\t]*")$/;"	v	class:SnippetDefinition
_LONG_CASEFOLDINGS	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^_LONG_CASEFOLDINGS = re.compile(r"\\\\([UL].*?)\\\\E", re.DOTALL)$/;"	v
_ListAllSnippets	plugged\\ultisnips\\test\\test_ListSnippets.py	/^class _ListAllSnippets(_VimTest):$/;"	c
_MPBase	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^class _MPBase(object):$/;"	c
_MultiLineDefault	plugged\\ultisnips\\test\\test_Chars.py	/^class _MultiLineDefault(_VimTest):$/;"	c
_MultiWord_SnippetOptions_ExpandWordSnippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class _MultiWord_SnippetOptions_ExpandWordSnippets(_VimTest):$/;"	c
_MultipleMatches	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^class _MultipleMatches(_VimTest):$/;"	c
_No_Tab_Expand	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class _No_Tab_Expand(_VimTest):$/;"	c
_ONE_CHAR_CASE_SWITCH	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^_ONE_CHAR_CASE_SWITCH = re.compile(r"\\\\([ul].)", re.DOTALL)$/;"	v
_OS_Base	plugged\\ultisnips\\test\\test_Selection.py	/^class _OS_Base(_VimTest):$/;"	c
_ParseSnippets_MultiWord	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class _ParseSnippets_MultiWord(_VimTest):$/;"	c
_ParseSnippets_MultiWord_RE	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^class _ParseSnippets_MultiWord_RE(_VimTest):$/;"	c
_Placeholder	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^_Placeholder = namedtuple('_FrozenPlaceholder', ['current_text', 'start', 'end'])$/;"	v
_REPLACE_NON_WS	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_visual.py	/^_REPLACE_NON_WS = re.compile(r"[^ \\t]")$/;"	v
_Regex_Self	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class _Regex_Self(_VimTest):$/;"	c
_SelectModeMappings	plugged\\ultisnips\\test\\test_Selection.py	/^class _SelectModeMappings(_VimTest):$/;"	c
_SimpleExpands	plugged\\ultisnips\\test\\test_Expand.py	/^class _SimpleExpands(_VimTest):$/;"	c
_SnippetOptions_ExpandWordSnippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class _SnippetOptions_ExpandWordSnippets(_VimTest):$/;"	c
_SnippetUtilCursor	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^class _SnippetUtilCursor(object):$/;"	c
_TABS	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    _TABS = re.compile(r"^\\t*")$/;"	v	class:SnippetDefinition
_TOKEN_TO_TEXTOBJECT	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\snipmate.py	/^_TOKEN_TO_TEXTOBJECT = {$/;"	v
_TOKEN_TO_TEXTOBJECT	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\ulti_snips.py	/^_TOKEN_TO_TEXTOBJECT = {$/;"	v
_TabExpand_RealWorld	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^class _TabExpand_RealWorld(object):$/;"	c
_Tabs	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^class _Tabs(object):$/;"	c
_TextIterator	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^class _TextIterator(object):$/;"	c
_UNESCAPE	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^_UNESCAPE = re.compile(ur'&\\w+?;', re.UNICODE)$/;"	v
_UmlautsBase	plugged\\ultisnips\\test\\test_Chars.py	/^class _UmlautsBase(_VimTest):$/;"	c
_VimCursor	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^class _VimCursor(NoneditableTextObject):$/;"	c
_VimTest	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Autocommands.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Autotrigger.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Chars.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Completion.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Editing.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Expand.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Fixes.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Folding.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Format.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Interpolation.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_ListSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Mirror.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Movement.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Plugin.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Recursive.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Selection.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_SnipMate.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_SnippetActions.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_TabStop.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Transformation.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	plugged\\ultisnips\\test\\test_Visual.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VisualContent	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^_VisualContent = namedtuple('_VisualContent', ['mode', 'text'])$/;"	v
__ALLOWED_TOKENS	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\snipmate.py	/^__ALLOWED_TOKENS = [$/;"	v
__ALLOWED_TOKENS	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\ulti_snips.py	/^__ALLOWED_TOKENS = [$/;"	v
__ALLOWED_TOKENS_IN_TABSTOPS	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\snipmate.py	/^__ALLOWED_TOKENS_IN_TABSTOPS = [$/;"	v
__WHITESPACE_SPLIT	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^__WHITESPACE_SPLIT = re.compile(r"\\s")$/;"	v
__add__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __add__(self, pos):$/;"	m	class:Position
__add__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __add__(self, value):$/;"	m	class:SnippetUtil
__all__	autoload\\sftpsync\\python\\sftpsync.py	/^__all__ = ['sftpSync']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^__all__ = ['anyHub']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^__all__ = ['bufExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^__all__ = ['bufTagExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^__all__ = ['colorschemeExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer.py	/^__all__ = ['Explorer']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^__all__ = ['fileExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^__all__ = ['functionExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^__all__ = ['helpExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^__all__ = ['historyExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^__all__ = ['lineExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^__all__ = ['mru']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^__all__ = ['mruExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^__all__ = ['selfExplManager']$/;"	v
__all__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^__all__ = ['tagExplManager']$/;"	v
__call__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:OptionalAction
__construct	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public function __construct() {$/;"	f	class:UserClass
__construct	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\completion_in_function_insides.php	/^    public function __construct() {$/;"	f	class:Foo
__delitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __delitem__(self, key):$/;"	m	class:VimBufferProxy
__eq__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __eq__(self, other):$/;"	m	class:Position
__getitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def __getitem__(self, idx):$/;"	m	class:VimBuffer
__getitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __getitem__(self, key):$/;"	m	class:VimBufferProxy
__getitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __getitem__(self, index):$/;"	m	class:Position
__getitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __getitem__(self, index):$/;"	m	class:_SnippetUtilCursor
__getitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __getitem__(self, no):$/;"	m	class:_Tabs
__getslice__	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def __getslice__(self, i, j):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
__getslice__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __getslice__(self, i, j):$/;"	m	class:VimBufferProxy
__init__	autoload\\sftpsync\\python\\sftpsync.py	/^	def __init__(self):$/;"	m	class:SftpSync
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def __init__(self):$/;"	m	class:AnyExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def __init__(self):$/;"	m	class:AnyHub
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def __init__(self, category, config):$/;"	m	class:AnyExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def __init__(self,$/;"	m	class:OptionalAction
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    def __init__(self):$/;"	m	class:AsyncExecutor
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def __init__(self):$/;"	m	class:BufExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def __init__(self):$/;"	m	class:BufferExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def __init__(self):$/;"	m	class:BufTagExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def __init__(self):$/;"	m	class:BufTagExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def __init__(self):$/;"	m	class:LfCli
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def __init__(self):$/;"	m	class:ColorschemeExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def __init__(self):$/;"	m	class:ColorschemeExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def __init__(self):$/;"	m	class:FileExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def __init__(self):$/;"	m	class:FunctionExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def __init__(self):$/;"	m	class:FunctionExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def __init__(self, pattern, encoding):$/;"	m	class:FuzzyMatch
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def __init__(self):$/;"	m	class:HelpExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def __init__(self):$/;"	m	class:HelpExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def __init__(self):$/;"	m	class:HistoryExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def __init__(self):$/;"	m	class:HistoryExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def __init__(self, category,$/;"	m	class:LfInstance
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def __init__(self):$/;"	m	class:LineExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def __init__(self):$/;"	m	class:LineExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def __init__(self):$/;"	m	class:Manager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def __init__(self):$/;"	m	class:Mru
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def __init__(self):$/;"	m	class:MruExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def __init__(self):$/;"	m	class:MruExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def __init__(self):$/;"	m	class:SelfExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def __init__(self):$/;"	m	class:SelfExplorer
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def __init__(self):$/;"	m	class:TagExplManager
__init__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def __init__(self):$/;"	m	class:TagExplorer
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __init__(self, snippets_stack, vstate):$/;"	m	class:VimBufferProxy
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\indent_util.py	/^    def __init__(self):$/;"	m	class:IndentUtil
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __init__(self, line, col):$/;"	m	class:Position
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __init__(self, cursor):$/;"	m	class:_SnippetUtilCursor
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __init__(self, priority, trigger, value, description,$/;"	m	class:SnippetDefinition
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\snipmate.py	/^    def __init__(self, trigger, value, description, location):$/;"	m	class:SnipMateSnippetDefinition
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __init__(self, gen, indent):$/;"	m	class:Token
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __init__(self, text, offset):$/;"	m	class:_TextIterator
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def __init__(self):$/;"	m	class:SnippetSource
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_snippet_dictionary.py	/^    def __init__(self):$/;"	m	class:SnippetDictionary
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def __init__(self):$/;"	m	class:SnippetFileSource
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def __init__(self, filename, line_index, msg):$/;"	m	class:SnippetSyntaxError
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def __init__(self, expand_trigger, forward_trigger, backward_trigger):$/;"	m	class:SnippetManager
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^    def __init__(self, text):$/;"	m	class:LineIterator
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:EditableTextObject
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def __init__(self, parent, token_or_start, end=None,$/;"	m	class:TextObject
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_mirror.py	/^    def __init__(self, parent, tabstop, token):$/;"	m	class:Mirror
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:SnippetUtilForAction
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __init__(self, initial_indent, vmode, vtext, context, parent):$/;"	m	class:SnippetUtil
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __init__(self, parent, token):$/;"	m	class:PythonCode
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __init__(self, to):$/;"	m	class:_Tabs
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_shell_code.py	/^    def __init__(self, parent, token):$/;"	m	class:ShellCode
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def __init__(self, parent):$/;"	m	class:_VimCursor
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def __init__(self, snippet, parent, initial_text,$/;"	m	class:SnippetInstance
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_tabstop.py	/^    def __init__(self, parent, token, start=None, end=None):$/;"	m	class:TabStop
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^    def __init__(self, expression):$/;"	m	class:_CleverReplace
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^    def __init__(self, parent, ts, token):$/;"	m	class:Transformation
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^    def __init__(self, token):$/;"	m	class:TextObjectTransformation
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_viml_code.py	/^    def __init__(self, parent, token):$/;"	m	class:VimLCode
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_visual.py	/^    def __init__(self, parent, token):$/;"	m	class:Visual
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def __init__(self):$/;"	m	class:VimPosition
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def __init__(self):$/;"	m	class:VimState
__init__	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def __init__(self):$/;"	m	class:VisualContentPreserver
__init__	plugged\\ultisnips\\rplugin\\python3\\deoplete\\sources\\ultisnips.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	plugged\\ultisnips\\test\\vim_interface.py	/^    def __init__(self):$/;"	m	class:VimInterfaceWindows
__init__	plugged\\ultisnips\\test\\vim_interface.py	/^    def __init__(self, name=''):$/;"	m	class:TempFileManager
__init__	plugged\\ultisnips\\test\\vim_interface.py	/^    def __init__(self, vim_executable, name):$/;"	m	class:VimInterface
__init__	plugged\\ultisnips\\test\\vim_interface.py	/^    def __init__(self, vim_executable, session):$/;"	m	class:VimInterfaceTmux
__init__	plugged\\ultisnips\\test\\vim_interface.py	/^    def __init__(self, vim_executable, session):$/;"	m	class:VimInterfaceTmuxNeovim
__init__	plugged\\ultisnips\\test\\vim_test_case.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:VimTestCase
__iter__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __iter__(self):$/;"	m	class:_TextIterator
__iter__	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^    def __iter__(self):$/;"	m	class:LineIterator
__le__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __le__(self, other):$/;"	m	class:Position
__le__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def __le__(self, other):$/;"	m	class:TextObject
__len__	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def __len__(self):$/;"	m	class:VimBuffer
__len__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __len__(self):$/;"	m	class:VimBufferProxy
__len__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __len__(self):$/;"	m	class:_SnippetUtilCursor
__len__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_snippet_dictionary.py	/^    def __len__(self):$/;"	m	class:SnippetDictionary
__lshift__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __lshift__(self, other):$/;"	m	class:SnippetUtil
__lt__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __lt__(self, other):$/;"	m	class:Position
__lt__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def __lt__(self, other):$/;"	m	class:TextObject
__metaclass__	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    __metaclass__ = ABCMeta$/;"	v	class:Explorer	file:
__ne__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __ne__(self, other):$/;"	m	class:Position
__next__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __next__(self):$/;"	m	class:_TextIterator
__next__	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^    def __next__(self):$/;"	m	class:LineIterator
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __repr__(self):$/;"	m	class:Position
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __repr__(self):$/;"	m	class:SnippetDefinition
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:EndOfTextToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:EscapeCharToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:MirrorToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:PythonCodeToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:ShellCodeToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:TabStopToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:TransformationToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:VimLCodeToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def __repr__(self):$/;"	m	class:VisualToken
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def __repr__(self):$/;"	m	class:TextObject
__repr__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_tabstop.py	/^    def __repr__(self):$/;"	m	class:TabStop
__rshift__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __rshift__(self, other):$/;"	m	class:SnippetUtil
__setitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def __setitem__(self, idx, text):$/;"	m	class:VimBuffer
__setitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __setitem__(self, key, value):$/;"	m	class:VimBufferProxy
__setitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __setitem__(self, index, value):$/;"	m	class:_SnippetUtilCursor
__setitem__	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def __setitem__(self, no, value):$/;"	m	class:_Tabs
__setslice__	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def __setslice__(self, i, j, text):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
__setslice__	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def __setslice__(self, i, j, text):$/;"	m	class:VimBufferProxy
__str__	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def __str__(self):$/;"	m	class:_SnippetUtilCursor
__sub__	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def __sub__(self, pos):$/;"	m	class:Position
_accept	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _accept(self, file, mode, *args, **kwargs):$/;"	m	class:Manager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:AnyExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:BufExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:BufTagExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:ColorschemeExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:FunctionExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:HelpExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:HistoryExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:LineExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:Manager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:MruExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:SelfExplManager
_acceptSelection	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _acceptSelection(self, *args, **kwargs):$/;"	m	class:TagExplManager
_action_context	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _action_context(self):$/;"	m	class:SnippetManager
_add_argument	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _add_argument(self, parser, arg_list, positional_args):$/;"	m	class:AnyHub
_add_child	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _add_child(self, child):$/;"	m	class:EditableTextObject
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _afterEnter(self):$/;"	m	class:AnyExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _afterEnter(self):$/;"	m	class:BufExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _afterEnter(self):$/;"	m	class:BufTagExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _afterEnter(self):$/;"	m	class:ColorschemeExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _afterEnter(self):$/;"	m	class:FunctionExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _afterEnter(self):$/;"	m	class:HelpExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _afterEnter(self):$/;"	m	class:LineExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _afterEnter(self):$/;"	m	class:Manager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _afterEnter(self):$/;"	m	class:MruExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _afterEnter(self):$/;"	m	class:SelfExplManager
_afterEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _afterEnter(self):$/;"	m	class:TagExplManager
_afterExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _afterExit(self):$/;"	m	class:AnyExplManager
_afterExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _afterExit(self):$/;"	m	class:Manager
_apply_change	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def _apply_change(self, change):$/;"	m	class:VimBufferProxy
_argaddFiles	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _argaddFiles(self, files):$/;"	m	class:Manager
_argaddFiles	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _argaddFiles(self, files):$/;"	m	class:MruExplManager
_ask_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^def _ask_snippets(snippets):$/;"	f
_ask_user	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^def _ask_user(a, formatted):$/;"	f
_backspace	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _backspace(self):$/;"	m	class:LfCli
_bangEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _bangEnter(self):$/;"	m	class:AnyExplManager
_bangEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _bangEnter(self):$/;"	m	class:BufTagExplManager
_bangEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _bangEnter(self):$/;"	m	class:FunctionExplManager
_bangEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _bangEnter(self):$/;"	m	class:Manager
_beforeEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _beforeEnter(self):$/;"	m	class:AnyExplManager
_beforeEnter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _beforeEnter(self):$/;"	m	class:Manager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _beforeExit(self):$/;"	m	class:AnyExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _beforeExit(self):$/;"	m	class:BufExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _beforeExit(self):$/;"	m	class:BufTagExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _beforeExit(self):$/;"	m	class:ColorschemeExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _beforeExit(self):$/;"	m	class:FunctionExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _beforeExit(self):$/;"	m	class:HelpExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _beforeExit(self):$/;"	m	class:LineExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _beforeExit(self):$/;"	m	class:Manager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _beforeExit(self):$/;"	m	class:MruExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _beforeExit(self):$/;"	m	class:SelfExplManager
_beforeExit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _beforeExit(self):$/;"	m	class:TagExplManager
_before_test	plugged\\ultisnips\\test\\test_Fixes.py	/^    def _before_test(self):$/;"	m	class:NonUnicodeDataInUnnamedRegister
_before_test	plugged\\ultisnips\\test\\test_Plugin.py	/^    def _before_test(self):$/;"	m	class:Plugin_SuperTab_SimpleTest
_before_test	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:TestLangmapWithUtf8_ExpectCorrectResult
_before_test	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
_before_test	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:_AddFuncBase
_before_test	plugged\\ultisnips\\test\\vim_test_case.py	/^    def _before_test(self):$/;"	m	class:VimTestCase
_buildCmd	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _buildCmd(self, dir):$/;"	m	class:FileExplorer
_buildPattern	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _buildPattern(self):$/;"	m	class:LfCli
_buildPrompt	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _buildPrompt(self):$/;"	m	class:LfCli
_calc_end	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^def _calc_end(text, start):$/;"	f
_check_if_still_inside_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _check_if_still_inside_snippet(self):$/;"	m	class:SnippetManager
_check_version	plugged\\ultisnips\\test\\vim_interface.py	/^    def _check_version(self):$/;"	m	class:VimInterfaceTmux
_child_has_moved	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _child_has_moved(self, idx, pivot, diff):$/;"	m	class:EditableTextObject
_chomp	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_shell_code.py	/^def _chomp(string):$/;"	f
_cleanup	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _cleanup(self):$/;"	m	class:Manager
_clearHighlights	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _clearHighlights(self):$/;"	m	class:Manager
_clearHighlightsPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _clearHighlightsPos(self):$/;"	m	class:Manager
_clearLeft	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _clearLeft(self):$/;"	m	class:LfCli
_cmdExtension	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _cmdExtension(self, cmd):$/;"	m	class:Manager
_context_match	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def _context_match(self, visual_content):$/;"	m	class:SnippetDefinition
_createBufWindow	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def _createBufWindow(self, win_pos):$/;"	m	class:LfInstance
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _createHelp(self):$/;"	m	class:AnyExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _createHelp(self):$/;"	m	class:BufExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _createHelp(self):$/;"	m	class:BufTagExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _createHelp(self):$/;"	m	class:ColorschemeExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _createHelp(self):$/;"	m	class:FileExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _createHelp(self):$/;"	m	class:FunctionExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _createHelp(self):$/;"	m	class:HelpExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _createHelp(self):$/;"	m	class:LineExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _createHelp(self):$/;"	m	class:Manager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _createHelp(self):$/;"	m	class:MruExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _createHelp(self):$/;"	m	class:SelfExplManager
_createHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _createHelp(self):$/;"	m	class:TagExplManager
_createHelpHint	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _createHelpHint(self):$/;"	m	class:Manager
_create_file	plugged\\ultisnips\\test\\vim_test_case.py	/^    def _create_file(self, file_path, content):$/;"	m	class:VimTestCase
_create_transformations	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\ulti_snips.py	/^def _create_transformations(all_tokens, seen_ts):$/;"	f
_current_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _current_snippet(self):$/;"	m	class:SnippetManager
_current_snippet_is_done	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _current_snippet_is_done(self):$/;"	m	class:SnippetManager
_cursor_moved	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _cursor_moved(self):$/;"	m	class:SnippetManager
_default_action	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _default_action(self, category, positional_args, arguments, *args, **kwargs):$/;"	m	class:AnyHub
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _defineMaps(self):$/;"	m	class:AnyExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _defineMaps(self):$/;"	m	class:BufExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _defineMaps(self):$/;"	m	class:BufTagExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _defineMaps(self):$/;"	m	class:ColorschemeExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _defineMaps(self):$/;"	m	class:FileExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _defineMaps(self):$/;"	m	class:FunctionExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _defineMaps(self):$/;"	m	class:HelpExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def _defineMaps(self):$/;"	m	class:HistoryExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _defineMaps(self):$/;"	m	class:LineExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _defineMaps(self):$/;"	m	class:Manager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _defineMaps(self):$/;"	m	class:MruExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _defineMaps(self):$/;"	m	class:SelfExplManager
_defineMaps	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _defineMaps(self):$/;"	m	class:TagExplManager
_del_child	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _del_child(self, child):$/;"	m	class:EditableTextObject
_delete	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _delete(self):$/;"	m	class:LfCli
_disable_edits	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def _disable_edits(self):$/;"	m	class:VimBufferProxy
_do_edit	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _do_edit(self, cmd, ctab=None):$/;"	m	class:EditableTextObject
_do_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_base.py	/^    def _do_parse(parent, text, allowed_tokens):$/;"	f	function:tokenize_snippet_text	file:
_do_print	plugged\\ultisnips\\pythonx\\UltiSnips\\debug.py	/^    def _do_print(text_object, indent=''):$/;"	f	function:echo_to_hierarchy	file:
_do_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _do_snippet(self, snippet, before):$/;"	m	class:SnippetManager
_editable_children	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _editable_children(self):$/;"	m	class:EditableTextObject
_enable_edits	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def _enable_edits(self):$/;"	m	class:VimBufferProxy
_enterOpeningBuffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def _enterOpeningBuffer(self):$/;"	m	class:LfInstance
_escape	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.py	/^_escape = dict((c , "\\\\" + c) for c in ['^','$','.','{','}','(',')','[',']','\\\\','\/','+'])$/;"	v
_eval_code	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def _eval_code(self, code, additional_locals={}):$/;"	m	class:SnippetDefinition
_execute_action	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def _execute_action($/;"	m	class:SnippetDefinition
_exists	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _exists(self, path, dir):$/;"	m	class:FileExplorer
_expandGlob	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _expandGlob(self, type, glob):$/;"	m	class:FileExplorer
_extra_vim_config	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_AnonBase
_extra_vim_config	plugged\\ultisnips\\test\\test_Autocommands.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Autocommands
_extra_vim_config	plugged\\ultisnips\\test\\test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
_extra_vim_config	plugged\\ultisnips\\test\\test_Fixes.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ShiftWidthZero
_extra_vim_config	plugged\\ultisnips\\test\\test_Fixes.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:VirtualEdit
_extra_vim_config	plugged\\ultisnips\\test\\test_Folding.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
_extra_vim_config	plugged\\ultisnips\\test\\test_Folding.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PerlSyntaxFold
_extra_vim_config	plugged\\ultisnips\\test\\test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ProperIndenting_AutoIndentAndNewline_ECR
_extra_vim_config	plugged\\ultisnips\\test\\test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
_extra_vim_config	plugged\\ultisnips\\test\\test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_ExpandTabs
_extra_vim_config	plugged\\ultisnips\\test\\test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_FormatoptionsBase
_extra_vim_config	plugged\\ultisnips\\test\\test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentEtSw
_extra_vim_config	plugged\\ultisnips\\test\\test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentEtSwOffset
_extra_vim_config	plugged\\ultisnips\\test\\test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentNoetSwTs
_extra_vim_config	plugged\\ultisnips\\test\\test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_OptExists
_extra_vim_config	plugged\\ultisnips\\test\\test_Movement.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:CursorMovement_BS_InEditMode
_extra_vim_config	plugged\\ultisnips\\test\\test_Plugin.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Plugin_SuperTab_SimpleTest
_extra_vim_config	plugged\\ultisnips\\test\\test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_ES_Base
_extra_vim_config	plugged\\ultisnips\\test\\test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_OS_Base
_extra_vim_config	plugged\\ultisnips\\test\\test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_SelectModeMappings
_extra_vim_config	plugged\\ultisnips\\test\\test_SnipMate.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:snipMate_Disabled
_extra_vim_config	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET
_extra_vim_config	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_Leading_Spaces
_extra_vim_config	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_SW
_extra_vim_config	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_SW_TS
_extra_vim_config	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_No_TS
_extra_vim_config	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_RealWorld
_extra_vim_config	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:AddNewSnippetSource
_extra_vim_config	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:TestNonEmptyLangmap_ExpectCorrectResult
_extra_vim_config	plugged\\ultisnips\\test\\test_Visual.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Visual_SelectOneWordExclusive
_extra_vim_config	plugged\\ultisnips\\test\\vim_test_case.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:VimTestCase
_file_to_edit	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _file_to_edit(self, requested_ft, bang):$/;"	m	class:SnippetManager
_filter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _filter(self, step, filter_method, content, is_continue):$/;"	m	class:Manager
_find_all_snippet_directories	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^def _find_all_snippet_directories():$/;"	f
_find_closing_brace	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^def _find_closing_brace(string, start_pos):$/;"	f
_find_recursive	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^        def _find_recursive(obj):$/;"	f	member:SnippetInstance.update_textobjects	file:
_formatResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _formatResult(self, buffer, result):$/;"	m	class:BufTagExplorer
_formatResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _formatResult(self, buffer, result):$/;"	m	class:FunctionExplorer
_fuzzyFilter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _fuzzyFilter(self, is_full_path, get_weight, iterable):$/;"	m	class:BufTagExplManager
_fuzzyFilter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _fuzzyFilter(self, is_full_path, get_weight, iterable):$/;"	m	class:Manager
_fuzzySearch	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _fuzzySearch(self, content, is_continue, step):$/;"	m	class:Manager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:AnyExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:BufExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:BufTagExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:ColorschemeExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:FunctionExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:HelpExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:HistoryExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:LineExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getDigest(self, line, mode):$/;"	m	class:Manager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:MruExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:SelfExplManager
_getDigest	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _getDigest(self, line, mode):$/;"	m	class:TagExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:AnyExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:BufExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:BufTagExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:ColorschemeExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:FunctionExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:HelpExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:HistoryExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:LineExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:Manager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:MruExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:SelfExplManager
_getDigestStartPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _getDigestStartPos(self, line, mode):$/;"	m	class:TagExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _getExplClass(self):$/;"	m	class:AnyExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def _getExplClass(self):$/;"	m	class:BufExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getExplClass(self):$/;"	m	class:BufTagExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _getExplClass(self):$/;"	m	class:ColorschemeExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _getExplClass(self):$/;"	m	class:FileExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _getExplClass(self):$/;"	m	class:FunctionExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _getExplClass(self):$/;"	m	class:HelpExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def _getExplClass(self):$/;"	m	class:HistoryExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _getExplClass(self):$/;"	m	class:LineExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getExplClass(self):$/;"	m	class:Manager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def _getExplClass(self):$/;"	m	class:MruExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _getExplClass(self):$/;"	m	class:SelfExplManager
_getExplClass	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def _getExplClass(self):$/;"	m	class:TagExplManager
_getExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getExplorer(self):$/;"	m	class:Manager
_getFileList	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _getFileList(self, dir):$/;"	m	class:FileExplorer
_getFiles	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _getFiles(self, dir):$/;"	m	class:FileExplorer
_getFilesFromCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _getFilesFromCache(self):$/;"	m	class:FileExplorer
_getFunctionList	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _getFunctionList(self):$/;"	m	class:FunctionExplorer
_getFunctionResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _getFunctionResult(self, buffer):$/;"	m	class:FunctionExplorer
_getInstance	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getInstance(self):$/;"	m	class:Manager
_getLineList	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def _getLineList(self, buffer):$/;"	m	class:LineExplorer
_getList	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getList(self, pairs):$/;"	m	class:BufTagExplManager
_getList	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getList(self, pairs):$/;"	m	class:Manager
_getTagList	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getTagList(self):$/;"	m	class:BufTagExplorer
_getTagResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getTagResult(self, buffer):$/;"	m	class:BufTagExplorer
_getUnit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _getUnit(self):$/;"	m	class:BufTagExplManager
_getUnit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _getUnit(self):$/;"	m	class:Manager
_get_all_snippet_files_for	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:SnippetFileSource
_get_all_snippet_files_for	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:SnipMateFileSource
_get_all_snippet_files_for	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:UltiSnipsFileSource
_get_diff	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def _get_diff(self, start, end, new_value):$/;"	m	class:VimBufferProxy
_get_existing_deep_extends	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def _get_existing_deep_extends(self, base_filetypes):$/;"	m	class:SnippetSource
_get_file_to_edit	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _get_file_to_edit(self, snippet_dir, requested_ft, bang,$/;"	m	class:SnippetManager
_get_line_diff	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def _get_line_diff(self, line_number, before, after):$/;"	m	class:VimBufferProxy
_get_next_tab	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _get_next_tab(self, number):$/;"	m	class:EditableTextObject
_get_pos	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def _get_pos(name):$/;"	f
_get_prev_tab	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _get_prev_tab(self, number):$/;"	m	class:EditableTextObject
_get_tabstop	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _get_tabstop(self, requester, number):$/;"	m	class:EditableTextObject
_get_tabstop	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def _get_tabstop(self, requester, no):$/;"	m	class:SnippetInstance
_get_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_mirror.py	/^    def _get_text(self):$/;"	m	class:Mirror
_get_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^    def _get_text(self):$/;"	m	class:Transformation
_get_tmp	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_shell_code.py	/^def _get_tmp():$/;"	f
_handle_failure	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _handle_failure(self, trigger):$/;"	m	class:SnippetManager
_handle_snippet_or_global	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^def _handle_snippet_or_global($/;"	f
_hideHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _hideHelp(self):$/;"	m	class:Manager
_highlight	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _highlight(self, is_full_path, get_highlights):$/;"	m	class:Manager
_highlightRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _highlightRefine(self, first_get_highlights, get_highlights):$/;"	m	class:Manager
_highlightStl	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def _highlightStl(self):$/;"	m	class:LfInstance
_initCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _initCache(self):$/;"	m	class:FileExplorer
_initCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def _initCache(self):$/;"	m	class:Mru
_initStlVar	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def _initStlVar(self):$/;"	m	class:LfInstance
_insert	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _insert(self, ch):$/;"	m	class:LfCli
_is_pos_zero	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def _is_pos_zero(pos):$/;"	f
_join	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _join(self, cmdline):$/;"	m	class:LfCli
_jump	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _jump(self, backwards=False):$/;"	m	class:SnippetManager
_leaving_buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _leaving_buffer(self):$/;"	m	class:SnippetManager
_leaving_insert_mode	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _leaving_insert_mode(self):$/;"	m	class:SnippetManager
_leftClick	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _leftClick(self):$/;"	m	class:Manager
_link_file	plugged\\ultisnips\\test\\vim_test_case.py	/^    def _link_file(self, source, relative_destination):$/;"	m	class:VimTestCase
_load_snippets_for	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def _load_snippets_for(self, ft):$/;"	m	class:SnippetFileSource
_make_debug_exception	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def _make_debug_exception(self, e, code=''):$/;"	m	class:SnippetDefinition
_move	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _move(self, pivot, diff):$/;"	m	class:EditableTextObject
_move	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _move(self, pivot, diff):$/;"	m	class:TextObject
_multi_char_case_change	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^        def _multi_char_case_change(match):$/;"	f	member:_CleverReplace.replace	file:
_nearestAncestor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _nearestAncestor(self, markers, path):$/;"	m	class:FileExplManager
_needPreview	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _needPreview(self, preview):$/;"	m	class:Manager
_needs_update	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def _needs_update(self, ft):$/;"	m	class:SnippetFileSource
_one_char_case_change	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^        def _one_char_case_change(match):$/;"	f	member:_CleverReplace.replace	file:
_pageDown	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _pageDown(self):$/;"	m	class:Manager
_pageUp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _pageUp(self):$/;"	m	class:Manager
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:EscapeCharToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:MirrorToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:PythonCodeToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:ShellCodeToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:TabStopToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:Token
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:TransformationToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:VimLCodeToken
_parse	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:VisualToken
_parse_comments	plugged\\vim-snippets\\pythonx\\vimsnippets.py	/^def _parse_comments(s):$/;"	f
_parse_number	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^def _parse_number(stream):$/;"	f
_parse_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^def _parse_snippet(line, lines, filename):$/;"	f
_parse_snippet_file	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:SnippetFileSource
_parse_snippet_file	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:SnipMateFileSource
_parse_snippet_file	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^def _parse_snippet_file(content, full_filename):$/;"	f
_parse_snippet_file	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:UltiSnipsFileSource
_parse_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def _parse_snippets(self, ft, filename):$/;"	m	class:SnippetFileSource
_parse_snippets_file	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^def _parse_snippets_file(data, filename):$/;"	f
_parse_snippets_file	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^def _parse_snippets_file(data, filename):$/;"	f
_parse_till_closing_brace	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^def _parse_till_closing_brace(stream):$/;"	f
_parse_till_unescaped_char	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^def _parse_till_unescaped_char(stream, chars):$/;"	f
_paste	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _paste(self):$/;"	m	class:LfCli
_place_initial_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^        def _place_initial_text(obj):$/;"	f	member:SnippetInstance.replace_initial_text	file:
_previewResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _previewResult(self, preview):$/;"	m	class:AnyExplManager
_previewResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _previewResult(self, preview):$/;"	m	class:BufTagExplManager
_previewResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def _previewResult(self, preview):$/;"	m	class:ColorschemeExplManager
_previewResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _previewResult(self, preview):$/;"	m	class:FunctionExplManager
_previewResult	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _previewResult(self, preview):$/;"	m	class:Manager
_re_match	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def _re_match(self, trigger):$/;"	m	class:SnippetDefinition
_readerThread	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    def _readerThread(self, fd, queue, is_out):$/;"	m	class:AsyncExecutor
_refineFilter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _refineFilter(self, first_get_weight, get_weight, iterable):$/;"	m	class:BufTagExplManager
_refineFilter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _refineFilter(self, first_get_weight, get_weight, iterable):$/;"	m	class:Manager
_refresh	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _refresh(self):$/;"	m	class:FileExplorer
_refresh_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _refresh_snippets(self):$/;"	m	class:SnippetManager
_regexFilter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _regexFilter(self, iterable):$/;"	m	class:BufTagExplManager
_regexFilter	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _regexFilter(self, iterable):$/;"	m	class:Manager
_regexSearch	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _regexSearch(self, content, is_continue, step):$/;"	m	class:Manager
_reinit	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _reinit(self):$/;"	m	class:SnippetManager
_relocateCursor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _relocateCursor(self):$/;"	m	class:BufTagExplManager
_relocateCursor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _relocateCursor(self):$/;"	m	class:FunctionExplManager
_replace_conditional	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^def _replace_conditional(match, string):$/;"	f
_replace_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^def _replace_text(buf, start, end, text):$/;"	f
_reset	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def _reset(self, cur):$/;"	m	class:SnippetUtil
_resetAutochdir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _resetAutochdir(self):$/;"	m	class:Manager
_resetHighlights	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _resetHighlights(self):$/;"	m	class:Manager
_restoreOrigCwd	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _restoreOrigCwd(self):$/;"	m	class:FileExplManager
_restoreOrigCwd	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _restoreOrigCwd(self):$/;"	m	class:Manager
_run_shell_command	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_shell_code.py	/^def _run_shell_command(cmd, tmpdir):$/;"	f
_rv_changed	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def _rv_changed(self):$/;"	m	class:SnippetUtil
_save_last_visual_selection	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _save_last_visual_selection(self):$/;"	m	class:SnippetManager
_search	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _search(self, content, is_continue=False, step=30000):$/;"	m	class:Manager
_send	plugged\\ultisnips\\test\\vim_interface.py	/^    def _send(self, s):$/;"	m	class:VimInterfaceTmux
_setAttributes	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def _setAttributes(self):$/;"	m	class:LfInstance
_setAutochdir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _setAutochdir(self):$/;"	m	class:Manager
_setDefaultMode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _setDefaultMode(self):$/;"	m	class:LfCli
_setStatusline	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def _setStatusline(self):$/;"	m	class:LfInstance
_setStlMode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _setStlMode(self, **kwargs):$/;"	m	class:Manager
_set_pos	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def _set_pos(name, pos):$/;"	f
_setup_inner_state	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _setup_inner_state(self):$/;"	m	class:SnippetManager
_snip_quote	plugged\\ultisnips\\test\\test_Chars.py	/^def _snip_quote(qt):$/;"	f
_snipmate_files_for	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^def _snipmate_files_for(ft):$/;"	f
_snips	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _snips(self, before, partial, autotrigger_only=False):$/;"	m	class:SnippetManager
_split_conditional	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^def _split_conditional(string):$/;"	f
_splitall	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\snipmate.py	/^def _splitall(path):$/;"	f
_supportsRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def _supportsRefine(self):$/;"	m	class:AnyExplManager
_supportsRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _supportsRefine(self):$/;"	m	class:BufTagExplManager
_supportsRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def _supportsRefine(self):$/;"	m	class:FunctionExplManager
_supportsRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def _supportsRefine(self):$/;"	m	class:HelpExplManager
_supportsRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _supportsRefine(self):$/;"	m	class:Manager
_supportsRefine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def _supportsRefine(self):$/;"	m	class:SelfExplManager
_teardown_inner_state	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _teardown_inner_state(self):$/;"	m	class:SnippetManager
_toBegin	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _toBegin(self):$/;"	m	class:LfCli
_toDown	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _toDown(self):$/;"	m	class:BufTagExplManager
_toDown	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _toDown(self):$/;"	m	class:Manager
_toEnd	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _toEnd(self):$/;"	m	class:LfCli
_toLeft	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _toLeft(self):$/;"	m	class:LfCli
_toRight	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def _toRight(self):$/;"	m	class:LfCli
_toUp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def _toUp(self):$/;"	m	class:BufTagExplManager
_toUp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def _toUp(self):$/;"	m	class:Manager
_track_change	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _track_change(self):$/;"	m	class:SnippetManager
_transform	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^    def _transform(self, text):$/;"	m	class:TextObjectTransformation
_try_expand	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def _try_expand(self, autotrigger_only=False):$/;"	m	class:SnippetManager
_unmap_select_mode_mapping	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def _unmap_select_mode_mapping():$/;"	f
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _update(self, done, buf):$/;"	m	class:EditableTextObject
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _update(self, done, buf):$/;"	m	class:NoneditableTextObject
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def _update(self, done, buf):$/;"	m	class:TextObject
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_mirror.py	/^    def _update(self, done, buf):$/;"	m	class:Mirror
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def _update(self, done, buf):$/;"	m	class:PythonCode
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_shell_code.py	/^    def _update(self, done, buf):$/;"	m	class:ShellCode
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_viml_code.py	/^    def _update(self, done, buf):$/;"	m	class:VimLCode
_update	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_visual.py	/^    def _update(self, done, buf):$/;"	m	class:Visual
_vim_dec	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def _vim_dec(string):$/;"	f
_vim_enc	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def _vim_enc(bytearray):$/;"	f
_vim_enc	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def _vim_enc(string):$/;"	f
_vim_line_with_eol	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^        _vim_line_with_eol = lambda ln: _vim.buf[ln] + '\\n'$/;"	f	member:VisualContentPreserver.conserve	file:
_words_for_line	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^def _words_for_line(trigger, before, num_words=None):$/;"	f
_writeCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def _writeCache(self, content):$/;"	m	class:FileExplorer
a	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> a             :exec g:Lf_py "fileExplManager.selectAll()"<CR>$/;"	m
a	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> a             :exec g:Lf_py "mruExplManager.selectAll()"<CR>$/;"	m
a	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> a <NOP>$/;"	m
a	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^$a = new$/;"	v
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'First Line\\nSecond Line'$/;"	v	class:TestWithNewline
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'Vorne hallo Hinten'$/;"	v	class:TestCheapDelete
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'Vorne hallo Hinten'$/;"	v	class:TestRealLife1
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'hallo Blah mitte=sdfdsfsd\\nhallo kjsdhfjksdhfkjhsdfkh mittekjshdkfhkhsdfdsf'$/;"	v	class:TestCrash
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'hallo End Beginning'$/;"	v	class:TestRealLife
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'hi first line\\nsecond line first line\\nsecond line world'$/;"	v	class:MultiLine
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'stdin.h'$/;"	v	class:MatchIsTooCheap
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a = 'this is it this is it this is it'$/;"	v	class:TestUltiSnipsProblem
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = '', ''$/;"	v	class:TestEmptyString
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'Hello', 'Hello\\nWorld\\nWorld\\nWorld'$/;"	v	class:TestLotsaNewlines
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'abc', 'def'$/;"	v	class:TestNoSubstring
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'abcdef', 'abcdef'$/;"	v	class:TestAllMatch
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'hasomelongertextbl', 'hol'$/;"	v	class:TestCommonCharacters
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar1
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_BackspaceOneChar
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_DeleteOneChar
a	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = [], []$/;"	v	class:TestGuessing_Noop0
a	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let a = " if   endif "$/;"	v
a/html2vimdoc.py	plugged\\vim-localvimrc\\support\\vim-tools.patch	/^--- a\/html2vimdoc.py$/;"	m
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role = {}$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-v/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby'/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_r/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abutton_dec	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|tex/;"	v
accept	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def accept(self, mode=''):$/;"	m	class:Manager
addSelections	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def addSelections(self):$/;"	m	class:Manager
add_buffer_filetypes	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def add_buffer_filetypes(self, ft):$/;"	m	class:SnippetManager
add_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_snippet_dictionary.py	/^    def add_snippet(self, snippet):$/;"	m	class:SnippetDictionary
add_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\added.py	/^    def add_snippet(self, ft, snippet):$/;"	m	class:AddedSnippetsSource
add_snippet	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def add_snippet(self, trigger, value, description,$/;"	m	class:SnippetManager
akey	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    akey = "'te{}stâ'".format('"')$/;"	v	class:VerifyVimDict2
akey	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    akey = '"te{}stâ"'.format("'")$/;"	v	class:VerifyVimDict3
ale#Env	plugged\\ale\\autoload\\ale.vim	/^function! ale#Env(variable_name, value) abort$/;"	f
ale#Escape	plugged\\ale\\autoload\\ale.vim	/^function! ale#Escape(str) abort$/;"	f
ale#FileTooLarge	plugged\\ale\\autoload\\ale.vim	/^function! ale#FileTooLarge(buffer) abort$/;"	f
ale#GetLocItemMessage	plugged\\ale\\autoload\\ale.vim	/^function! ale#GetLocItemMessage(item, format_string) abort$/;"	f
ale#Has	plugged\\ale\\autoload\\ale.vim	/^function! ale#Has(feature) abort$/;"	f
ale#Lint	plugged\\ale\\autoload\\ale.vim	/^function! ale#Lint(...) abort$/;"	f
ale#Pad	plugged\\ale\\autoload\\ale.vim	/^function! ale#Pad(string) abort$/;"	f
ale#Queue	plugged\\ale\\autoload\\ale.vim	/^function! ale#Queue(delay, ...) abort$/;"	f
ale#ResetLintFileMarkers	plugged\\ale\\autoload\\ale.vim	/^function! ale#ResetLintFileMarkers() abort$/;"	f
ale#Set	plugged\\ale\\autoload\\ale.vim	/^function! ale#Set(variable_name, default) abort$/;"	f
ale#ShouldDoNothing	plugged\\ale\\autoload\\ale.vim	/^function! ale#ShouldDoNothing(buffer) abort$/;"	f
ale#Var	plugged\\ale\\autoload\\ale.vim	/^function! ale#Var(buffer, variable_name) abort$/;"	f
ale#VarFunc	plugged\\ale\\autoload\\ale.vim	/^function! ale#VarFunc(variable_name) abort$/;"	f
ale#assert#LSPLanguage	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#LSPLanguage(expected_language) abort$/;"	f
ale#assert#LSPOptions	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#LSPOptions(expected_options) abort$/;"	f
ale#assert#LSPProject	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#LSPProject(expected_root) abort$/;"	f
ale#assert#Linter	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#Linter(expected_executable, expected_command) abort$/;"	f
ale#assert#LinterNotExecuted	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#LinterNotExecuted() abort$/;"	f
ale#assert#SetUpLinterTest	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#SetUpLinterTest(filetype, name) abort$/;"	f
ale#assert#TearDownLinterTest	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#TearDownLinterTest() abort$/;"	f
ale#assert#WithChainResults	plugged\\ale\\autoload\\ale\\assert.vim	/^function! ale#assert#WithChainResults(...) abort$/;"	f
ale#balloon#Disable	plugged\\ale\\autoload\\ale\\balloon.vim	/^function! ale#balloon#Disable() abort$/;"	f
ale#balloon#Enable	plugged\\ale\\autoload\\ale\\balloon.vim	/^function! ale#balloon#Enable() abort$/;"	f
ale#balloon#Expr	plugged\\ale\\autoload\\ale\\balloon.vim	/^function! ale#balloon#Expr() abort$/;"	f
ale#balloon#MessageForPos	plugged\\ale\\autoload\\ale\\balloon.vim	/^function! ale#balloon#MessageForPos(bufnr, lnum, col) abort$/;"	f
ale#c#FindCompileCommands	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#FindCompileCommands(buffer) abort$/;"	f
ale#c#FindLocalHeaderPaths	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#FindLocalHeaderPaths(buffer) abort$/;"	f
ale#c#FindProjectRoot	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#FindProjectRoot(buffer) abort$/;"	f
ale#c#FlagsFromCompileCommands	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#FlagsFromCompileCommands(buffer, compile_commands_file) abort$/;"	f
ale#c#GetCFlags	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#GetCFlags(buffer, output) abort$/;"	f
ale#c#GetMakeCommand	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#GetMakeCommand(buffer) abort$/;"	f
ale#c#IncludeOptions	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#IncludeOptions(include_paths) abort$/;"	f
ale#c#ParseCFlags	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#ParseCFlags(path_prefix, cflag_line) abort$/;"	f
ale#c#ParseCFlagsFromMakeOutput	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#ParseCFlagsFromMakeOutput(buffer, make_output) abort$/;"	f
ale#c#ParseCompileCommandsFlags	plugged\\ale\\autoload\\ale\\c.vim	/^function! ale#c#ParseCompileCommandsFlags(buffer, dir, json_list) abort$/;"	f
ale#command#FormatCommand	plugged\\ale\\autoload\\ale\\command.vim	/^function! ale#command#FormatCommand(buffer, executable, command, pipe_file_if_needed) abort$/;"	f
ale#completion#Disable	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#Disable() abort$/;"	f
ale#completion#Done	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#Done() abort$/;"	f
ale#completion#Enable	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#Enable() abort$/;"	f
ale#completion#Filter	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#Filter(buffer, suggestions, prefix) abort$/;"	f
ale#completion#GetCompletions	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#GetCompletions() abort$/;"	f
ale#completion#GetPrefix	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#GetPrefix(filetype, line, column) abort$/;"	f
ale#completion#GetTriggerCharacter	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#GetTriggerCharacter(filetype, prefix) abort$/;"	f
ale#completion#HandleLSPResponse	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#completion#HandleTSServerResponse	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#completion#NullFilter	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#NullFilter(buffer, item) abort$/;"	f
ale#completion#OmniFunc	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#OmniFunc(findstart, base) abort$/;"	f
ale#completion#ParseLSPCompletions	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#ParseLSPCompletions(response) abort$/;"	f
ale#completion#ParseTSServerCompletionEntryDetails	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#ParseTSServerCompletionEntryDetails(response) abort$/;"	f
ale#completion#ParseTSServerCompletions	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#ParseTSServerCompletions(response) abort$/;"	f
ale#completion#Queue	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#Queue() abort$/;"	f
ale#completion#RestoreCompletionOptions	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#RestoreCompletionOptions() abort$/;"	f
ale#completion#Show	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#Show(response, completion_parser) abort$/;"	f
ale#completion#StopTimer	plugged\\ale\\autoload\\ale\\completion.vim	/^function! ale#completion#StopTimer() abort$/;"	f
ale#completion#python#CompletionItemFilter	plugged\\ale\\autoload\\ale\\completion\\python.vim	/^function! ale#completion#python#CompletionItemFilter(buffer, item) abort$/;"	f
ale#cursor#EchoCursorWarning	plugged\\ale\\autoload\\ale\\cursor.vim	/^function! ale#cursor#EchoCursorWarning(...) abort$/;"	f
ale#cursor#EchoCursorWarningWithDelay	plugged\\ale\\autoload\\ale\\cursor.vim	/^function! ale#cursor#EchoCursorWarningWithDelay() abort$/;"	f
ale#cursor#ShowCursorDetail	plugged\\ale\\autoload\\ale\\cursor.vim	/^function! ale#cursor#ShowCursorDetail() abort$/;"	f
ale#cursor#TruncatedEcho	plugged\\ale\\autoload\\ale\\cursor.vim	/^function! ale#cursor#TruncatedEcho(original_message) abort$/;"	f
ale#debugging#Info	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! ale#debugging#Info() abort$/;"	f
ale#debugging#InfoToClipboard	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! ale#debugging#InfoToClipboard() abort$/;"	f
ale#debugging#InfoToFile	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! ale#debugging#InfoToFile(filename) abort$/;"	f
ale#definition#ClearLSPData	plugged\\ale\\autoload\\ale\\definition.vim	/^function! ale#definition#ClearLSPData() abort$/;"	f
ale#definition#GetMap	plugged\\ale\\autoload\\ale\\definition.vim	/^function! ale#definition#GetMap() abort$/;"	f
ale#definition#GoTo	plugged\\ale\\autoload\\ale\\definition.vim	/^function! ale#definition#GoTo(options) abort$/;"	f
ale#definition#HandleLSPResponse	plugged\\ale\\autoload\\ale\\definition.vim	/^function! ale#definition#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#definition#HandleTSServerResponse	plugged\\ale\\autoload\\ale\\definition.vim	/^function! ale#definition#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#definition#SetMap	plugged\\ale\\autoload\\ale\\definition.vim	/^function! ale#definition#SetMap(map) abort$/;"	f
ale#engine#Cleanup	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#Cleanup(buffer) abort$/;"	f
ale#engine#CreateDirectory	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#CreateDirectory(buffer) abort$/;"	f
ale#engine#CreateFile	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#CreateFile(buffer) abort$/;"	f
ale#engine#EscapeCommandPart	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#EscapeCommandPart(command_part) abort$/;"	f
ale#engine#FixLocList	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#FixLocList(buffer, linter_name, loclist) abort$/;"	f
ale#engine#GetLoclist	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#GetLoclist(buffer) abort$/;"	f
ale#engine#HandleLoclist	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#HandleLoclist(linter_name, buffer, loclist) abort$/;"	f
ale#engine#InitBufferInfo	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#InitBufferInfo(buffer) abort$/;"	f
ale#engine#IsCheckingBuffer	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#IsCheckingBuffer(buffer) abort$/;"	f
ale#engine#IsExecutable	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#IsExecutable(buffer, executable) abort$/;"	f
ale#engine#ManageDirectory	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#ManageDirectory(buffer, directory) abort$/;"	f
ale#engine#ManageFile	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#ManageFile(buffer, filename) abort$/;"	f
ale#engine#ProcessChain	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#ProcessChain(buffer, linter, chain_index, input) abort$/;"	f
ale#engine#RemoveManagedFiles	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#RemoveManagedFiles(buffer) abort$/;"	f
ale#engine#ResetExecutableCache	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#ResetExecutableCache() abort$/;"	f
ale#engine#RunLinters	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#RunLinters(buffer, linters, should_lint_file) abort$/;"	f
ale#engine#SetResults	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#SetResults(buffer, loclist) abort$/;"	f
ale#engine#WaitForJobs	plugged\\ale\\autoload\\ale\\engine.vim	/^function! ale#engine#WaitForJobs(deadline) abort$/;"	f
ale#engine#ignore#Exclude	plugged\\ale\\autoload\\ale\\engine\\ignore.vim	/^function! ale#engine#ignore#Exclude(filetype, all_linters, config) abort$/;"	f
ale#engine#ignore#GetList	plugged\\ale\\autoload\\ale\\engine\\ignore.vim	/^function! ale#engine#ignore#GetList(filetype, config) abort$/;"	f
ale#events#ClockMilliseconds	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#ClockMilliseconds() abort$/;"	f
ale#events#FileChangedEvent	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#FileChangedEvent(buffer) abort$/;"	f
ale#events#FileTypeEvent	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#FileTypeEvent(buffer, new_filetype) abort$/;"	f
ale#events#Init	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#Init() abort$/;"	f
ale#events#LintOnEnter	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#LintOnEnter(buffer) abort$/;"	f
ale#events#QuitEvent	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#QuitEvent(buffer) abort$/;"	f
ale#events#QuitRecently	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#QuitRecently(buffer) abort$/;"	f
ale#events#ReadOrEnterEvent	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#ReadOrEnterEvent(buffer) abort$/;"	f
ale#events#SaveEvent	plugged\\ale\\autoload\\ale\\events.vim	/^function! ale#events#SaveEvent(buffer) abort$/;"	f
ale#filetypes#GuessExtension	plugged\\ale\\autoload\\ale\\filetypes.vim	/^function! ale#filetypes#GuessExtension(filetype) abort$/;"	f
ale#filetypes#LoadExtensionMap	plugged\\ale\\autoload\\ale\\filetypes.vim	/^function! ale#filetypes#LoadExtensionMap() abort$/;"	f
ale#fix#ApplyFixes	plugged\\ale\\autoload\\ale\\fix.vim	/^function! ale#fix#ApplyFixes(buffer, output) abort$/;"	f
ale#fix#ApplyQueuedFixes	plugged\\ale\\autoload\\ale\\fix.vim	/^function! ale#fix#ApplyQueuedFixes() abort$/;"	f
ale#fix#Fix	plugged\\ale\\autoload\\ale\\fix.vim	/^function! ale#fix#Fix(buffer, fixing_flag, ...) abort$/;"	f
ale#fix#InitBufferData	plugged\\ale\\autoload\\ale\\fix.vim	/^function! ale#fix#InitBufferData(buffer, fixing_flag) abort$/;"	f
ale#fix#ManageDirectory	plugged\\ale\\autoload\\ale\\fix.vim	/^function! ale#fix#ManageDirectory(buffer, directory) abort$/;"	f
ale#fix#RemoveManagedFiles	plugged\\ale\\autoload\\ale\\fix.vim	/^function! ale#fix#RemoveManagedFiles(buffer) abort$/;"	f
ale#fix#registry#Add	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#Add(name, func, filetypes, desc, ...) abort$/;"	f
ale#fix#registry#Clear	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#Clear() abort$/;"	f
ale#fix#registry#CompleteFixers	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#CompleteFixers(ArgLead, CmdLine, CursorPos) abort$/;"	f
ale#fix#registry#GetApplicableFixers	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#GetApplicableFixers(filetype) abort$/;"	f
ale#fix#registry#GetFunc	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#GetFunc(name) abort$/;"	f
ale#fix#registry#ResetToDefaults	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#ResetToDefaults() abort$/;"	f
ale#fix#registry#Suggest	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#Suggest(filetype) abort$/;"	f
ale#fix#registry#SuggestedFixers	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! ale#fix#registry#SuggestedFixers(filetype) abort$/;"	f
ale#fixers#autopep8#Fix	plugged\\ale\\autoload\\ale\\fixers\\autopep8.vim	/^function! ale#fixers#autopep8#Fix(buffer) abort$/;"	f
ale#fixers#black#Fix	plugged\\ale\\autoload\\ale\\fixers\\black.vim	/^function! ale#fixers#black#Fix(buffer) abort$/;"	f
ale#fixers#brittany#Fix	plugged\\ale\\autoload\\ale\\fixers\\brittany.vim	/^function! ale#fixers#brittany#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#Fix	plugged\\ale\\autoload\\ale\\fixers\\clangformat.vim	/^function! ale#fixers#clangformat#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\clangformat.vim	/^function! ale#fixers#clangformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#dartfmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\dartfmt.vim	/^function! ale#fixers#dartfmt#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#Fix	plugged\\ale\\autoload\\ale\\fixers\\elm_format.vim	/^function! ale#fixers#elm_format#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\elm_format.vim	/^function! ale#fixers#elm_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#eslint#ApplyFixForVersion	plugged\\ale\\autoload\\ale\\fixers\\eslint.vim	/^function! ale#fixers#eslint#ApplyFixForVersion(buffer, version_output) abort$/;"	f
ale#fixers#eslint#Fix	plugged\\ale\\autoload\\ale\\fixers\\eslint.vim	/^function! ale#fixers#eslint#Fix(buffer) abort$/;"	f
ale#fixers#eslint#ProcessEslintDOutput	plugged\\ale\\autoload\\ale\\fixers\\eslint.vim	/^function! ale#fixers#eslint#ProcessEslintDOutput(buffer, output) abort$/;"	f
ale#fixers#eslint#ProcessFixDryRunOutput	plugged\\ale\\autoload\\ale\\fixers\\eslint.vim	/^function! ale#fixers#eslint#ProcessFixDryRunOutput(buffer, output) abort$/;"	f
ale#fixers#fixjson#Fix	plugged\\ale\\autoload\\ale\\fixers\\fixjson.vim	/^function! ale#fixers#fixjson#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\fixjson.vim	/^function! ale#fixers#fixjson#GetExecutable(buffer) abort$/;"	f
ale#fixers#generic#RemoveTrailingBlankLines	plugged\\ale\\autoload\\ale\\fixers\\generic.vim	/^function! ale#fixers#generic#RemoveTrailingBlankLines(buffer, lines) abort$/;"	f
ale#fixers#generic#TrimWhitespace	plugged\\ale\\autoload\\ale\\fixers\\generic.vim	/^function! ale#fixers#generic#TrimWhitespace(buffer, lines) abort$/;"	f
ale#fixers#generic_python#AddLinesBeforeControlStatements	plugged\\ale\\autoload\\ale\\fixers\\generic_python.vim	/^function! ale#fixers#generic_python#AddLinesBeforeControlStatements(buffer, lines) abort$/;"	f
ale#fixers#generic_python#BreakUpLongLines	plugged\\ale\\autoload\\ale\\fixers\\generic_python.vim	/^function! ale#fixers#generic_python#BreakUpLongLines(buffer, lines) abort$/;"	f
ale#fixers#gofmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\gofmt.vim	/^function! ale#fixers#gofmt#Fix(buffer) abort$/;"	f
ale#fixers#goimports#Fix	plugged\\ale\\autoload\\ale\\fixers\\goimports.vim	/^function! ale#fixers#goimports#Fix(buffer) abort$/;"	f
ale#fixers#google_java_format#Fix	plugged\\ale\\autoload\\ale\\fixers\\google_java_format.vim	/^function! ale#fixers#google_java_format#Fix(buffer) abort$/;"	f
ale#fixers#hackfmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\hackfmt.vim	/^function! ale#fixers#hackfmt#Fix(buffer) abort$/;"	f
ale#fixers#help#AlignTags	plugged\\ale\\autoload\\ale\\fixers\\help.vim	/^function! ale#fixers#help#AlignTags(buffer, lines) abort$/;"	f
ale#fixers#hfmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\hfmt.vim	/^function! ale#fixers#hfmt#Fix(buffer) abort$/;"	f
ale#fixers#importjs#Fix	plugged\\ale\\autoload\\ale\\fixers\\importjs.vim	/^function! ale#fixers#importjs#Fix(buffer) abort$/;"	f
ale#fixers#importjs#ProcessOutput	plugged\\ale\\autoload\\ale\\fixers\\importjs.vim	/^function! ale#fixers#importjs#ProcessOutput(buffer, output) abort$/;"	f
ale#fixers#isort#Fix	plugged\\ale\\autoload\\ale\\fixers\\isort.vim	/^function! ale#fixers#isort#Fix(buffer) abort$/;"	f
ale#fixers#jq#Fix	plugged\\ale\\autoload\\ale\\fixers\\jq.vim	/^function! ale#fixers#jq#Fix(buffer) abort$/;"	f
ale#fixers#jq#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\jq.vim	/^function! ale#fixers#jq#GetExecutable(buffer) abort$/;"	f
ale#fixers#mix_format#Fix	plugged\\ale\\autoload\\ale\\fixers\\mix_format.vim	/^function! ale#fixers#mix_format#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#GetCommand	plugged\\ale\\autoload\\ale\\fixers\\mix_format.vim	/^function! ale#fixers#mix_format#GetCommand(buffer) abort$/;"	f
ale#fixers#mix_format#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\mix_format.vim	/^function! ale#fixers#mix_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#perltidy#Fix	plugged\\ale\\autoload\\ale\\fixers\\perltidy.vim	/^function! ale#fixers#perltidy#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#Fix	plugged\\ale\\autoload\\ale\\fixers\\php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#GetExecutable(buffer) abort$/;"	f
ale#fixers#phpcbf#Fix	plugged\\ale\\autoload\\ale\\fixers\\phpcbf.vim	/^function! ale#fixers#phpcbf#Fix(buffer) abort$/;"	f
ale#fixers#phpcbf#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\phpcbf.vim	/^function! ale#fixers#phpcbf#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ApplyFixForVersion	plugged\\ale\\autoload\\ale\\fixers\\prettier.vim	/^function! ale#fixers#prettier#ApplyFixForVersion(buffer, version_output) abort$/;"	f
ale#fixers#prettier#Fix	plugged\\ale\\autoload\\ale\\fixers\\prettier.vim	/^function! ale#fixers#prettier#Fix(buffer) abort$/;"	f
ale#fixers#prettier#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\prettier.vim	/^function! ale#fixers#prettier#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_eslint#ApplyFixForVersion	plugged\\ale\\autoload\\ale\\fixers\\prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#ApplyFixForVersion(buffer, version_output) abort$/;"	f
ale#fixers#prettier_eslint#Fix	plugged\\ale\\autoload\\ale\\fixers\\prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#Fix(buffer) abort$/;"	f
ale#fixers#prettier_eslint#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_eslint#SetOptionDefaults	plugged\\ale\\autoload\\ale\\fixers\\prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#SetOptionDefaults() abort$/;"	f
ale#fixers#prettier_standard#Fix	plugged\\ale\\autoload\\ale\\fixers\\prettier_standard.vim	/^function! ale#fixers#prettier_standard#Fix(buffer) abort$/;"	f
ale#fixers#prettier_standard#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\prettier_standard.vim	/^function! ale#fixers#prettier_standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#puppetlint#Fix	plugged\\ale\\autoload\\ale\\fixers\\puppetlint.vim	/^function! ale#fixers#puppetlint#Fix(buffer) abort$/;"	f
ale#fixers#qmlfmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\qmlfmt.vim	/^function! ale#fixers#qmlfmt#Fix(buffer) abort$/;"	f
ale#fixers#qmlfmt#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\qmlfmt.vim	/^function! ale#fixers#qmlfmt#GetExecutable(buffer) abort$/;"	f
ale#fixers#refmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\refmt.vim	/^function! ale#fixers#refmt#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#Fix	plugged\\ale\\autoload\\ale\\fixers\\rubocop.vim	/^function! ale#fixers#rubocop#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#GetCommand	plugged\\ale\\autoload\\ale\\fixers\\rubocop.vim	/^function! ale#fixers#rubocop#GetCommand(buffer) abort$/;"	f
ale#fixers#rufo#Fix	plugged\\ale\\autoload\\ale\\fixers\\rufo.vim	/^function! ale#fixers#rufo#Fix(buffer) abort$/;"	f
ale#fixers#rufo#GetCommand	plugged\\ale\\autoload\\ale\\fixers\\rufo.vim	/^function! ale#fixers#rufo#GetCommand(buffer) abort$/;"	f
ale#fixers#rustfmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\rustfmt.vim	/^function! ale#fixers#rustfmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\scalafmt.vim	/^function! ale#fixers#scalafmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#GetCommand	plugged\\ale\\autoload\\ale\\fixers\\scalafmt.vim	/^function! ale#fixers#scalafmt#GetCommand(buffer) abort$/;"	f
ale#fixers#shfmt#Fix	plugged\\ale\\autoload\\ale\\fixers\\shfmt.vim	/^function! ale#fixers#shfmt#Fix(buffer) abort$/;"	f
ale#fixers#standard#Fix	plugged\\ale\\autoload\\ale\\fixers\\standard.vim	/^function! ale#fixers#standard#Fix(buffer) abort$/;"	f
ale#fixers#standard#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\standard.vim	/^function! ale#fixers#standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#stylelint#Fix	plugged\\ale\\autoload\\ale\\fixers\\stylelint.vim	/^function! ale#fixers#stylelint#Fix(buffer) abort$/;"	f
ale#fixers#stylelint#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\stylelint.vim	/^function! ale#fixers#stylelint#GetExecutable(buffer) abort$/;"	f
ale#fixers#swiftformat#Fix	plugged\\ale\\autoload\\ale\\fixers\\swiftformat.vim	/^function! ale#fixers#swiftformat#Fix(buffer) abort$/;"	f
ale#fixers#swiftformat#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\swiftformat.vim	/^function! ale#fixers#swiftformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#tidy#Fix	plugged\\ale\\autoload\\ale\\fixers\\tidy.vim	/^function! ale#fixers#tidy#Fix(buffer) abort$/;"	f
ale#fixers#tslint#Fix	plugged\\ale\\autoload\\ale\\fixers\\tslint.vim	/^function! ale#fixers#tslint#Fix(buffer) abort$/;"	f
ale#fixers#xo#Fix	plugged\\ale\\autoload\\ale\\fixers\\xo.vim	/^function! ale#fixers#xo#Fix(buffer) abort$/;"	f
ale#fixers#xo#GetExecutable	plugged\\ale\\autoload\\ale\\fixers\\xo.vim	/^function! ale#fixers#xo#GetExecutable(buffer) abort$/;"	f
ale#fixers#yapf#Fix	plugged\\ale\\autoload\\ale\\fixers\\yapf.vim	/^function! ale#fixers#yapf#Fix(buffer) abort$/;"	f
ale#gradle#BuildClasspathCommand	plugged\\ale\\autoload\\ale\\gradle.vim	/^function! ale#gradle#BuildClasspathCommand(buffer) abort$/;"	f
ale#gradle#FindExecutable	plugged\\ale\\autoload\\ale\\gradle.vim	/^function! ale#gradle#FindExecutable(buffer) abort$/;"	f
ale#gradle#FindProjectRoot	plugged\\ale\\autoload\\ale\\gradle.vim	/^function! ale#gradle#FindProjectRoot(buffer) abort$/;"	f
ale#gradle#GetInitPath	plugged\\ale\\autoload\\ale\\gradle.vim	/^function! ale#gradle#GetInitPath() abort$/;"	f
ale#handlers#alex#Handle	plugged\\ale\\autoload\\ale\\handlers\\alex.vim	/^function! ale#handlers#alex#Handle(buffer, lines) abort$/;"	f
ale#handlers#cppcheck#HandleCppCheckFormat	plugged\\ale\\autoload\\ale\\handlers\\cppcheck.vim	/^function! ale#handlers#cppcheck#HandleCppCheckFormat(buffer, lines) abort$/;"	f
ale#handlers#cpplint#HandleCppLintFormat	plugged\\ale\\autoload\\ale\\handlers\\cpplint.vim	/^function! ale#handlers#cpplint#HandleCppLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleCSSLintFormat	plugged\\ale\\autoload\\ale\\handlers\\css.vim	/^function! ale#handlers#css#HandleCSSLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleStyleLintFormat	plugged\\ale\\autoload\\ale\\handlers\\css.vim	/^function! ale#handlers#css#HandleStyleLintFormat(buffer, lines) abort$/;"	f
ale#handlers#eslint#FindConfig	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^function! ale#handlers#eslint#FindConfig(buffer) abort$/;"	f
ale#handlers#eslint#GetCommand	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^function! ale#handlers#eslint#GetCommand(buffer) abort$/;"	f
ale#handlers#eslint#GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^function! ale#handlers#eslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#eslint#Handle	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^function! ale#handlers#eslint#Handle(buffer, lines) abort$/;"	f
ale#handlers#flawfinder#HandleFlawfinderFormat	plugged\\ale\\autoload\\ale\\handlers\\flawfinder.vim	/^function! ale#handlers#flawfinder#HandleFlawfinderFormat(buffer, lines) abort$/;"	f
ale#handlers#gawk#HandleGawkFormat	plugged\\ale\\autoload\\ale\\handlers\\gawk.vim	/^function! ale#handlers#gawk#HandleGawkFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormat	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormatWithIncludes	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormatWithIncludes(buffer, lines) abort$/;"	f
ale#handlers#go#Handler	plugged\\ale\\autoload\\ale\\handlers\\go.vim	/^function! ale#handlers#go#Handler(buffer, lines) abort$/;"	f
ale#handlers#haskell#HandleGHCFormat	plugged\\ale\\autoload\\ale\\handlers\\haskell.vim	/^function! ale#handlers#haskell#HandleGHCFormat(buffer, lines) abort$/;"	f
ale#handlers#markdownlint#Handle	plugged\\ale\\autoload\\ale\\handlers\\markdownlint.vim	/^function! ale#handlers#markdownlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#ols#GetCommand	plugged\\ale\\autoload\\ale\\handlers\\ols.vim	/^function! ale#handlers#ols#GetCommand(buffer) abort$/;"	f
ale#handlers#ols#GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\ols.vim	/^function! ale#handlers#ols#GetExecutable(buffer) abort$/;"	f
ale#handlers#ols#GetLanguage	plugged\\ale\\autoload\\ale\\handlers\\ols.vim	/^function! ale#handlers#ols#GetLanguage(buffer) abort$/;"	f
ale#handlers#ols#GetProjectRoot	plugged\\ale\\autoload\\ale\\handlers\\ols.vim	/^function! ale#handlers#ols#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#pony#HandlePonycFormat	plugged\\ale\\autoload\\ale\\handlers\\pony.vim	/^function! ale#handlers#pony#HandlePonycFormat(buffer, lines) abort$/;"	f
ale#handlers#redpen#HandleRedpenOutput	plugged\\ale\\autoload\\ale\\handlers\\redpen.vim	/^function! ale#handlers#redpen#HandleRedpenOutput(buffer, lines) abort$/;"	f
ale#handlers#rubocop#GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\rubocop.vim	/^function! ale#handlers#rubocop#GetExecutable(buffer) abort$/;"	f
ale#handlers#ruby#HandleSyntaxErrors	plugged\\ale\\autoload\\ale\\handlers\\ruby.vim	/^function! ale#handlers#ruby#HandleSyntaxErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrors	plugged\\ale\\autoload\\ale\\handlers\\rust.vim	/^function! ale#handlers#rust#HandleRustErrors(buffer, lines) abort$/;"	f
ale#handlers#sasslint#GetCommand	plugged\\ale\\autoload\\ale\\handlers\\sasslint.vim	/^function! ale#handlers#sasslint#GetCommand(buffer) abort$/;"	f
ale#handlers#scala#HandleScalacLintFormat	plugged\\ale\\autoload\\ale\\handlers\\scala.vim	/^function! ale#handlers#scala#HandleScalacLintFormat(buffer, lines) abort$/;"	f
ale#handlers#sh#GetShellType	plugged\\ale\\autoload\\ale\\handlers\\sh.vim	/^function! ale#handlers#sh#GetShellType(buffer) abort$/;"	f
ale#handlers#sml#GetCmFile	plugged\\ale\\autoload\\ale\\handlers\\sml.vim	/^function! ale#handlers#sml#GetCmFile(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjCm	plugged\\ale\\autoload\\ale\\handlers\\sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjCm(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjFile	plugged\\ale\\autoload\\ale\\handlers\\sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjFile(buffer) abort$/;"	f
ale#handlers#sml#Handle	plugged\\ale\\autoload\\ale\\handlers\\sml.vim	/^function! ale#handlers#sml#Handle(buffer, lines) abort$/;"	f
ale#handlers#textlint#GetCommand	plugged\\ale\\autoload\\ale\\handlers\\textlint.vim	/^function! ale#handlers#textlint#GetCommand(buffer) abort$/;"	f
ale#handlers#textlint#GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\textlint.vim	/^function! ale#handlers#textlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#textlint#HandleTextlintOutput	plugged\\ale\\autoload\\ale\\handlers\\textlint.vim	/^function! ale#handlers#textlint#HandleTextlintOutput(buffer, lines) abort$/;"	f
ale#handlers#tslint#GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\tslint.vim	/^function! ale#handlers#tslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#tslint#InitVariables	plugged\\ale\\autoload\\ale\\handlers\\tslint.vim	/^function! ale#handlers#tslint#InitVariables() abort$/;"	f
ale#handlers#unix#HandleAsError	plugged\\ale\\autoload\\ale\\handlers\\unix.vim	/^function! ale#handlers#unix#HandleAsError(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsWarning	plugged\\ale\\autoload\\ale\\handlers\\unix.vim	/^function! ale#handlers#unix#HandleAsWarning(buffer, lines) abort$/;"	f
ale#handlers#vale#GetType	plugged\\ale\\autoload\\ale\\handlers\\vale.vim	/^function! ale#handlers#vale#GetType(severity) abort$/;"	f
ale#handlers#vale#Handle	plugged\\ale\\autoload\\ale\\handlers\\vale.vim	/^function! ale#handlers#vale#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#DefineLinter	plugged\\ale\\autoload\\ale\\handlers\\writegood.vim	/^function! ale#handlers#writegood#DefineLinter(filetype) abort$/;"	f
ale#handlers#writegood#GetCommand	plugged\\ale\\autoload\\ale\\handlers\\writegood.vim	/^function! ale#handlers#writegood#GetCommand(buffer) abort$/;"	f
ale#handlers#writegood#GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\writegood.vim	/^function! ale#handlers#writegood#GetExecutable(buffer) abort$/;"	f
ale#handlers#writegood#Handle	plugged\\ale\\autoload\\ale\\handlers\\writegood.vim	/^function! ale#handlers#writegood#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#ResetOptions	plugged\\ale\\autoload\\ale\\handlers\\writegood.vim	/^function! ale#handlers#writegood#ResetOptions() abort$/;"	f
ale#highlight#BufferHidden	plugged\\ale\\autoload\\ale\\highlight.vim	/^function! ale#highlight#BufferHidden(buffer) abort$/;"	f
ale#highlight#CreatePositions	plugged\\ale\\autoload\\ale\\highlight.vim	/^function! ale#highlight#CreatePositions(line, col, end_line, end_col) abort$/;"	f
ale#highlight#RemoveHighlights	plugged\\ale\\autoload\\ale\\highlight.vim	/^function! ale#highlight#RemoveHighlights() abort$/;"	f
ale#highlight#SetHighlights	plugged\\ale\\autoload\\ale\\highlight.vim	/^function! ale#highlight#SetHighlights(buffer, loclist) abort$/;"	f
ale#highlight#UpdateHighlights	plugged\\ale\\autoload\\ale\\highlight.vim	/^function! ale#highlight#UpdateHighlights() abort$/;"	f
ale#history#Add	plugged\\ale\\autoload\\ale\\history.vim	/^function! ale#history#Add(buffer, status, job_id, command) abort$/;"	f
ale#history#Get	plugged\\ale\\autoload\\ale\\history.vim	/^function! ale#history#Get(buffer) abort$/;"	f
ale#history#RememberOutput	plugged\\ale\\autoload\\ale\\history.vim	/^function! ale#history#RememberOutput(buffer, job_id, output) abort$/;"	f
ale#history#SetExitCode	plugged\\ale\\autoload\\ale\\history.vim	/^function! ale#history#SetExitCode(buffer, job_id, exit_code) abort$/;"	f
ale#hover#ClearLSPData	plugged\\ale\\autoload\\ale\\hover.vim	/^function! ale#hover#ClearLSPData() abort$/;"	f
ale#hover#GetMap	plugged\\ale\\autoload\\ale\\hover.vim	/^function! ale#hover#GetMap() abort$/;"	f
ale#hover#HandleLSPResponse	plugged\\ale\\autoload\\ale\\hover.vim	/^function! ale#hover#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#hover#HandleTSServerResponse	plugged\\ale\\autoload\\ale\\hover.vim	/^function! ale#hover#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#hover#SetMap	plugged\\ale\\autoload\\ale\\hover.vim	/^function! ale#hover#SetMap(map) abort$/;"	f
ale#hover#Show	plugged\\ale\\autoload\\ale\\hover.vim	/^function! ale#hover#Show(buffer, line, col, opt) abort$/;"	f
ale#job#IsRunning	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#IsRunning(job_id) abort$/;"	f
ale#job#ParseVim8ProcessID	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#ParseVim8ProcessID(job_string) abort$/;"	f
ale#job#PrepareCommand	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#PrepareCommand(buffer, command) abort$/;"	f
ale#job#SendRaw	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#SendRaw(job_id, string) abort$/;"	f
ale#job#Start	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#Start(command, options) abort$/;"	f
ale#job#Stop	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#Stop(job_id) abort$/;"	f
ale#job#ValidateArguments	plugged\\ale\\autoload\\ale\\job.vim	/^function! ale#job#ValidateArguments(command, options) abort$/;"	f
ale#linter#Define	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#Define(filetype, linter) abort$/;"	f
ale#linter#Get	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#Get(original_filetypes) abort$/;"	f
ale#linter#GetAddress	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#GetAddress(buffer, linter) abort$/;"	f
ale#linter#GetAll	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#GetAll(filetypes) abort$/;"	f
ale#linter#GetCommand	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#GetCommand(buffer, linter) abort$/;"	f
ale#linter#GetExecutable	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#GetExecutable(buffer, linter) abort$/;"	f
ale#linter#GetLintersLoaded	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#GetLintersLoaded() abort$/;"	f
ale#linter#PreProcess	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#PreProcess(filetype, linter) abort$/;"	f
ale#linter#PreventLoading	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#PreventLoading(filetype) abort$/;"	f
ale#linter#Reset	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#Reset() abort$/;"	f
ale#linter#ResolveFiletype	plugged\\ale\\autoload\\ale\\linter.vim	/^function! ale#linter#ResolveFiletype(original_filetype) abort$/;"	f
ale#list#GetCombinedList	plugged\\ale\\autoload\\ale\\list.vim	/^function! ale#list#GetCombinedList() abort$/;"	f
ale#list#IsQuickfixOpen	plugged\\ale\\autoload\\ale\\list.vim	/^function! ale#list#IsQuickfixOpen() abort$/;"	f
ale#list#SetLists	plugged\\ale\\autoload\\ale\\list.vim	/^function! ale#list#SetLists(buffer, loclist) abort$/;"	f
ale#loclist_jumping#FindNearest	plugged\\ale\\autoload\\ale\\loclist_jumping.vim	/^function! ale#loclist_jumping#FindNearest(direction, wrap) abort$/;"	f
ale#loclist_jumping#Jump	plugged\\ale\\autoload\\ale\\loclist_jumping.vim	/^function! ale#loclist_jumping#Jump(direction, wrap) abort$/;"	f
ale#loclist_jumping#JumpToIndex	plugged\\ale\\autoload\\ale\\loclist_jumping.vim	/^function! ale#loclist_jumping#JumpToIndex(index) abort$/;"	f
ale#lsp#ConnectToAddress	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#ConnectToAddress(address, init_options) abort$/;"	f
ale#lsp#CreateMessageData	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#CreateMessageData(message) abort$/;"	f
ale#lsp#GetConnectionCapabilities	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#GetConnectionCapabilities(id) abort$/;"	f
ale#lsp#GetNextMessageID	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#GetNextMessageID() abort$/;"	f
ale#lsp#GetProject	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#GetProject(conn, project_root) abort$/;"	f
ale#lsp#HandleMessage	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#HandleMessage(conn, message) abort$/;"	f
ale#lsp#HandleOtherInitializeResponses	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#HandleOtherInitializeResponses(conn, response) abort$/;"	f
ale#lsp#MarkConnectionAsTsserver	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#MarkConnectionAsTsserver(conn_id) abort$/;"	f
ale#lsp#NewConnection	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#NewConnection(initialization_options) abort$/;"	f
ale#lsp#NotifyForChanges	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#NotifyForChanges(conn_id, project_root, buffer) abort$/;"	f
ale#lsp#OpenDocument	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#OpenDocument(conn_id, project_root, buffer, language_id) abort$/;"	f
ale#lsp#ReadMessageData	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#ReadMessageData(data) abort$/;"	f
ale#lsp#RegisterCallback	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#RegisterCallback(conn_id, callback) abort$/;"	f
ale#lsp#RegisterProject	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#RegisterProject(conn_id, project_root) abort$/;"	f
ale#lsp#RemoveConnectionWithID	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#RemoveConnectionWithID(id) abort$/;"	f
ale#lsp#Send	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#Send(conn_id, message, ...) abort$/;"	f
ale#lsp#StartProgram	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#StartProgram(executable, command, init_options) abort$/;"	f
ale#lsp#StopAll	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#StopAll() abort$/;"	f
ale#lsp#WaitForCapability	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! ale#lsp#WaitForCapability(conn_id, project_root, capability, callback) abort$/;"	f
ale#lsp#message#Completion	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Completion(buffer, line, column, trigger_character) abort$/;"	f
ale#lsp#message#Definition	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#message#DidChange	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#DidChange(buffer) abort$/;"	f
ale#lsp#message#DidClose	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#DidClose(buffer) abort$/;"	f
ale#lsp#message#DidOpen	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#DidOpen(buffer, language_id) abort$/;"	f
ale#lsp#message#DidSave	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#DidSave(buffer) abort$/;"	f
ale#lsp#message#Exit	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Exit() abort$/;"	f
ale#lsp#message#GetNextVersionID	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#GetNextVersionID() abort$/;"	f
ale#lsp#message#Hover	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Hover(buffer, line, column) abort$/;"	f
ale#lsp#message#Initialize	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Initialize(root_path, initialization_options) abort$/;"	f
ale#lsp#message#Initialized	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Initialized() abort$/;"	f
ale#lsp#message#References	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#References(buffer, line, column) abort$/;"	f
ale#lsp#message#Shutdown	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^function! ale#lsp#message#Shutdown() abort$/;"	f
ale#lsp#reset#StopAllLSPs	plugged\\ale\\autoload\\ale\\lsp\\reset.vim	/^function! ale#lsp#reset#StopAllLSPs() abort$/;"	f
ale#lsp#response#GetErrorMessage	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^function! ale#lsp#response#GetErrorMessage(response) abort$/;"	f
ale#lsp#response#ReadDiagnostics	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^function! ale#lsp#response#ReadDiagnostics(response) abort$/;"	f
ale#lsp#response#ReadTSServerDiagnostics	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^function! ale#lsp#response#ReadTSServerDiagnostics(response) abort$/;"	f
ale#lsp#tsserver_message#Change	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Change(buffer) abort$/;"	f
ale#lsp#tsserver_message#Close	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Close(buffer) abort$/;"	f
ale#lsp#tsserver_message#CompletionEntryDetails	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#CompletionEntryDetails(buffer, line, column, entry_names) abo/;"	f
ale#lsp#tsserver_message#Completions	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Completions(buffer, line, column, prefix) abort$/;"	f
ale#lsp#tsserver_message#Definition	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Geterr	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Geterr(buffer) abort$/;"	f
ale#lsp#tsserver_message#Open	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Open(buffer) abort$/;"	f
ale#lsp#tsserver_message#Quickinfo	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#Quickinfo(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#References	plugged\\ale\\autoload\\ale\\lsp\\tsserver_message.vim	/^function! ale#lsp#tsserver_message#References(buffer, line, column) abort$/;"	f
ale#lsp_linter#CheckWithLSP	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! ale#lsp_linter#CheckWithLSP(buffer, linter) abort$/;"	f
ale#lsp_linter#ClearLSPData	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! ale#lsp_linter#ClearLSPData() abort$/;"	f
ale#lsp_linter#GetOptions	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! ale#lsp_linter#GetOptions(buffer, linter) abort$/;"	f
ale#lsp_linter#HandleLSPResponse	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! ale#lsp_linter#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#lsp_linter#SetLSPLinterMap	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! ale#lsp_linter#SetLSPLinterMap(replacement_map) abort$/;"	f
ale#lsp_linter#StartLSP	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! ale#lsp_linter#StartLSP(buffer, linter) abort$/;"	f
ale#node#Executable	plugged\\ale\\autoload\\ale\\node.vim	/^function! ale#node#Executable(buffer, executable) abort$/;"	f
ale#node#FindExecutable	plugged\\ale\\autoload\\ale\\node.vim	/^function! ale#node#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#node#FindExecutableFunc	plugged\\ale\\autoload\\ale\\node.vim	/^function! ale#node#FindExecutableFunc(base_var_name, path_list) abort$/;"	f
ale#path#BufferCdString	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#BufferCdString(buffer) abort$/;"	f
ale#path#CdString	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#CdString(directory) abort$/;"	f
ale#path#Dirname	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#Dirname(path) abort$/;"	f
ale#path#FindNearestDirectory	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#FindNearestDirectory(buffer, directory_name) abort$/;"	f
ale#path#FindNearestFile	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#FindNearestFile(buffer, filename) abort$/;"	f
ale#path#FromURI	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#FromURI(uri) abort$/;"	f
ale#path#GetAbsPath	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#GetAbsPath(base_directory, filename) abort$/;"	f
ale#path#IsAbsolute	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#IsAbsolute(filename) abort$/;"	f
ale#path#IsBufferPath	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#IsBufferPath(buffer, complex_filename) abort$/;"	f
ale#path#IsTempName	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#IsTempName(filename) abort$/;"	f
ale#path#ResolveLocalPath	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#ResolveLocalPath(buffer, search_string, global_fallback) abort$/;"	f
ale#path#Simplify	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#Simplify(path) abort$/;"	f
ale#path#ToURI	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#ToURI(path) abort$/;"	f
ale#path#Upwards	plugged\\ale\\autoload\\ale\\path.vim	/^function! ale#path#Upwards(path) abort$/;"	f
ale#pattern_options#SetOptions	plugged\\ale\\autoload\\ale\\pattern_options.vim	/^function! ale#pattern_options#SetOptions(buffer) abort$/;"	f
ale#preview#CloseIfTypeMatches	plugged\\ale\\autoload\\ale\\preview.vim	/^function! ale#preview#CloseIfTypeMatches(filetype) abort$/;"	f
ale#preview#OpenSelectionInBuffer	plugged\\ale\\autoload\\ale\\preview.vim	/^function! ale#preview#OpenSelectionInBuffer() abort$/;"	f
ale#preview#OpenSelectionInTab	plugged\\ale\\autoload\\ale\\preview.vim	/^function! ale#preview#OpenSelectionInTab() abort$/;"	f
ale#preview#Show	plugged\\ale\\autoload\\ale\\preview.vim	/^function! ale#preview#Show(lines, ...) abort$/;"	f
ale#preview#ShowSelection	plugged\\ale\\autoload\\ale\\preview.vim	/^function! ale#preview#ShowSelection(item_list) abort$/;"	f
ale#python#FindExecutable	plugged\\ale\\autoload\\ale\\python.vim	/^function! ale#python#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#python#FindProjectRoot	plugged\\ale\\autoload\\ale\\python.vim	/^function! ale#python#FindProjectRoot(buffer) abort$/;"	f
ale#python#FindProjectRootIni	plugged\\ale\\autoload\\ale\\python.vim	/^function! ale#python#FindProjectRootIni(buffer) abort$/;"	f
ale#python#FindVirtualenv	plugged\\ale\\autoload\\ale\\python.vim	/^function! ale#python#FindVirtualenv(buffer) abort$/;"	f
ale#references#ClearLSPData	plugged\\ale\\autoload\\ale\\references.vim	/^function! ale#references#ClearLSPData() abort$/;"	f
ale#references#Find	plugged\\ale\\autoload\\ale\\references.vim	/^function! ale#references#Find() abort$/;"	f
ale#references#GetMap	plugged\\ale\\autoload\\ale\\references.vim	/^function! ale#references#GetMap() abort$/;"	f
ale#references#HandleLSPResponse	plugged\\ale\\autoload\\ale\\references.vim	/^function! ale#references#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#references#HandleTSServerResponse	plugged\\ale\\autoload\\ale\\references.vim	/^function! ale#references#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#references#SetMap	plugged\\ale\\autoload\\ale\\references.vim	/^function! ale#references#SetMap(map) abort$/;"	f
ale#ruby#FindRailsRoot	plugged\\ale\\autoload\\ale\\ruby.vim	/^function! ale#ruby#FindRailsRoot(buffer) abort$/;"	f
ale#semver#GTE	plugged\\ale\\autoload\\ale\\semver.vim	/^function! ale#semver#GTE(lhs, rhs) abort$/;"	f
ale#semver#GetVersion	plugged\\ale\\autoload\\ale\\semver.vim	/^function! ale#semver#GetVersion(executable, version_lines) abort$/;"	f
ale#semver#HasVersion	plugged\\ale\\autoload\\ale\\semver.vim	/^function! ale#semver#HasVersion(executable) abort$/;"	f
ale#semver#ResetVersionCache	plugged\\ale\\autoload\\ale\\semver.vim	/^function! ale#semver#ResetVersionCache() abort$/;"	f
ale#sign#FindCurrentSigns	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#FindCurrentSigns(buffer) abort$/;"	f
ale#sign#GetSignCommands	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#GetSignCommands(buffer, was_sign_set, sign_map) abort$/;"	f
ale#sign#GetSignName	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#GetSignName(sublist) abort$/;"	f
ale#sign#ParseSigns	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#ParseSigns(line_list) abort$/;"	f
ale#sign#ReadSigns	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#ReadSigns(buffer) abort$/;"	f
ale#sign#SetSigns	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#SetSigns(buffer, loclist) abort$/;"	f
ale#sign#SetUpDefaultColumnWithoutErrorsHighlight	plugged\\ale\\autoload\\ale\\sign.vim	/^function! ale#sign#SetUpDefaultColumnWithoutErrorsHighlight() abort$/;"	f
ale#socket#Close	plugged\\ale\\autoload\\ale\\socket.vim	/^function! ale#socket#Close(channel_id) abort$/;"	f
ale#socket#GetAddress	plugged\\ale\\autoload\\ale\\socket.vim	/^function! ale#socket#GetAddress(channel_id) abort$/;"	f
ale#socket#IsOpen	plugged\\ale\\autoload\\ale\\socket.vim	/^function! ale#socket#IsOpen(channel_id) abort$/;"	f
ale#socket#Open	plugged\\ale\\autoload\\ale\\socket.vim	/^function! ale#socket#Open(address, options) abort$/;"	f
ale#socket#Send	plugged\\ale\\autoload\\ale\\socket.vim	/^function! ale#socket#Send(channel_id, data) abort$/;"	f
ale#statusline#Count	plugged\\ale\\autoload\\ale\\statusline.vim	/^function! ale#statusline#Count(buffer) abort$/;"	f
ale#statusline#Update	plugged\\ale\\autoload\\ale\\statusline.vim	/^function! ale#statusline#Update(buffer, loclist) abort$/;"	f
ale#test#GetLoclistWithoutModule	plugged\\ale\\autoload\\ale\\test.vim	/^function! ale#test#GetLoclistWithoutModule() abort$/;"	f
ale#test#GetQflistWithoutModule	plugged\\ale\\autoload\\ale\\test.vim	/^function! ale#test#GetQflistWithoutModule() abort$/;"	f
ale#test#RestoreDirectory	plugged\\ale\\autoload\\ale\\test.vim	/^function! ale#test#RestoreDirectory() abort$/;"	f
ale#test#SetDirectory	plugged\\ale\\autoload\\ale\\test.vim	/^function! ale#test#SetDirectory(docker_path) abort$/;"	f
ale#test#SetFilename	plugged\\ale\\autoload\\ale\\test.vim	/^function! ale#test#SetFilename(path) abort$/;"	f
ale#toggle#Disable	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#Disable() abort$/;"	f
ale#toggle#DisableBuffer	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#DisableBuffer(buffer) abort$/;"	f
ale#toggle#Enable	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#Enable() abort$/;"	f
ale#toggle#EnableBuffer	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#EnableBuffer(buffer) abort$/;"	f
ale#toggle#Reset	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#Reset() abort$/;"	f
ale#toggle#ResetBuffer	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#ResetBuffer(buffer) abort$/;"	f
ale#toggle#Toggle	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#Toggle() abort$/;"	f
ale#toggle#ToggleBuffer	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! ale#toggle#ToggleBuffer(buffer) abort$/;"	f
ale#uri#Decode	plugged\\ale\\autoload\\ale\\uri.vim	/^function! ale#uri#Decode(value) abort$/;"	f
ale#uri#Encode	plugged\\ale\\autoload\\ale\\uri.vim	/^function! ale#uri#Encode(value) abort$/;"	f
ale#util#BinarySearch	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#BinarySearch(loclist, buffer, line, column) abort$/;"	f
ale#util#Col	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#Col(str, chr) abort$/;"	f
ale#util#EscapePCRE	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#EscapePCRE(unsafe_string) abort$/;"	f
ale#util#EscapeVim	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#EscapeVim(unsafe_string) abort$/;"	f
ale#util#Execute	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#Execute(expr) abort$/;"	f
ale#util#FeedKeys	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#FeedKeys(...) abort$/;"	f
ale#util#FunctionArgCount	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#FunctionArgCount(function) abort$/;"	f
ale#util#FuzzyJSONDecode	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#FuzzyJSONDecode(data, default) abort$/;"	f
ale#util#GetFunction	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#GetFunction(string_or_ref) abort$/;"	f
ale#util#GetItemPriority	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#GetItemPriority(item) abort$/;"	f
ale#util#GetLineCount	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#GetLineCount(buffer) abort$/;"	f
ale#util#GetMatches	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#GetMatches(lines, patterns) abort$/;"	f
ale#util#InSandbox	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#InSandbox() abort$/;"	f
ale#util#JoinNeovimOutput	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#JoinNeovimOutput(job, last_line, data, mode, callback) abort$/;"	f
ale#util#LocItemCompare	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#LocItemCompare(left, right) abort$/;"	f
ale#util#LocItemCompareWithText	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#LocItemCompareWithText(left, right) abort$/;"	f
ale#util#Mode	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#Mode(...) abort$/;"	f
ale#util#Open	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#Open(filename, line, column, options) abort$/;"	f
ale#util#ShowMessage	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#ShowMessage(string) abort$/;"	f
ale#util#StartPartialTimer	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#StartPartialTimer(delay, callback, args) abort$/;"	f
ale#util#StopPartialTimer	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#StopPartialTimer(timer_id) abort$/;"	f
ale#util#Tempname	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#Tempname() abort$/;"	f
ale#util#Writefile	plugged\\ale\\autoload\\ale\\util.vim	/^function! ale#util#Writefile(buffer, lines, filename) abort$/;"	f
ale_linters#ansible#ansible_lint#Handle	plugged\\ale\\ale_linters\\ansible\\ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#apiblueprint#drafter#HandleErrors	plugged\\ale\\ale_linters\\apiblueprint\\drafter.vim	/^function! ale_linters#apiblueprint#drafter#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#asm#gcc#GetCommand	plugged\\ale\\ale_linters\\asm\\gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	plugged\\ale\\ale_linters\\asm\\gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#awk#gawk#GetCommand	plugged\\ale\\ale_linters\\awk\\gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#c#clang#GetCommand	plugged\\ale\\ale_linters\\c\\clang.vim	/^function! ale_linters#c#clang#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#clangd#GetCommand	plugged\\ale\\ale_linters\\c\\clangd.vim	/^function! ale_linters#c#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#c#clangd#GetProjectRoot	plugged\\ale\\ale_linters\\c\\clangd.vim	/^function! ale_linters#c#clangd#GetProjectRoot(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetCommand	plugged\\ale\\ale_linters\\c\\clangtidy.vim	/^function! ale_linters#c#clangtidy#GetCommand(buffer) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	plugged\\ale\\ale_linters\\c\\cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#cquery#GetInitializationOptions	plugged\\ale\\ale_linters\\c\\cquery.vim	/^function! ale_linters#c#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#c#cquery#GetProjectRoot	plugged\\ale\\ale_linters\\c\\cquery.vim	/^function! ale_linters#c#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#c#flawfinder#GetCommand	plugged\\ale\\ale_linters\\c\\flawfinder.vim	/^function! ale_linters#c#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#c#gcc#GetCommand	plugged\\ale\\ale_linters\\c\\gcc.vim	/^function! ale_linters#c#gcc#GetCommand(buffer, output) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	plugged\\ale\\ale_linters\\chef\\foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	plugged\\ale\\ale_linters\\chef\\foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#clojure#joker#HandleJokerFormat	plugged\\ale\\ale_linters\\clojure\\joker.vim	/^function! ale_linters#clojure#joker#HandleJokerFormat(buffer, lines) abort$/;"	f
ale_linters#cloudformation#cfn_python_lint#Handle	plugged\\ale\\ale_linters\\cloudformation\\cfn_python_lint.vim	/^function! ale_linters#cloudformation#cfn_python_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#cmake#cmakelint#Command	plugged\\ale\\ale_linters\\cmake\\cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Executable	plugged\\ale\\ale_linters\\cmake\\cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	plugged\\ale\\ale_linters\\coffee\\coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	plugged\\ale\\ale_linters\\coffee\\coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	plugged\\ale\\ale_linters\\coffee\\coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	plugged\\ale\\ale_linters\\coffee\\coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	plugged\\ale\\ale_linters\\coffee\\coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#clang#GetCommand	plugged\\ale\\ale_linters\\cpp\\clang.vim	/^function! ale_linters#cpp#clang#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clangcheck#GetCommand	plugged\\ale\\ale_linters\\cpp\\clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	plugged\\ale\\ale_linters\\cpp\\clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	plugged\\ale\\ale_linters\\cpp\\cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetCommand	plugged\\ale\\ale_linters\\cpp\\cpplint.vim	/^function! ale_linters#cpp#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetInitializationOptions	plugged\\ale\\ale_linters\\cpp\\cquery.vim	/^function! ale_linters#cpp#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetProjectRoot	plugged\\ale\\ale_linters\\cpp\\cquery.vim	/^function! ale_linters#cpp#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetCommand	plugged\\ale\\ale_linters\\cpp\\flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#gcc#GetCommand	plugged\\ale\\ale_linters\\cpp\\gcc.vim	/^function! ale_linters#cpp#gcc#GetCommand(buffer, output) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	plugged\\ale\\ale_linters\\crystal\\crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#Handle	plugged\\ale\\ale_linters\\crystal\\crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcs#GetCommand	plugged\\ale\\ale_linters\\cs\\mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	plugged\\ale\\ale_linters\\cs\\mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcsc#GetCommand	plugged\\ale\\ale_linters\\cs\\mcsc.vim	/^function! ale_linters#cs#mcsc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcsc#Handle	plugged\\ale\\ale_linters\\cs\\mcsc.vim	/^function! ale_linters#cs#mcsc#Handle(buffer, lines) abort$/;"	f
ale_linters#css#csslint#GetCommand	plugged\\ale\\ale_linters\\css\\csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	plugged\\ale\\ale_linters\\css\\stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#GetCommand	plugged\\ale\\ale_linters\\cucumber\\cucumber.vim	/^function! ale_linters#cucumber#cucumber#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#Handle	plugged\\ale\\ale_linters\\cucumber\\cucumber.vim	/^function! ale_linters#cucumber#cucumber#Handle(buffer, lines) abort$/;"	f
ale_linters#cuda#nvcc#GetCommand	plugged\\ale\\ale_linters\\cuda\\nvcc.vim	/^function! ale_linters#cuda#nvcc#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#HandleNVCCFormat	plugged\\ale\\ale_linters\\cuda\\nvcc.vim	/^function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort$/;"	f
ale_linters#d#dmd#DMDCommand	plugged\\ale\\ale_linters\\d\\dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output) abort$/;"	f
ale_linters#d#dmd#DUBCommand	plugged\\ale\\ale_linters\\d\\dmd.vim	/^function! ale_linters#d#dmd#DUBCommand(buffer) abort$/;"	f
ale_linters#d#dmd#Handle	plugged\\ale\\ale_linters\\d\\dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#dafny#dafny#Handle	plugged\\ale\\ale_linters\\dafny\\dafny.vim	/^function! ale_linters#dafny#dafny#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#dartanalyzer#GetCommand	plugged\\ale\\ale_linters\\dart\\dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#Handle	plugged\\ale\\ale_linters\\dart\\dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#language_server#GetProjectRoot	plugged\\ale\\ale_linters\\dart\\language_server.vim	/^function! ale_linters#dart#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetCommand	plugged\\ale\\ale_linters\\dockerfile\\hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetExecutable	plugged\\ale\\ale_linters\\dockerfile\\hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetExecutable(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	plugged\\ale\\ale_linters\\dockerfile\\hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#Handle	plugged\\ale\\ale_linters\\elixir\\credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dialyxir#Handle	plugged\\ale\\ale_linters\\elixir\\dialyxir.vim	/^function! ale_linters#elixir#dialyxir#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dogma#Handle	plugged\\ale\\ale_linters\\elixir\\dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#mix#FindProjectRoot	plugged\\ale\\ale_linters\\elixir\\mix.vim	/^function! ale_linters#elixir#mix#FindProjectRoot(buffer) abort$/;"	f
ale_linters#elixir#mix#GetCommand	plugged\\ale\\ale_linters\\elixir\\mix.vim	/^function! ale_linters#elixir#mix#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#mix#Handle	plugged\\ale\\ale_linters\\elixir\\mix.vim	/^function! ale_linters#elixir#mix#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#FileIsBuffer	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#FileIsBuffer(path) abort$/;"	f
ale_linters#elm#make#GetCommand	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#Handle	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#HandleElm018Line	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#HandleElm018Line(line, output) abort$/;"	f
ale_linters#elm#make#HandleElm019Line	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#HandleElm019Line(line, output) abort$/;"	f
ale_linters#elm#make#ParseMessage	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#ParseMessage(message) abort$/;"	f
ale_linters#elm#make#ParseMessageItem	plugged\\ale\\ale_linters\\elm\\make.vim	/^function! ale_linters#elm#make#ParseMessageItem(item) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	plugged\\ale\\ale_linters\\erlang\\erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	plugged\\ale\\ale_linters\\erlang\\erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#GetCommand	plugged\\ale\\ale_linters\\erlang\\syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetCommand(buffer, output) abort$/;"	f
ale_linters#erlang#syntaxerl#Handle	plugged\\ale\\ale_linters\\erlang\\syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#Handle(buffer, lines) abort$/;"	f
ale_linters#eruby#erb#GetCommand	plugged\\ale\\ale_linters\\eruby\\erb.vim	/^function! ale_linters#eruby#erb#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erubi#CheckErubi	plugged\\ale\\ale_linters\\eruby\\erubi.vim	/^function! ale_linters#eruby#erubi#CheckErubi(buffer) abort$/;"	f
ale_linters#eruby#erubi#GetCommand	plugged\\ale\\ale_linters\\eruby\\erubi.vim	/^function! ale_linters#eruby#erubi#GetCommand(buffer, check_erubi_output) abort$/;"	f
ale_linters#eruby#erubis#GetCommand	plugged\\ale\\ale_linters\\eruby\\erubis.vim	/^function! ale_linters#eruby#erubis#GetCommand(buffer) abort$/;"	f
ale_linters#fish#fish#Handle	plugged\\ale\\ale_linters\\fish\\fish.vim	/^function! ale_linters#fish#fish#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	plugged\\ale\\ale_linters\\fortran\\gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	plugged\\ale\\ale_linters\\fortran\\gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#language_server#GetProjectRoot	plugged\\ale\\ale_linters\\fortran\\language_server.vim	/^function! ale_linters#fortran#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#GetCommand	plugged\\ale\\ale_linters\\fuse\\fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetCommand(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#Handle	plugged\\ale\\ale_linters\\fuse\\fusionlint.vim	/^function! ale_linters#fuse#fusionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#gitcommit#gitlint#GetCommand	plugged\\ale\\ale_linters\\gitcommit\\gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetCommand(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#GetExecutable	plugged\\ale\\ale_linters\\gitcommit\\gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetExecutable(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#Handle	plugged\\ale\\ale_linters\\gitcommit\\gitlint.vim	/^function! ale_linters#gitcommit#gitlint#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslang#GetCommand	plugged\\ale\\ale_linters\\glsl\\glslang.vim	/^function! ale_linters#glsl#glslang#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslang#Handle	plugged\\ale\\ale_linters\\glsl\\glslang.vim	/^function! ale_linters#glsl#glslang#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslls#GetCommand	plugged\\ale\\ale_linters\\glsl\\glslls.vim	/^function! ale_linters#glsl#glslls#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetProjectRoot	plugged\\ale\\ale_linters\\glsl\\glslls.vim	/^function! ale_linters#glsl#glslls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#go#gobuild#GetCommand	plugged\\ale\\ale_linters\\go\\gobuild.vim	/^function! ale_linters#go#gobuild#GetCommand(buffer, goenv_output) abort$/;"	f
ale_linters#go#gobuild#GetMatches	plugged\\ale\\ale_linters\\go\\gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#GoEnv	plugged\\ale\\ale_linters\\go\\gobuild.vim	/^function! ale_linters#go#gobuild#GoEnv(buffer) abort$/;"	f
ale_linters#go#gobuild#Handler	plugged\\ale\\ale_linters\\go\\gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gobuild#ResetEnv	plugged\\ale\\ale_linters\\go\\gobuild.vim	/^function! ale_linters#go#gobuild#ResetEnv() abort$/;"	f
ale_linters#go#gometalinter#GetCommand	plugged\\ale\\ale_linters\\go\\gometalinter.vim	/^function! ale_linters#go#gometalinter#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetMatches	plugged\\ale\\ale_linters\\go\\gometalinter.vim	/^function! ale_linters#go#gometalinter#GetMatches(lines) abort$/;"	f
ale_linters#go#gometalinter#Handler	plugged\\ale\\ale_linters\\go\\gometalinter.vim	/^function! ale_linters#go#gometalinter#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gosimple#GetCommand	plugged\\ale\\ale_linters\\go\\gosimple.vim	/^function! ale_linters#go#gosimple#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetCommand	plugged\\ale\\ale_linters\\go\\gotype.vim	/^function! ale_linters#go#gotype#GetCommand(buffer) abort$/;"	f
ale_linters#go#govet#GetCommand	plugged\\ale\\ale_linters\\go\\govet.vim	/^function! ale_linters#go#govet#GetCommand(buffer) abort$/;"	f
ale_linters#go#staticcheck#GetCommand	plugged\\ale\\ale_linters\\go\\staticcheck.vim	/^function! ale_linters#go#staticcheck#GetCommand(buffer) abort$/;"	f
ale_linters#hack#hack#GetExecutable	plugged\\ale\\ale_linters\\hack\\hack.vim	/^function! ale_linters#hack#hack#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hack#GetProjectRoot	plugged\\ale\\ale_linters\\hack\\hack.vim	/^function! ale_linters#hack#hack#GetProjectRoot(buffer) abort$/;"	f
ale_linters#hack#hhast#GetExecutable	plugged\\ale\\ale_linters\\hack\\hhast.vim	/^function! ale_linters#hack#hhast#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hhast#GetInitializationOptions	plugged\\ale\\ale_linters\\hack\\hhast.vim	/^function! ale_linters#hack#hhast#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#hack#hhast#GetProjectRoot	plugged\\ale\\ale_linters\\hack\\hhast.vim	/^function! ale_linters#hack#hhast#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetCommand	plugged\\ale\\ale_linters\\haml\\hamllint.vim	/^function! ale_linters#haml#hamllint#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#Handle	plugged\\ale\\ale_linters\\haml\\hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	plugged\\ale\\ale_linters\\handlebars\\embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#cabal_ghc#GetCommand	plugged\\ale\\ale_linters\\haskell\\cabal_ghc.vim	/^function! ale_linters#haskell#cabal_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc#GetCommand	plugged\\ale\\ale_linters\\haskell\\ghc.vim	/^function! ale_linters#haskell#ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hdevtools#GetCommand	plugged\\ale\\ale_linters\\haskell\\hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetExecutable	plugged\\ale\\ale_linters\\haskell\\hie.vim	/^function! ale_linters#haskell#hie#GetExecutable(buffer) abort$/;"	f
ale_linters#haskell#hie#GetProjectRoot	plugged\\ale\\ale_linters\\haskell\\hie.vim	/^function! ale_linters#haskell#hie#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#hlint#Handle	plugged\\ale\\ale_linters\\haskell\\hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#stack_build#GetCommand	plugged\\ale\\ale_linters\\haskell\\stack_build.vim	/^function! ale_linters#haskell#stack_build#GetCommand(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	plugged\\ale\\ale_linters\\html\\htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#GetCommand	plugged\\ale\\ale_linters\\html\\tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	plugged\\ale\\ale_linters\\html\\tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#idris#idris#GetCommand	plugged\\ale\\ale_linters\\idris\\idris.vim	/^function! ale_linters#idris#idris#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#Handle	plugged\\ale\\ale_linters\\idris\\idris.vim	/^function! ale_linters#idris#idris#Handle(buffer, lines) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	plugged\\ale\\ale_linters\\java\\checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	plugged\\ale\\ale_linters\\java\\checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#java#javac#GetCommand	plugged\\ale\\ale_linters\\java\\javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths) abort$/;"	f
ale_linters#java#javac#GetImportPaths	plugged\\ale\\ale_linters\\java\\javac.vim	/^function! ale_linters#java#javac#GetImportPaths(buffer) abort$/;"	f
ale_linters#java#javac#Handle	plugged\\ale\\ale_linters\\java\\javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
ale_linters#java#pmd#GetCommand	plugged\\ale\\ale_linters\\java\\pmd.vim	/^function! ale_linters#java#pmd#GetCommand(buffer) abort$/;"	f
ale_linters#java#pmd#Handle	plugged\\ale\\ale_linters\\java\\pmd.vim	/^function! ale_linters#java#pmd#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetCommand	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer, version_lines) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#Handle	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#VersionCheck	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! ale_linters#javascript#flow#VersionCheck(buffer) abort$/;"	f
ale_linters#javascript#flow_ls#FindProjectRoot	plugged\\ale\\ale_linters\\javascript\\flow_ls.vim	/^function! ale_linters#javascript#flow_ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetCommand	plugged\\ale\\ale_linters\\javascript\\jscs.vim	/^function! ale_linters#javascript#jscs#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jscs#Handle	plugged\\ale\\ale_linters\\javascript\\jscs.vim	/^function! ale_linters#javascript#jscs#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	plugged\\ale\\ale_linters\\javascript\\jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	plugged\\ale\\ale_linters\\javascript\\standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	plugged\\ale\\ale_linters\\javascript\\standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#xo#GetCommand	plugged\\ale\\ale_linters\\javascript\\xo.vim	/^function! ale_linters#javascript#xo#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#xo#GetExecutable	plugged\\ale\\ale_linters\\javascript\\xo.vim	/^function! ale_linters#javascript#xo#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#Handle	plugged\\ale\\ale_linters\\json\\jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths) abort$/;"	f
ale_linters#kotlin#kotlinc#GetImportPaths	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetImportPaths(buffer) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#ktlint#GetCommand	plugged\\ale\\ale_linters\\kotlin\\ktlint.vim	/^function! ale_linters#kotlin#ktlint#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#ktlint#Handle	plugged\\ale\\ale_linters\\kotlin\\ktlint.vim	/^function! ale_linters#kotlin#ktlint#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#languageserver#GetProjectRoot	plugged\\ale\\ale_linters\\kotlin\\languageserver.vim	/^function! ale_linters#kotlin#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#less#lessc#GetCommand	plugged\\ale\\ale_linters\\less\\lessc.vim	/^function! ale_linters#less#lessc#GetCommand(buffer) abort$/;"	f
ale_linters#less#lessc#Handle	plugged\\ale\\ale_linters\\less\\lessc.vim	/^function! ale_linters#less#lessc#Handle(buffer, lines) abort$/;"	f
ale_linters#less#stylelint#GetCommand	plugged\\ale\\ale_linters\\less\\stylelint.vim	/^function! ale_linters#less#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#llvm#llc#HandleErrors	plugged\\ale\\ale_linters\\llvm\\llc.vim	/^function! ale_linters#llvm#llc#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#lua#luac#Handle	plugged\\ale\\ale_linters\\lua\\luac.vim	/^function! ale_linters#lua#luac#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	plugged\\ale\\ale_linters\\lua\\luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	plugged\\ale\\ale_linters\\lua\\luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#make#checkmake#Handle	plugged\\ale\\ale_linters\\make\\checkmake.vim	/^function! ale_linters#make#checkmake#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#mdl#GetCommand	plugged\\ale\\ale_linters\\markdown\\mdl.vim	/^function! ale_linters#markdown#mdl#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetExecutable	plugged\\ale\\ale_linters\\markdown\\mdl.vim	/^function! ale_linters#markdown#mdl#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#mdl#Handle	plugged\\ale\\ale_linters\\markdown\\mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#remark_lint#GetCommand	plugged\\ale\\ale_linters\\markdown\\remark_lint.vim	/^function! ale_linters#markdown#remark_lint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#remark_lint#Handle	plugged\\ale\\ale_linters\\markdown\\remark_lint.vim	/^function! ale_linters#markdown#remark_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#matlab#mlint#Handle	plugged\\ale\\ale_linters\\matlab\\mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#mercury#mmc#GetCommand	plugged\\ale\\ale_linters\\mercury\\mmc.vim	/^function! ale_linters#mercury#mmc#GetCommand(buffer) abort$/;"	f
ale_linters#mercury#mmc#Handle	plugged\\ale\\ale_linters\\mercury\\mmc.vim	/^function! ale_linters#mercury#mmc#Handle(buffer, lines) abort$/;"	f
ale_linters#nasm#nasm#GetCommand	plugged\\ale\\ale_linters\\nasm\\nasm.vim	/^function! ale_linters#nasm#nasm#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#Handle	plugged\\ale\\ale_linters\\nasm\\nasm.vim	/^function! ale_linters#nasm#nasm#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	plugged\\ale\\ale_linters\\nim\\nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimcheck#Handle	plugged\\ale\\ale_linters\\nim\\nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#nix#Handle	plugged\\ale\\ale_linters\\nix\\nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#objc#clang#GetCommand	plugged\\ale\\ale_linters\\objc\\clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clang#GetCommand	plugged\\ale\\ale_linters\\objcpp\\clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#ocaml#merlin#Handle	plugged\\ale\\ale_linters\\ocaml\\merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perl#GetCommand	plugged\\ale\\ale_linters\\perl\\perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#Handle	plugged\\ale\\ale_linters\\perl\\perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#GetCommand	plugged\\ale\\ale_linters\\perl\\perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetProfile	plugged\\ale\\ale_linters\\perl\\perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetProfile(buffer) abort$/;"	f
ale_linters#perl#perlcritic#Handle	plugged\\ale\\ale_linters\\perl\\perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#php#langserver#GetProjectRoot	plugged\\ale\\ale_linters\\php\\langserver.vim	/^function! ale_linters#php#langserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#phan#GetCommand	plugged\\ale\\ale_linters\\php\\phan.vim	/^function! ale_linters#php#phan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phan#GetExecutable	plugged\\ale\\ale_linters\\php\\phan.vim	/^function! ale_linters#php#phan#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phan#Handle	plugged\\ale\\ale_linters\\php\\phan.vim	/^function! ale_linters#php#phan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#php#Handle	plugged\\ale\\ale_linters\\php\\php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpcs#GetCommand	plugged\\ale\\ale_linters\\php\\phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	plugged\\ale\\ale_linters\\php\\phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpmd#GetCommand	plugged\\ale\\ale_linters\\php\\phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	plugged\\ale\\ale_linters\\php\\phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpstan#GetCommand	plugged\\ale\\ale_linters\\php\\phpstan.vim	/^function! ale_linters#php#phpstan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpstan#Handle	plugged\\ale\\ale_linters\\php\\phpstan.vim	/^function! ale_linters#php#phpstan#Handle(buffer, lines) abort$/;"	f
ale_linters#po#msgfmt#Handle	plugged\\ale\\ale_linters\\po\\msgfmt.vim	/^function! ale_linters#po#msgfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#pony#ponyc#GetCommand	plugged\\ale\\ale_linters\\pony\\ponyc.vim	/^function! ale_linters#pony#ponyc#GetCommand(buffer) abort$/;"	f
ale_linters#proto#protoc_gen_lint#GetCommand	plugged\\ale\\ale_linters\\proto\\protoc_gen_lint.vim	/^function! ale_linters#proto#protoc_gen_lint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#GetCommand	plugged\\ale\\ale_linters\\pug\\puglint.vim	/^function! ale_linters#pug#puglint#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#languageserver#GetProjectRoot	plugged\\ale\\ale_linters\\puppet\\languageserver.vim	/^function! ale_linters#puppet#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#puppet#puppet#Handle	plugged\\ale\\ale_linters\\puppet\\puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	plugged\\ale\\ale_linters\\puppet\\puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#pyrex#cython#GetCommand	plugged\\ale\\ale_linters\\pyrex\\cython.vim	/^function! ale_linters#pyrex#cython#GetCommand(buffer) abort$/;"	f
ale_linters#pyrex#cython#Handle	plugged\\ale\\ale_linters\\pyrex\\cython.vim	/^function! ale_linters#pyrex#cython#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#GetCommand	plugged\\ale\\ale_linters\\python\\flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#python#flake8#GetExecutable	plugged\\ale\\ale_linters\\python\\flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#Handle	plugged\\ale\\ale_linters\\python\\flake8.vim	/^function! ale_linters#python#flake8#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#VersionCheck	plugged\\ale\\ale_linters\\python\\flake8.vim	/^function! ale_linters#python#flake8#VersionCheck(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	plugged\\ale\\ale_linters\\python\\mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	plugged\\ale\\ale_linters\\python\\mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	plugged\\ale\\ale_linters\\python\\mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#prospector#GetCommand	plugged\\ale\\ale_linters\\python\\prospector.vim	/^function! ale_linters#python#prospector#GetCommand(buffer) abort$/;"	f
ale_linters#python#prospector#GetExecutable	plugged\\ale\\ale_linters\\python\\prospector.vim	/^function! ale_linters#python#prospector#GetExecutable(buffer) abort$/;"	f
ale_linters#python#prospector#Handle	plugged\\ale\\ale_linters\\python\\prospector.vim	/^function! ale_linters#python#prospector#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycodestyle#GetCommand	plugged\\ale\\ale_linters\\python\\pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pycodestyle#GetExecutable	plugged\\ale\\ale_linters\\python\\pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycodestyle#Handle	plugged\\ale\\ale_linters\\python\\pycodestyle.vim	/^function! ale_linters#python#pycodestyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyflakes#GetCommand	plugged\\ale\\ale_linters\\python\\pyflakes.vim	/^function! ale_linters#python#pyflakes#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyflakes#GetExecutable	plugged\\ale\\ale_linters\\python\\pyflakes.vim	/^function! ale_linters#python#pyflakes#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyflakes#Handle	plugged\\ale\\ale_linters\\python\\pyflakes.vim	/^function! ale_linters#python#pyflakes#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylint#GetCommand	plugged\\ale\\ale_linters\\python\\pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylint#GetExecutable	plugged\\ale\\ale_linters\\python\\pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#Handle	plugged\\ale\\ale_linters\\python\\pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyls#GetCommand	plugged\\ale\\ale_linters\\python\\pyls.vim	/^function! ale_linters#python#pyls#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyls#GetExecutable	plugged\\ale\\ale_linters\\python\\pyls.vim	/^function! ale_linters#python#pyls#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyre#GetCommand	plugged\\ale\\ale_linters\\python\\pyre.vim	/^function! ale_linters#python#pyre#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyre#GetExecutable	plugged\\ale\\ale_linters\\python\\pyre.vim	/^function! ale_linters#python#pyre#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#GetCommand	plugged\\ale\\ale_linters\\python\\vulture.vim	/^function! ale_linters#python#vulture#GetCommand(buffer) abort$/;"	f
ale_linters#python#vulture#GetExecutable	plugged\\ale\\ale_linters\\python\\vulture.vim	/^function! ale_linters#python#vulture#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#Handle	plugged\\ale\\ale_linters\\python\\vulture.vim	/^function! ale_linters#python#vulture#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmlfmt#Handle	plugged\\ale\\ale_linters\\qml\\qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmllint#Handle	plugged\\ale\\ale_linters\\qml\\qmllint.vim	/^function! ale_linters#qml#qmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#r#lintr#GetCommand	plugged\\ale\\ale_linters\\r\\lintr.vim	/^function! ale_linters#r#lintr#GetCommand(buffer) abort$/;"	f
ale_linters#reason#merlin#Handle	plugged\\ale\\ale_linters\\reason\\merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#rst#rstcheck#GetCommand	plugged\\ale\\ale_linters\\rst\\rstcheck.vim	/^function! ale_linters#rst#rstcheck#GetCommand(buffer) abort$/;"	f
ale_linters#rst#rstcheck#Handle	plugged\\ale\\ale_linters\\rst\\rstcheck.vim	/^function! ale_linters#rst#rstcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	plugged\\ale\\ale_linters\\ruby\\brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#brakeman#Handle	plugged\\ale\\ale_linters\\ruby\\brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetCommand	plugged\\ale\\ale_linters\\ruby\\rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetExecutable	plugged\\ale\\ale_linters\\ruby\\rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetExecutable(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#Handle	plugged\\ale\\ale_linters\\ruby\\rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#GetCommand	plugged\\ale\\ale_linters\\ruby\\reek.vim	/^function! ale_linters#ruby#reek#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#ruby#reek#Handle	plugged\\ale\\ale_linters\\ruby\\reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#VersionCheck	plugged\\ale\\ale_linters\\ruby\\reek.vim	/^function! ale_linters#ruby#reek#VersionCheck(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	plugged\\ale\\ale_linters\\ruby\\rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetType	plugged\\ale\\ale_linters\\ruby\\rubocop.vim	/^function! ale_linters#ruby#rubocop#GetType(severity) abort$/;"	f
ale_linters#ruby#rubocop#Handle	plugged\\ale\\ale_linters\\ruby\\rubocop.vim	/^function! ale_linters#ruby#rubocop#Handle(buffer, lines) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	plugged\\ale\\ale_linters\\rust\\cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCommand	plugged\\ale\\ale_linters\\rust\\cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#rust#cargo#VersionCheck	plugged\\ale\\ale_linters\\rust\\cargo.vim	/^function! ale_linters#rust#cargo#VersionCheck(buffer) abort$/;"	f
ale_linters#rust#rls#GetCommand	plugged\\ale\\ale_linters\\rust\\rls.vim	/^function! ale_linters#rust#rls#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rls#GetProjectRoot	plugged\\ale\\ale_linters\\rust\\rls.vim	/^function! ale_linters#rust#rls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	plugged\\ale\\ale_linters\\rust\\rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#GetCommand	plugged\\ale\\ale_linters\\scala\\scalastyle.vim	/^function! ale_linters#scala#scalastyle#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#Handle	plugged\\ale\\ale_linters\\scala\\scalastyle.vim	/^function! ale_linters#scala#scalastyle#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#sasslint#GetCommand	plugged\\ale\\ale_linters\\scss\\sasslint.vim	/^function! ale_linters#scss#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#scsslint#Handle	plugged\\ale\\ale_linters\\scss\\scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#language_server#GetCommand	plugged\\ale\\ale_linters\\sh\\language_server.vim	/^function! ale_linters#sh#language_server#GetCommand(buffer) abort$/;"	f
ale_linters#sh#language_server#GetExecutable	plugged\\ale\\ale_linters\\sh\\language_server.vim	/^function! ale_linters#sh#language_server#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#language_server#GetProjectRoot	plugged\\ale\\ale_linters\\sh\\language_server.vim	/^function! ale_linters#sh#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	plugged\\ale\\ale_linters\\sh\\shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#GetExecutable	plugged\\ale\\ale_linters\\sh\\shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	plugged\\ale\\ale_linters\\sh\\shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#shellcheck#GetCommand	plugged\\ale\\ale_linters\\sh\\shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#sh#shellcheck#GetDialectArgument	plugged\\ale\\ale_linters\\sh\\shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetDialectArgument(buffer) abort$/;"	f
ale_linters#sh#shellcheck#GetExecutable	plugged\\ale\\ale_linters\\sh\\shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shellcheck#Handle	plugged\\ale\\ale_linters\\sh\\shellcheck.vim	/^function! ale_linters#sh#shellcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#shellcheck#VersionCheck	plugged\\ale\\ale_linters\\sh\\shellcheck.vim	/^function! ale_linters#sh#shellcheck#VersionCheck(buffer) abort$/;"	f
ale_linters#slim#slimlint#GetCommand	plugged\\ale\\ale_linters\\slim\\slimlint.vim	/^function! ale_linters#slim#slimlint#GetCommand(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	plugged\\ale\\ale_linters\\slim\\slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sml#smlnj_cm#GetCommand	plugged\\ale\\ale_linters\\sml\\smlnj_cm.vim	/^function! ale_linters#sml#smlnj_cm#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solhint#Handle	plugged\\ale\\ale_linters\\solidity\\solhint.vim	/^function! ale_linters#solidity#solhint#Handle(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	plugged\\ale\\ale_linters\\spec\\rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer) abort$/;"	f
ale_linters#spec#rpmlint#Handle	plugged\\ale\\ale_linters\\spec\\rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	plugged\\ale\\ale_linters\\sql\\sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
ale_linters#stylus#stylelint#GetCommand	plugged\\ale\\ale_linters\\stylus\\stylelint.vim	/^function! ale_linters#stylus#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#Handle	plugged\\ale\\ale_linters\\swift\\swiftlint.vim	/^function! ale_linters#swift#swiftlint#Handle(buffer, lines) abort$/;"	f
ale_linters#tcl#nagelfar#GetCommand	plugged\\ale\\ale_linters\\tcl\\nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetCommand(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#Handle	plugged\\ale\\ale_linters\\tcl\\nagelfar.vim	/^function! ale_linters#tcl#nagelfar#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#tflint#GetCommand	plugged\\ale\\ale_linters\\terraform\\tflint.vim	/^function! ale_linters#terraform#tflint#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#tflint#Handle	plugged\\ale\\ale_linters\\terraform\\tflint.vim	/^function! ale_linters#terraform#tflint#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#chktex#GetCommand	plugged\\ale\\ale_linters\\tex\\chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	plugged\\ale\\ale_linters\\tex\\chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#lacheck#Handle	plugged\\ale\\ale_linters\\tex\\lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#thrift#thrift#GetCommand	plugged\\ale\\ale_linters\\thrift\\thrift.vim	/^function! ale_linters#thrift#thrift#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#Handle	plugged\\ale\\ale_linters\\thrift\\thrift.vim	/^function! ale_linters#thrift#thrift#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#tslint#GetCommand	plugged\\ale\\ale_linters\\typescript\\tslint.vim	/^function! ale_linters#typescript#tslint#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	plugged\\ale\\ale_linters\\typescript\\tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#typecheck#Handle	plugged\\ale\\ale_linters\\typescript\\typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#iverilog#GetCommand	plugged\\ale\\ale_linters\\verilog\\iverilog.vim	/^function! ale_linters#verilog#iverilog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#iverilog#Handle	plugged\\ale\\ale_linters\\verilog\\iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#verilator#GetCommand	plugged\\ale\\ale_linters\\verilog\\verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	plugged\\ale\\ale_linters\\verilog\\verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCommand	plugged\\ale\\ale_linters\\vim\\ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCommand(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetExecutable	plugged\\ale\\ale_linters\\vim\\ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetExecutable(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#Handle	plugged\\ale\\ale_linters\\vim\\ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vint#GetCommand	plugged\\ale\\ale_linters\\vim\\vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#vim#vint#GetExecutable	plugged\\ale\\ale_linters\\vim\\vint.vim	/^function! ale_linters#vim#vint#GetExecutable(buffer) abort$/;"	f
ale_linters#vim#vint#Handle	plugged\\ale\\ale_linters\\vim\\vint.vim	/^function! ale_linters#vim#vint#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vint#VersionCommand	plugged\\ale\\ale_linters\\vim\\vint.vim	/^function! ale_linters#vim#vint#VersionCommand(buffer) abort$/;"	f
ale_linters#vue#vls#GetProjectRoot	plugged\\ale\\ale_linters\\vue\\vls.vim	/^function! ale_linters#vue#vls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetCommand	plugged\\ale\\ale_linters\\xml\\xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	plugged\\ale\\ale_linters\\xml\\xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#swaglint#Handle	plugged\\ale\\ale_linters\\yaml\\swaglint.vim	/^function! ale_linters#yaml#swaglint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#yamllint#GetCommand	plugged\\ale\\ale_linters\\yaml\\yamllint.vim	/^function! ale_linters#yaml#yamllint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#yamllint#Handle	plugged\\ale\\ale_linters\\yaml\\yamllint.vim	/^function! ale_linters#yaml#yamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yang#yang_lsp#GetProjectRoot	plugged\\ale\\ale_linters\\yang\\yang_lsp.vim	/^function! ale_linters#yang#yang_lsp#GetProjectRoot(buffer) abort$/;"	f
alignment	plugged\\vim-json\\json-test.json	/^        "alignment": "center"$/;"	s	object:widget.image
alignment	plugged\\vim-json\\json-test.json	/^        "alignment": "center",$/;"	s	object:widget.text
all	plugged\\html5.vim\\Makefile	/^all: install-deps install$/;"	t
all	plugged\\supertab\\Makefile	/^all: dist$/;"	t
all	plugged\\tagbar-phpctags.vim\\Makefile	/^all: bin\/phpctags$/;"	t
all	plugged\\vim-localvimrc\\Makefile	/^all: doc package$/;"	t
another_function	plugged\\vim-matchup\\test\\issues\\3\\test.sql	/^create or replace function another_function()$/;"	f
answer	plugged\\ale\\test\\json_files\\testfile.json	/^{"answer":42}$/;"	n
anyHub	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^anyHub = AnyHub()$/;"	v
append	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def append(self, line, line_number=-1):$/;"	m	class:VimBufferProxy
appendLine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def appendLine(self, line):$/;"	m	class:LfInstance
archive	plugged\\tagbar-phpctags.vim\\Makefile	/^archive: build\/tagbar-phpctags-$(version).zip$/;"	t
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple $1 expand $1 $0"'$/;"	v	class:Anon_NoTrigger_Multi
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple $1 expand $1 $0", "abc"'$/;"	v	class:Anon_Trigger_Multi
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple expand"'$/;"	v	class:Anon_NoTrigger_AfterSpace
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple expand"'$/;"	v	class:Anon_NoTrigger_Simple
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple expand", ".*abc", "desc", "r"'$/;"	v	class:Anon_Trigger_Opts
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple expand", "abc"'$/;"	v	class:Anon_Trigger_Simple
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = '"simple expand", "abc"'$/;"	v	class:Anon_Trigger_Twice
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = ''$/;"	v	class:_AnonBase
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = r"':latex:\\`$1\\`$0'"$/;"	v	class:Anon_NoTrigger_BeginningOfLine
args	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    args = r"':latex:\\`$1\\`$0'"$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
args	plugged\\ultisnips\\test\\test_Autocommands.py	/^    args = ''$/;"	v	class:Autocommands
args	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    args = '".*test", "simple expand", "desc", "r", "all", 0'$/;"	v	class:AddFunc_Opt
args	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    args = '"test", "simple expand", "desc", "", "all", 0'$/;"	v	class:AddFunc_Simple
args	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    args = ''$/;"	v	class:_AddFuncBase
aria_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
aria_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes_value	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let aria_attributes_value = {$/;"	v
array_index_by_col	plugged\\phpcomplete.vim\\bin\\generator\\tools.php	/^function array_index_by_col($arr, $col, $overwrite_duplicate = true) {$/;"	f
as_unicode	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def as_unicode(string):$/;"	f
as_vimencoding	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def as_vimencoding(string):$/;"	f
asyncrun#execute	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#execute(mode, cwd, save)$/;"	f
asyncrun#fullname	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#fullname(f)$/;"	f
asyncrun#get_root	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#get_root(path, ...)$/;"	f
asyncrun#path_join	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#path_join(home, name)$/;"	f
asyncrun#quickfix_toggle	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#quickfix_toggle(size, ...)$/;"	f
asyncrun#run	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#run(bang, opts, args, ...)$/;"	f
asyncrun#status	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#status()$/;"	f
asyncrun#stop	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#stop(bang)$/;"	f
asyncrun#version	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! asyncrun#version()$/;"	f
asyncrun_augroup	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	augroup asyncrun_augroup$/;"	a
attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let attributes_value = {$/;"	v
author	plugged\\tcomment_vim\\addon-info.json	/^    "author" : "Tom Link <micathom at gmail com>",$/;"	s
author	plugged\\vim-snippets\\addon-info.json	/^  "author" : "community",$/;"	s
autofill_tokens	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name',/;"	v
autoload/*.vim	plugged\\vim-matchup\\.projections.json	/^  "autoload\/*.vim": {"type": "autoload"},$/;"	o
b	plugged\\phpcomplete.vim\\tests\\fixtures\\GetFunctionReturnTypeHint\\functions.php	/^	public function returnBar($a, $b = 'foo') : Bar {$/;"	v
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = '', ''$/;"	v	class:TestEmptyString
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'Hello', 'Hello\\nWorld\\nWorld\\nWorld'$/;"	v	class:TestLotsaNewlines
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'abc', 'def'$/;"	v	class:TestNoSubstring
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'abcdef', 'abcdef'$/;"	v	class:TestAllMatch
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = 'hasomelongertextbl', 'hol'$/;"	v	class:TestCommonCharacters
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar1
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_BackspaceOneChar
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_DeleteOneChar
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    a, b = [], []$/;"	v	class:TestGuessing_Noop0
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'Vorne Hinten'$/;"	v	class:TestCheapDelete
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'Vorne hallo  Hinten'$/;"	v	class:TestRealLife1
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'hallo Blah mitte=sdfdsfsd\\nhallo b mittekjshdkfhkhsdfdsf'$/;"	v	class:TestCrash
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'hallo End t'$/;"	v	class:TestRealLife
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'hi first line\\nsecond line k world'$/;"	v	class:MultiLine
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'n'$/;"	v	class:TestWithNewline
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 's'$/;"	v	class:MatchIsTooCheap
b	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    b = 'this is it a this is it'$/;"	v	class:TestUltiSnipsProblem
b	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let b = '\\(  \\)'$/;"	v
b2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type.php	/^$b2 = new Baz2;$/;"	v
b3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^$b3 = new Baz3;$/;"	v
b:SuperTabContextTextMemberPatterns	plugged\\supertab\\ftplugin\\html.vim	/^  let b:SuperTabContextTextMemberPatterns = ['<\/']$/;"	v
b:SuperTabContextTextMemberPatterns	plugged\\supertab\\ftplugin\\xml.vim	/^  let b:SuperTabContextTextMemberPatterns = ['<\/']$/;"	v
b:SuperTabContextTextOmniPrecedence	plugged\\supertab\\ftplugin\\html.vim	/^    let b:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
b:SuperTabContextTextOmniPrecedence	plugged\\supertab\\ftplugin\\xml.vim	/^  let b:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
b:current_syntax	plugged\\LeaderF\\syntax\\leaderf.vim	/^let b:current_syntax = "leaderf"$/;"	v
b:current_syntax	plugged\\ale\\syntax\\ale-fix-suggest.vim	/^let b:current_syntax = 'ale-fix-suggest'$/;"	v
b:current_syntax	plugged\\ale\\syntax\\ale-preview-selection.vim	/^let b:current_syntax = 'ale-preview-selection'$/;"	v
b:current_syntax	plugged\\php.vim\\syntax\\php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	plugged\\phpcomplete.vim\\syntax\\phpcompletetempbuffer.vim	/^let b:current_syntax = "phpcompletetempbuffer"$/;"	v
b:current_syntax	plugged\\tagbar\\syntax\\tagbar.vim	/^let b:current_syntax = "tagbar"$/;"	v
b:current_syntax	plugged\\ultisnips\\syntax\\snippets.vim	/^let b:current_syntax = "snippets"$/;"	v
b:current_syntax	plugged\\ultisnips\\syntax\\snippets_snipmate.vim	/^let b:current_syntax = "snippets"$/;"	v
b:current_syntax	plugged\\vim-javascript\\syntax\\javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	plugged\\vim-json\\syntax\\json.vim	/^let b:current_syntax = "json"$/;"	v
b:current_syntax	plugged\\vim-jsx\\after\\syntax\\jsx.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:did_after_plugin_ultisnips_after	plugged\\ultisnips\\after\\plugin\\UltiSnips_after.vim	/^let b:did_after_plugin_ultisnips_after = 1$/;"	v
b:did_autoload_ultisnips	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^let b:did_autoload_ultisnips = 1$/;"	v
b:did_autoload_ultisnips_map_keys	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^let b:did_autoload_ultisnips_map_keys = 1$/;"	v
b:did_ftplugin	plugged\\ultisnips\\ftplugin\\snippets.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged\\html5.vim\\indent\\html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged\\vim-javascript\\indent\\javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged\\vim-json\\indent\\json.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^  let b:did_indent=s:did_indent$/;"	v
b:did_myftplugin	ftplugin\\php.vim	/^let b:did_myftplugin = 1$/;"	v
b:done_vimsnippets	plugged\\vim-snippets\\plugin\\vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:hi_indent	plugged\\html5.vim\\indent\\html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_lasttick	plugged\\html5.vim\\indent\\html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	plugged\\html5.vim\\indent\\html.vim	/^let b:hi_newstate = {}$/;"	v
b:jsx_js_indentexpr	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^let b:jsx_js_indentexpr = &indentexpr$/;"	v
b:loaded_py_match	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let b:loaded_py_match = 1$/;"	v
b:match_ignorecase	plugged\\ultisnips\\ftplugin\\snippets.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged\\vim-jsx\\after\\ftplugin\\jsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	plugged\\vim-matchup\\after\\ftplugin\\vim_matchup.vim	/^let b:match_skip = 's:comment\\|string\\|vimSynReg'$/;"	v
b:match_skip	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name")$/;"	v
b:match_words	ftplugin\\php.vim	/^let b:match_words='<?php:?>,\\<switch\\>:\\<endswitch\\>,\\<if\\>:\\<elseif\\>:\\<else\\>,\\<whi/;"	v
b:match_words	plugged\\ultisnips\\ftplugin\\snippets.vim	/^  let b:match_words = '^snippet\\>:^endsnippet\\>,^global\\>:^endglobal\\>,\\${:}'$/;"	v
b:match_words	plugged\\vim-jsx\\after\\ftplugin\\jsx.vim	/^  let b:match_words = exists('b:match_words')$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',< highlight \\(\\w\\+\\)\\g{hlend} | but not this >\\ze no cursor:< mid/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',\\%(end\\)\\@<!むめ:endむめも'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',\\<baz\\zebar\\>:\\<barbaz\\>'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',\\<where\\>:\\<wh\\zeen\\>'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',\\<zab\\zsrab\\>:\\<rabzab\\>'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',\\\\begin{\\([^}]\\+\\)}:\\\\end{\\1}'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',\\\\word{\\(.\\{-}\\)}:\\\\endword{\\1}'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',muopen:mumidone:mumidtwo:mumidthree:muclose'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',one😀🐑one:two😐🐑two:three🙁🐑'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',op\\ten:mi\\td:cl\\tose'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',so👔me\\zething:t\\t👕t\\zemid:e👖\\te\\zeend'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words .= ',ぽ:も'$/;"	v
b:match_words	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^  let b:match_words = '\\<\\(\\(foo\\)\\(bar\\)\\):\\3\\2:end\\1'$/;"	v
b:matchup_hotfix	plugged\\vim-matchup\\after\\ftplugin\\c_matchup.vim	/^let b:matchup_hotfix = function('s:c_comments')$/;"	v
b:matchup_matchparen_enabled	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^    let b:matchup_matchparen_enabled = 0$/;"	v
b:matchup_matchparen_fallback	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^    let b:matchup_matchparen_fallback = 0$/;"	v
b:matchup_matchparen_timeout	plugged\\vim-matchup\\after\\ftplugin\\ocaml_matchup.vim	/^let b:matchup_matchparen_timeout=100$/;"	v
b:sql_type_override	plugged\\php.vim\\syntax\\php.vim	/^    let b:sql_type_override='mysql'$/;"	v
b:ultisnips_override_snipmate	plugged\\ultisnips\\syntax\\snippets_snipmate.vim	/^let b:ultisnips_override_snipmate = 1$/;"	v
b:underscore_to_camel_case_first_upper	ftplugin\\vim.vim	/^let b:underscore_to_camel_case_first_upper = 1$/;"	v
b:undo_ftplugin	plugged\\ultisnips\\ftplugin\\snippets.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	plugged\\vim-javascript\\after\\ftplugin\\javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged\\vim-javascript\\after\\ftplugin\\javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged\\vim-matchup\\after\\ftplugin\\ocaml_matchup.vim	/^let b:undo_ftplugin .= ' | unlet! b:matchup_matchparen_timeout'$/;"	v
b:undo_indent	plugged\\html5.vim\\indent\\html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	plugged\\vim-javascript\\indent\\javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^function bar(){}$/;"	f	namespace:NS1
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_interface_implemented.php	/^	public function bar($baz = 42);$/;"	f	interface:FooAble
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public $bar;$/;"	v	class:Foo
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo.class.php	/^    public function bar( $baz = 'foo') {$/;"	f	class:FooClass
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo2.class.php	/^	public function bar() {$/;"	f	class:Foo2
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo3.class.php	/^	public function bar() {$/;"	f	class:Foo3
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_whitespace.class.php	/^    public function bar( $baz = 'foo')$/;"	f	class:FooClass
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_with_extra_content.class.php	/^    public function bar( $baz = 'foo') {$/;"	f	class:FooClass
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_with_extra_content.class.php	/^function bar() {$/;"	f
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\same_classname\\foo.class.php	/^    public function bar()$/;"	f
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassLocation\\foo.class.php	/^    public function bar() {$/;"	f	class:Foo
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    public $bar;$/;"	v	class:Foo
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo.class.php	/^    public function bar() {$/;"	f	class:FooClass
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function bar() {$/;"	f	class:FooNS\\SubNameSpace\\FooExtension
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_with_whitespace.class.php	/^        public function bar() {$/;"	f	class:FooClass
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\parent.php	/^    public function bar() {$/;"	f	class:Foo
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\stuff_with_the_word_class_in_them.php	/^	public function bar() {$/;"	f	class:Foo
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^    public function bar()$/;"	f	class:Foo
bar	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^function bar(){}$/;"	f	namespace:NS1
bar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassLocation\\foo.class.php	/^    function bar2() {$/;"	f	class:Foo2
bar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassLocation\\foo.class.php	/^    function bar2() {$/;"	f	class:Foo3
bar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    private $bar2;$/;"	v	class:Foo
bar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$bar2 = $foo2->return_bar();$/;"	v
bar3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    protected $bar3;$/;"	v	class:Foo
bar3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$bar3 = $foo3->return_bar();$/;"	v
barThis	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function barThis() {$/;"	f	class:FooNS\\Foo
barsub	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^function barsub(){}$/;"	f	namespace:NS1\\SUBNS
barsub	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^function barsub(){$/;"	f	namespace:NS1\\SUBNS
barsubsub	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\namespaced_foo.php	/^function barsubsub(){}$/;"	f	namespace:NS1\\SUBNS\\SUBSUB
barsubsub	plugged\\phpcomplete.vim\\tests\\fixtures\\common\\namespaced_foo.php	/^function barsubsub(){$/;"	f	namespace:NS1\\SUBNS\\SUBSUB
basename	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def basename(self):  # pylint:disable=no-self-use$/;"	m	class:SnippetUtil
baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\completion_in_function_insides.php	/^function baz() {$/;"	f
baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\typehinted_functions.php	/^FuNcTiOn baz    (  FooClass2 $bar) {$/;"	f
baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\var_comment_mark.php	/^function baz() {$/;"	f
baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentFunctionBoundaries\\test.php	/^$baz = new FooBar(); \/\/ line after a function but not inside one$/;"	v
baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo.php	/^	public function baz() {$/;"	f	class:Foo
baz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^	public function baz() {$/;"	f	class:NS1\\Foo
baz2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\typehinted_functions.php	/^function baz2(RenamedFoo $bar) {$/;"	f
baz3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_docblock.php	/^function baz3($/;"	f
bazFunction	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\typehinted_functions.php	/^    function bazFunction(FooClass9 $bar)$/;"	f	class:BazClass
bcmath	plugged\\php.vim\\scripts\\syntax.ini	/^bcmath = yes$/;"	k	section:extensions
beg	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t beg;$/;"	m	struct:HighlightGroup	typeref:typename:uint16_t	file:
beg	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t beg;$/;"	m	struct:ValueElements	typeref:typename:uint16_t	file:
better_whitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^    augroup better_whitespace$/;"	a
bin	plugged\\tagbar-phpctags.vim\\Makefile	/^bin:$/;"	t
bin/phpctags	plugged\\tagbar-phpctags.vim\\Makefile	/^bin\/phpctags: build\/phpctags-$(version)\/phpctags | bin$/;"	t
bindeval	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def bindeval(text):$/;"	f
blocks	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$blocks = array($/;"	v
body_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblu/;"	v
body_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let body_attributes = {}$/;"	v
buf	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^buf = VimBuffer()  # pylint:disable=invalid-name$/;"	v
bufExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^bufExplManager = BufExplManager()$/;"	v
bufTagExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^bufTagExplManager = BufTagExplManager()$/;"	v
buffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def buffer(self):$/;"	m	class:LfInstance
buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def buffer(self):$/;"	m	class:SnippetUtil
buffer_maps	plugged\\ultisnips\\test\\test_Selection.py	/^    buffer_maps = ('', '')$/;"	v	class:_SelectModeMappings
buffer_maps	plugged\\ultisnips\\test\\test_Selection.py	/^    buffer_maps = ('H', 'blah')$/;"	v	class:SelectModeMappings_BufferLocalMappings_ECR
build	plugged\\tagbar-phpctags.vim\\Makefile	/^build:$/;"	t
build/phpctags-$(version)	plugged\\tagbar-phpctags.vim\\Makefile	/^build\/phpctags-$(version): build\/phpctags-$(version).zip | build$/;"	t
build/phpctags-$(version).zip	plugged\\tagbar-phpctags.vim\\Makefile	/^build\/phpctags-$(version).zip: | build$/;"	t
build/phpctags-$(version)/phpctags	plugged\\tagbar-phpctags.vim\\Makefile	/^build\/phpctags-$(version)\/phpctags: | build\/phpctags-$(version)$/;"	t
build/tagbar-phpctags-$(version).zip	plugged\\tagbar-phpctags.vim\\Makefile	/^build\/tagbar-phpctags-$(version).zip: $(source)$/;"	t
bundle	plugged\\html5.vim\\Makefile	/^bundle: bundle-deps$/;"	t
bundle	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^    bundle = sys.argv[1]$/;"	v
bundle-deps	plugged\\html5.vim\\Makefile	/^bundle-deps:$/;"	t
byte2col	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def byte2col(line, nbyte):$/;"	f
bz2	plugged\\php.vim\\scripts\\syntax.ini	/^bz2 = yes$/;"	k	section:extensions
c	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> c             :exec g:Lf_py "fileExplManager.clearSelections()"<C/;"	m
c	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> c             :exec g:Lf_py "mruExplManager.clearSelections()"<CR/;"	m
c	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\clone.php	/^$c = new DateTime;$/;"	v
c	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def c(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
c	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let c = "\\\\(  \\\\)"$/;"	v
calendar	plugged\\php.vim\\scripts\\syntax.ini	/^calendar = no$/;"	k	section:extensions
caveats	plugged\\phpcomplete.vim\\misc\\ctags-better-php.rb	/^  def caveats$/;"	f	class:CtagsBetterPhp
charset	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let charset = [$/;"	v
check-require	plugged\\html5.vim\\Makefile	/^check-require:$/;"	t
check_required_vim_version	plugged\\ultisnips\\test\\test_Autotrigger.py	/^def check_required_vim_version(test):$/;"	f
check_required_vim_version	plugged\\ultisnips\\test\\test_Editing.py	/^def check_required_vim_version(test):$/;"	f
children	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def children(self):$/;"	m	class:EditableTextObject
clean	plugged\\html5.vim\\Makefile	/^clean: clean-bundle-deps$/;"	t
clean	plugged\\supertab\\Makefile	/^clean:$/;"	t
clean	plugged\\tagbar-phpctags.vim\\Makefile	/^clean:$/;"	t
clean	plugged\\vim-localvimrc\\Makefile	/^clean:$/;"	t
clean-bundle-deps	plugged\\html5.vim\\Makefile	/^clean-bundle-deps:$/;"	t
cleanup	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def cleanup(self):$/;"	m	class:BufTagExplorer
cleanup	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def cleanup(self):$/;"	m	class:Explorer
cleanup	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def cleanup(self):$/;"	m	class:Explorer
cleanup	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def cleanup(self):$/;"	m	class:FileExplorer
cleanup	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def cleanup(self):$/;"	m	class:FunctionExplorer
clear	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def clear(self):$/;"	m	class:LfCli
clearSelections	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def clearSelections(self):$/;"	m	class:Manager
clear_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_snippet_dictionary.py	/^    def clear_snippets(self, priority, triggers):$/;"	m	class:SnippetDictionary
clear_temp	plugged\\ultisnips\\test\\vim_interface.py	/^    def clear_temp(self):$/;"	m	class:TempFileManager
clone_plugin	plugged\\ultisnips\\test_all.py	/^def clone_plugin(plugin):$/;"	f
closetag.vim	plugged\\vim-closetag\\README.md	/^closetag.vim$/;"	c
clz_table_8bit	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    static uint8_t clz_table_8bit[256] =$/;"	v	typeref:typename:uint8_t[256]	file:
code	plugged\\ale\\run-tests.bat	/^set code=%ERRORLEVEL%$/;"	v
col	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t col;$/;"	m	struct:HighlightPos	typeref:typename:uint16_t	file:
col2byte	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def col2byte(line, col):$/;"	f
col_num	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t col_num;$/;"	m	struct:TextContext	typeref:typename:uint16_t	file:
colorschemeExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^colorschemeExplManager = ColorschemeExplManager()$/;"	v
com_dotnet	plugged\\php.vim\\scripts\\syntax.ini	/^com_dotnet = no$/;"	k	section:extensions
command	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def command(cmd):$/;"	f
commentedFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$commentedFoo = new CommentedFoo;$/;"	v
commented_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\commented_foo.class.php	/^    public function commented_method($foo, $bar, $baz = '') {$/;"	f	class:Foo
commented_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\commented_foo.class.php	/^    public $commented_property;$/;"	v	class:Foo
commentedfoo	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public function commentedfoo($foo, $bar, $baz = '') {$/;"	f	class:Foo
comments_and_strings	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentFunctionBoundaries\\test.php	/^function comments_and_strings() {$/;"	f
common_plain_old_function	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^function common_plain_old_function(){}$/;"	f
common_plain_old_function_with_arguments	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^function common_plain_old_function_with_arguments($a, $b=''){}$/;"	f
common_private_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    private function common_private_method($foo) { }$/;"	f	class:CommonFoo
common_private_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    private static function common_private_static_method($foo) { }$/;"	f	class:CommonFoo
common_protected_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    protected function common_protected_method($foo) { }$/;"	f	class:CommonFoo
common_protected_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    protected static function common_protected_static_method($foo) { }$/;"	f	class:CommonFoo
common_public_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    public function common_public_method($foo) { }$/;"	f	class:CommonFoo
common_public_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    public static function common_public_static_method($foo) { }$/;"	f	class:CommonFoo
common_static_public_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteGeneral\\functions.php	/^    static public function common_static_public_method($foo) { }$/;"	f	class:CommonFoo
complete	plugged\\vim-snippets\\pythonx\\vimsnippets.py	/^def complete(tab, opts):$/;"	f
completeThis	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function completeThis() {$/;"	f	class:FooNS\\Foo
completeThisGetSomething	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function completeThisGetSomething() {$/;"	f	class:FooNS\\Foo
config	plugged\\html5.vim\\Makefile	/^config:$/;"	t
configuration	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$configuration = parse_ini_file($/;"	v
connections	autoload\\sftpsync\\python\\sftpsync.py	/^	connections = {}$/;"	v	class:SftpSync
conserve	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def conserve(self):$/;"	m	class:VisualContentPreserver
conserve_placeholder	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def conserve_placeholder(self, placeholder):$/;"	m	class:VisualContentPreserver
context	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def context(self):$/;"	m	class:SnippetDefinition
context	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def context(self):$/;"	m	class:SnippetUtil
context	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	context Context$/;"	v	package:main
conv	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def conv(obj):$/;"	f	function:escape	file:
convert_keys	plugged\\ultisnips\\test\\vim_interface.py	/^    def convert_keys(self, keys):$/;"	m	class:VimInterfaceWindows
copy	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^        $copy = preg_quote($groups['copy'], \/* $delimiter = *\/ '\/');$/;"	v
core	plugged\\php.vim\\scripts\\syntax.ini	/^core = yes$/;"	k	section:extensions
core_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], '/;"	v
could_match	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def could_match(self, before):$/;"	m	class:SnippetDefinition
cr	plugged\\supertab\\plugin\\supertab.vim	/^      let cr = !(map =~? '\\(^\\|[^)]\\)<cr>' || map =~ 'ExpandCr')$/;"	v
create_directory	plugged\\ultisnips\\test\\vim_interface.py	/^def create_directory(dirname):$/;"	f
crossorigin	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
ctags	plugged\\phpcomplete.vim\\README.md	/^## ctags$/;"	s
ctrlp#acceptfile	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#acceptfile(...)$/;"	f
ctrlp#addfile	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#addfile(ch, file)$/;"	f
ctrlp#autoignore#get_patterns	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! ctrlp#autoignore#get_patterns(root_dir) abort$/;"	f
ctrlp#autoignore#ignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! ctrlp#autoignore#ignore(item, type) abort$/;"	f
ctrlp#autoignore#ignore_close	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! ctrlp#autoignore#ignore_close() abort$/;"	f
ctrlp#autoignore#ignore_init	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! ctrlp#autoignore#ignore_init() abort$/;"	f
ctrlp#bookmarkdir#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#add	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(bang, dir, ...)$/;"	f
ctrlp#bookmarkdir#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#remove	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#buffers	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffertag#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#cmd	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#exit	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#opts	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#call	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#changes#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#cmd	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#exit	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#clearmarkedlist	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#clearmarkedlist()$/;"	f
ctrlp#clr	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clra	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#complen	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#dir#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dirnfile	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#exit	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#files	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#getcline	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getmarkedlist	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#getvar	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#getvar(var)$/;"	f
ctrlp#hicheck	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#igncwd	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#igncwd(cwd)$/;"	f
ctrlp#init	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#j2l	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#line#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\line.vim	/^fu! ctrlp#line#accept(dict)$/;"	f
ctrlp#line#cmd	plugged\\ctrlp.vim\\autoload\\ctrlp\\line.vim	/^fu! ctrlp#line#cmd(mode, ...)$/;"	f
ctrlp#line#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\line.vim	/^fu! ctrlp#line#init(bufnr)$/;"	f
ctrlp#mixed#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#modfilecond	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#mrufiles#add	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#bufs	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#cachefile	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#list	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#opts	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#refresh	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#remove	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#mrufiles#tgrel	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! ctrlp#mrufiles#tgrel()$/;"	f
ctrlp#normcmd	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#nosy	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#progress	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#prtclear	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#quickfix#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#recordhist	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#rmbasedir	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rtscript#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#setdir	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setlcdir	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlines	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#setpathmode	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#setpathmode(pmode, ...)$/;"	f
ctrlp#statusline	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#switchtype	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#syntax	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#tabcount	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tag#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#enter	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#undo#accept	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#enter	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#exit	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#id	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#init	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#utils#cachedir	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachefile	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#fnesc	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#glob	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#globpath	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#lash	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#mkdir	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#opts	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#readfile	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#writecache	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
ctrlp-py-matcher	plugged\\ctrlp-py-matcher\\README.md	/^ctrlp-py-matcher$/;"	c
ctrlp.vim	plugged\\ctrlp.vim\\readme.md	/^# ctrlp.vim$/;"	c
ctrlspace#api#BufNr	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#BufNr()$/;"	f
ctrlspace#api#BufferList	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#BufferList(tabnr)$/;"	f
ctrlspace#api#Buffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#Buffers(tabnr)$/;"	f
ctrlspace#api#Guitablabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#Guitablabel()$/;"	f
ctrlspace#api#Statusline	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#Statusline()$/;"	f
ctrlspace#api#StatuslineModeSegment	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#StatuslineModeSegment(...)$/;"	f
ctrlspace#api#StatuslineTabSegment	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#StatuslineTabSegment()$/;"	f
ctrlspace#api#TabBuffersNumber	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#TabBuffersNumber(tabnr)$/;"	f
ctrlspace#api#TabList	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#TabList()$/;"	f
ctrlspace#api#TabModified	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#TabModified(tabnr)$/;"	f
ctrlspace#api#TabTitle	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#TabTitle(tabnr, bufnr, bufname)$/;"	f
ctrlspace#api#Tabline	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! ctrlspace#api#Tabline()$/;"	f
ctrlspace#bookmarks#AddFirstBookmark	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#AddFirstBookmark()$/;"	f
ctrlspace#bookmarks#AddNewBookmark	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#AddNewBookmark(...)$/;"	f
ctrlspace#bookmarks#AddToBookmarks	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#AddToBookmarks(directory, name)$/;"	f
ctrlspace#bookmarks#Bookmarks	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#Bookmarks()$/;"	f
ctrlspace#bookmarks#ChangeBookmarkDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#ChangeBookmarkDirectory(nr)$/;"	f
ctrlspace#bookmarks#ChangeBookmarkName	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#ChangeBookmarkName(nr)$/;"	f
ctrlspace#bookmarks#FindActiveBookmark	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#FindActiveBookmark()$/;"	f
ctrlspace#bookmarks#GoToBookmark	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#GoToBookmark(nr)$/;"	f
ctrlspace#bookmarks#RemoveBookmark	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#RemoveBookmark(nr)$/;"	f
ctrlspace#bookmarks#SetBookmarks	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^function! ctrlspace#bookmarks#SetBookmarks(value)$/;"	f
ctrlspace#buffers#AddBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#AddBuffer()$/;"	f
ctrlspace#buffers#Buffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#Buffers(tabnr)$/;"	f
ctrlspace#buffers#CloseBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#CloseBuffer()$/;"	f
ctrlspace#buffers#CopyBufferToTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#CopyBufferToTab(tab)$/;"	f
ctrlspace#buffers#DeleteBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#DeleteBuffer()$/;"	f
ctrlspace#buffers#DeleteForeignBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#DeleteForeignBuffers(internal)$/;"	f
ctrlspace#buffers#DeleteHiddenNonameBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#DeleteHiddenNonameBuffers(internal)$/;"	f
ctrlspace#buffers#DetachBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#DetachBuffer()$/;"	f
ctrlspace#buffers#GoToBufferOrFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#GoToBufferOrFile(direction)$/;"	f
ctrlspace#buffers#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#Init()$/;"	f
ctrlspace#buffers#LoadBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#LoadBuffer(...)$/;"	f
ctrlspace#buffers#LoadManyBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#LoadManyBuffers(...)$/;"	f
ctrlspace#buffers#MoveBufferToTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#MoveBufferToTab(tab)$/;"	f
ctrlspace#buffers#SelectedBufferName	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#SelectedBufferName()$/;"	f
ctrlspace#buffers#ZoomBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! ctrlspace#buffers#ZoomBuffer(nr, ...)$/;"	f
ctrlspace#context#Configuration	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! ctrlspace#context#Configuration()$/;"	f
ctrlspace#context#PluginBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! ctrlspace#context#PluginBuffer()$/;"	f
ctrlspace#context#PluginFolder	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! ctrlspace#context#PluginFolder()$/;"	f
ctrlspace#context#Separator	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! ctrlspace#context#Separator()$/;"	f
ctrlspace#context#SetPluginBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! ctrlspace#context#SetPluginBuffer(value)$/;"	f
ctrlspace#context#SymbolSizes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! ctrlspace#context#SymbolSizes()$/;"	f
ctrlspace#engine#CompareByIndex	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! ctrlspace#engine#CompareByIndex(a, b)$/;"	f
ctrlspace#engine#CompareByNoiseAndText	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! ctrlspace#engine#CompareByNoiseAndText(a, b)$/;"	f
ctrlspace#engine#CompareByText	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! ctrlspace#engine#CompareByText(a, b)$/;"	f
ctrlspace#engine#Content	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! ctrlspace#engine#Content()$/;"	f
ctrlspace#files#ClearAll	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#ClearAll()$/;"	f
ctrlspace#files#CollectFiles	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#CollectFiles()$/;"	f
ctrlspace#files#CopyFileOrBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#CopyFileOrBuffer()$/;"	f
ctrlspace#files#EditFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#EditFile()$/;"	f
ctrlspace#files#ExploreDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#ExploreDirectory()$/;"	f
ctrlspace#files#Files	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#Files()$/;"	f
ctrlspace#files#GoToDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#GoToDirectory(back)$/;"	f
ctrlspace#files#Items	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#Items()$/;"	f
ctrlspace#files#LoadFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#LoadFile(...)$/;"	f
ctrlspace#files#LoadManyFiles	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#LoadManyFiles(...)$/;"	f
ctrlspace#files#RefreshFiles	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#RefreshFiles()$/;"	f
ctrlspace#files#RemoveFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#RemoveFile()$/;"	f
ctrlspace#files#RenameFileOrBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#RenameFileOrBuffer()$/;"	f
ctrlspace#files#SelectedFileName	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#SelectedFileName()$/;"	f
ctrlspace#files#ZoomFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! ctrlspace#files#ZoomFile()$/;"	f
ctrlspace#help#AddMapping	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! ctrlspace#help#AddMapping(funcName, mapName, entry)$/;"	f
ctrlspace#help#CloseExternalWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! ctrlspace#help#CloseExternalWindow()$/;"	f
ctrlspace#help#Descriptions	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! ctrlspace#help#Descriptions()$/;"	f
ctrlspace#help#DisplayHelp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! ctrlspace#help#DisplayHelp(fill)$/;"	f
ctrlspace#help#HelpMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! ctrlspace#help#HelpMap()$/;"	f
ctrlspace#help#OpenInNewWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! ctrlspace#help#OpenInNewWindow()$/;"	f
ctrlspace#init#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^function! ctrlspace#init#Init()$/;"	f
ctrlspace#jumps#IncrementJumpCounter	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^function! ctrlspace#jumps#IncrementJumpCounter()$/;"	f
ctrlspace#jumps#Jump	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^function! ctrlspace#jumps#Jump(direction)$/;"	f
ctrlspace#keys#AddMapping	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#AddMapping(funcName, mapName, keys)$/;"	f
ctrlspace#keys#CharacterClasses	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#CharacterClasses()$/;"	f
ctrlspace#keys#DefaultKey	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#DefaultKey()$/;"	f
ctrlspace#keys#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#Init()$/;"	f
ctrlspace#keys#IsDefaultKey	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#IsDefaultKey()$/;"	f
ctrlspace#keys#KeyMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#KeyMap()$/;"	f
ctrlspace#keys#KeyNames	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#KeyNames()$/;"	f
ctrlspace#keys#Keypressed	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#Keypressed(key)$/;"	f
ctrlspace#keys#MarkKeyEscSequence	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#MarkKeyEscSequence()$/;"	f
ctrlspace#keys#SetDefaultMapping	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#SetDefaultMapping(key, action)$/;"	f
ctrlspace#keys#Undefined	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! ctrlspace#keys#Undefined(k)$/;"	f
ctrlspace#keys#bookmark#Add	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^function! ctrlspace#keys#bookmark#Add(k)$/;"	f
ctrlspace#keys#bookmark#Delete	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^function! ctrlspace#keys#bookmark#Delete(k)$/;"	f
ctrlspace#keys#bookmark#Edit	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^function! ctrlspace#keys#bookmark#Edit(k)$/;"	f
ctrlspace#keys#bookmark#GoToBookmark	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^function! ctrlspace#keys#bookmark#GoToBookmark(k)$/;"	f
ctrlspace#keys#bookmark#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^function! ctrlspace#keys#bookmark#Init()$/;"	f
ctrlspace#keys#bookmark#Rename	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^function! ctrlspace#keys#bookmark#Rename(k)$/;"	f
ctrlspace#keys#buffer#CloseBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#CloseBuffer(k)$/;"	f
ctrlspace#keys#buffer#CloseManyWindows	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#CloseManyWindows(k)$/;"	f
ctrlspace#keys#buffer#CloseTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#CloseTab(k)$/;"	f
ctrlspace#keys#buffer#CloseWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#CloseWindow(k)$/;"	f
ctrlspace#keys#buffer#CopyBufferToTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#CopyBufferToTab(k)$/;"	f
ctrlspace#keys#buffer#DeleteBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#DeleteBuffer(k)$/;"	f
ctrlspace#keys#buffer#DeleteForeignBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#DeleteForeignBuffers(k)$/;"	f
ctrlspace#keys#buffer#DeleteHiddenNonameBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#DeleteHiddenNonameBuffers(k)$/;"	f
ctrlspace#keys#buffer#DetachBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#DetachBuffer(k)$/;"	f
ctrlspace#keys#buffer#GoToBufferOrFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#GoToBufferOrFile(k)$/;"	f
ctrlspace#keys#buffer#GoToWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#GoToWindow(k)$/;"	f
ctrlspace#keys#buffer#GoToWindowAndBack	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#GoToWindowAndBack(k)$/;"	f
ctrlspace#keys#buffer#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#Init()$/;"	f
ctrlspace#keys#buffer#LoadBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadBuffer(k)$/;"	f
ctrlspace#keys#buffer#LoadBufferSP	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadBufferSP(k)$/;"	f
ctrlspace#keys#buffer#LoadBufferT	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadBufferT(k)$/;"	f
ctrlspace#keys#buffer#LoadBufferVS	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadBufferVS(k)$/;"	f
ctrlspace#keys#buffer#LoadManyBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadManyBuffers(k)$/;"	f
ctrlspace#keys#buffer#LoadManyBuffersCT	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadManyBuffersCT(k)$/;"	f
ctrlspace#keys#buffer#LoadManyBuffersSP	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadManyBuffersSP(k)$/;"	f
ctrlspace#keys#buffer#LoadManyBuffersT	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadManyBuffersT(k)$/;"	f
ctrlspace#keys#buffer#LoadManyBuffersVS	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#LoadManyBuffersVS(k)$/;"	f
ctrlspace#keys#buffer#MoveBufferToTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#MoveBufferToTab(k)$/;"	f
ctrlspace#keys#buffer#MoveTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#MoveTab(k)$/;"	f
ctrlspace#keys#buffer#NewTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#NewTabLabel(k)$/;"	f
ctrlspace#keys#buffer#NewWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#NewWorkspace(k)$/;"	f
ctrlspace#keys#buffer#RemoveTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#RemoveTabLabel(k)$/;"	f
ctrlspace#keys#buffer#SearchParentDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#SearchParentDirectory(k)$/;"	f
ctrlspace#keys#buffer#SearchParentDirectoryInFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#SearchParentDirectoryInFile(k)$/;"	f
ctrlspace#keys#buffer#SwitchTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#SwitchTab(k)$/;"	f
ctrlspace#keys#buffer#ToggleAllMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#ToggleAllMode(k)$/;"	f
ctrlspace#keys#buffer#ToggleAllModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#ToggleAllModeAndSearch(k)$/;"	f
ctrlspace#keys#buffer#VisibleMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#VisibleMode(k)$/;"	f
ctrlspace#keys#buffer#ZoomMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! ctrlspace#keys#buffer#ZoomMode(k)$/;"	f
ctrlspace#keys#common#BackOrClearSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#BackOrClearSearch(k)$/;"	f
ctrlspace#keys#common#Bottom	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Bottom(k)$/;"	f
ctrlspace#keys#common#Close	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Close(k)$/;"	f
ctrlspace#keys#common#Down	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Down(k)$/;"	f
ctrlspace#keys#common#DownArrow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#DownArrow(k)$/;"	f
ctrlspace#keys#common#End	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#End(k)$/;"	f
ctrlspace#keys#common#EnterSearchMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#EnterSearchMode(k)$/;"	f
ctrlspace#keys#common#HalfScrollDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#HalfScrollDown(k)$/;"	f
ctrlspace#keys#common#HalfScrollUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#HalfScrollUp(k)$/;"	f
ctrlspace#keys#common#Home	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Home(k)$/;"	f
ctrlspace#keys#common#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Init()$/;"	f
ctrlspace#keys#common#LeftMouse2	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#LeftMouse2(k)$/;"	f
ctrlspace#keys#common#LeftRelease	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#LeftRelease(k)$/;"	f
ctrlspace#keys#common#MouseDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#MouseDown(k)$/;"	f
ctrlspace#keys#common#MouseUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#MouseUp(k)$/;"	f
ctrlspace#keys#common#Next	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Next(k)$/;"	f
ctrlspace#keys#common#PageDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#PageDown(k)$/;"	f
ctrlspace#keys#common#PageUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#PageUp(k)$/;"	f
ctrlspace#keys#common#Previous	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Previous(k)$/;"	f
ctrlspace#keys#common#PreviousCR	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#PreviousCR(k)$/;"	f
ctrlspace#keys#common#Quit	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Quit(k)$/;"	f
ctrlspace#keys#common#RestoreNextSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#RestoreNextSearch(k)$/;"	f
ctrlspace#keys#common#RestorePreviousSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#RestorePreviousSearch(k)$/;"	f
ctrlspace#keys#common#ScrollDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ScrollDown(k)$/;"	f
ctrlspace#keys#common#ScrollUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ScrollUp(k)$/;"	f
ctrlspace#keys#common#ToggleBookmarkMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleBookmarkMode(k)$/;"	f
ctrlspace#keys#common#ToggleBookmarkModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleBookmarkModeAndSearch(k)$/;"	f
ctrlspace#keys#common#ToggleBufferMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleBufferMode(k)$/;"	f
ctrlspace#keys#common#ToggleBufferModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleBufferModeAndSearch(k)$/;"	f
ctrlspace#keys#common#ToggleFileMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleFileMode(k)$/;"	f
ctrlspace#keys#common#ToggleFileModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleFileModeAndSearch(k)$/;"	f
ctrlspace#keys#common#ToggleHelp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleHelp(k)$/;"	f
ctrlspace#keys#common#ToggleTabMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleTabMode(k)$/;"	f
ctrlspace#keys#common#ToggleTabModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleTabModeAndSearch(k)$/;"	f
ctrlspace#keys#common#ToggleWorkspaceMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleWorkspaceMode(k)$/;"	f
ctrlspace#keys#common#ToggleWorkspaceModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#ToggleWorkspaceModeAndSearch(k)$/;"	f
ctrlspace#keys#common#Top	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Top(k)$/;"	f
ctrlspace#keys#common#Up	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#Up(k)$/;"	f
ctrlspace#keys#common#UpArrow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! ctrlspace#keys#common#UpArrow(k)$/;"	f
ctrlspace#keys#file#CopyFileOrBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#CopyFileOrBuffer(k)$/;"	f
ctrlspace#keys#file#EditFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#EditFile(k)$/;"	f
ctrlspace#keys#file#ExploreDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#ExploreDirectory(k)$/;"	f
ctrlspace#keys#file#GoToDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#GoToDirectory(k)$/;"	f
ctrlspace#keys#file#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#Init()$/;"	f
ctrlspace#keys#file#LoadFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadFile(k)$/;"	f
ctrlspace#keys#file#LoadFileSP	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadFileSP(k)$/;"	f
ctrlspace#keys#file#LoadFileT	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadFileT(k)$/;"	f
ctrlspace#keys#file#LoadFileVS	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadFileVS(k)$/;"	f
ctrlspace#keys#file#LoadManyFiles	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadManyFiles(k)$/;"	f
ctrlspace#keys#file#LoadManyFilesCT	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadManyFilesCT(k)$/;"	f
ctrlspace#keys#file#LoadManyFilesSP	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadManyFilesSP(k)$/;"	f
ctrlspace#keys#file#LoadManyFilesT	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadManyFilesT(k)$/;"	f
ctrlspace#keys#file#LoadManyFilesVS	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#LoadManyFilesVS(k)$/;"	f
ctrlspace#keys#file#Refresh	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#Refresh(k)$/;"	f
ctrlspace#keys#file#RemoveFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#RemoveFile(k)$/;"	f
ctrlspace#keys#file#RenameFileOrBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#RenameFileOrBuffer(k)$/;"	f
ctrlspace#keys#file#SearchParentDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#SearchParentDirectory(k)$/;"	f
ctrlspace#keys#file#ZoomMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^function! ctrlspace#keys#file#ZoomMode(k)$/;"	f
ctrlspace#keys#help#Bottom	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#Bottom(k)$/;"	f
ctrlspace#keys#help#Down	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#Down(k)$/;"	f
ctrlspace#keys#help#DownArrow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#DownArrow(k)$/;"	f
ctrlspace#keys#help#End	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#End(k)$/;"	f
ctrlspace#keys#help#HalfScrollDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#HalfScrollDown(k)$/;"	f
ctrlspace#keys#help#HalfScrollUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#HalfScrollUp(k)$/;"	f
ctrlspace#keys#help#Home	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#Home(k)$/;"	f
ctrlspace#keys#help#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#Init()$/;"	f
ctrlspace#keys#help#LeftMouse2	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#LeftMouse2(k)$/;"	f
ctrlspace#keys#help#LeftRelease	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#LeftRelease(k)$/;"	f
ctrlspace#keys#help#MouseDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#MouseDown(k)$/;"	f
ctrlspace#keys#help#MouseUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#MouseUp(k)$/;"	f
ctrlspace#keys#help#OpenInNewWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#OpenInNewWindow(k)$/;"	f
ctrlspace#keys#help#PageDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#PageDown(k)$/;"	f
ctrlspace#keys#help#PageUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#PageUp(k)$/;"	f
ctrlspace#keys#help#ScrollDown	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#ScrollDown(k)$/;"	f
ctrlspace#keys#help#ScrollUp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#ScrollUp(k)$/;"	f
ctrlspace#keys#help#Top	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#Top(k)$/;"	f
ctrlspace#keys#help#Up	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#Up(k)$/;"	f
ctrlspace#keys#help#UpArrow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! ctrlspace#keys#help#UpArrow(k)$/;"	f
ctrlspace#keys#nop#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\nop.vim	/^function! ctrlspace#keys#nop#Init()$/;"	f
ctrlspace#keys#nop#ToggleAllMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\nop.vim	/^function! ctrlspace#keys#nop#ToggleAllMode(k)$/;"	f
ctrlspace#keys#nop#ToggleAllModeAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\nop.vim	/^function! ctrlspace#keys#nop#ToggleAllModeAndSearch(k)$/;"	f
ctrlspace#keys#search#AddLetter	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#AddLetter(k)$/;"	f
ctrlspace#keys#search#ClearLetters	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#ClearLetters(k)$/;"	f
ctrlspace#keys#search#ClearOrRemoveLetter	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#ClearOrRemoveLetter(k)$/;"	f
ctrlspace#keys#search#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#Init()$/;"	f
ctrlspace#keys#search#SwitchOff	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#SwitchOff(k)$/;"	f
ctrlspace#keys#search#SwitchOffCR	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#SwitchOffCR(k)$/;"	f
ctrlspace#keys#search#SwitchOffSpace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^function! ctrlspace#keys#search#SwitchOffSpace(k)$/;"	f
ctrlspace#keys#tab#AddTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#AddTab(k)$/;"	f
ctrlspace#keys#tab#CloseTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#CloseTab(k)$/;"	f
ctrlspace#keys#tab#CollectForeignBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#CollectForeignBuffers(k)$/;"	f
ctrlspace#keys#tab#CollectUnsavedBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#CollectUnsavedBuffers(k)$/;"	f
ctrlspace#keys#tab#CopyTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#CopyTab(k)$/;"	f
ctrlspace#keys#tab#GoToTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#GoToTab(k)$/;"	f
ctrlspace#keys#tab#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#Init()$/;"	f
ctrlspace#keys#tab#MoveTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#MoveTab(k)$/;"	f
ctrlspace#keys#tab#NewTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#NewTabLabel(k)$/;"	f
ctrlspace#keys#tab#NewWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#NewWorkspace(k)$/;"	f
ctrlspace#keys#tab#RemoveTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#RemoveTabLabel(k)$/;"	f
ctrlspace#keys#tab#SwitchTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^function! ctrlspace#keys#tab#SwitchTab(k)$/;"	f
ctrlspace#keys#workspace#Append	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#Append(k)$/;"	f
ctrlspace#keys#workspace#Delete	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#Delete(k)$/;"	f
ctrlspace#keys#workspace#Init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#Init()$/;"	f
ctrlspace#keys#workspace#LoadOrSave	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#LoadOrSave(k)$/;"	f
ctrlspace#keys#workspace#NewWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#NewWorkspace(k)$/;"	f
ctrlspace#keys#workspace#Rename	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#Rename(k)$/;"	f
ctrlspace#keys#workspace#ToggleSubmode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! ctrlspace#keys#workspace#ToggleSubmode(k)$/;"	f
ctrlspace#modes#CurrentListView	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! ctrlspace#modes#CurrentListView()$/;"	f
ctrlspace#modes#Enabled	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! ctrlspace#modes#Enabled()$/;"	f
ctrlspace#modes#ListViews	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! ctrlspace#modes#ListViews()$/;"	f
ctrlspace#modes#Modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! ctrlspace#modes#Modes()$/;"	f
ctrlspace#roots#AddProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#AddProjectRoot(directory)$/;"	f
ctrlspace#roots#CurrentProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#CurrentProjectRoot()$/;"	f
ctrlspace#roots#FindProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#FindProjectRoot()$/;"	f
ctrlspace#roots#LastProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#LastProjectRoot()$/;"	f
ctrlspace#roots#ProjectRootFound	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#ProjectRootFound()$/;"	f
ctrlspace#roots#ProjectRoots	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#ProjectRoots()$/;"	f
ctrlspace#roots#RemoveProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#RemoveProjectRoot(directory)$/;"	f
ctrlspace#roots#SetCurrentProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#SetCurrentProjectRoot(value)$/;"	f
ctrlspace#roots#SetLastProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#SetLastProjectRoot(value)$/;"	f
ctrlspace#roots#SetProjectRoots	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! ctrlspace#roots#SetProjectRoots(value)$/;"	f
ctrlspace#search#AddSearchLetter	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#AddSearchLetter(letter)$/;"	f
ctrlspace#search#AppendToSearchHistory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#AppendToSearchHistory()$/;"	f
ctrlspace#search#ClearSearchLetters	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#ClearSearchLetters()$/;"	f
ctrlspace#search#ClearSearchMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#ClearSearchMode()$/;"	f
ctrlspace#search#InsertSearchText	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#InsertSearchText(text)$/;"	f
ctrlspace#search#RemoveSearchLetter	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#RemoveSearchLetter()$/;"	f
ctrlspace#search#RestoreSearchLetters	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#RestoreSearchLetters(direction)$/;"	f
ctrlspace#search#SearchHistoryIndex	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#SearchHistoryIndex()$/;"	f
ctrlspace#search#SearchParentDirectoryCycle	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#SearchParentDirectoryCycle()$/;"	f
ctrlspace#search#SwitchSearchMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#SwitchSearchMode(switch)$/;"	f
ctrlspace#search#UpdateSearchResults	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! ctrlspace#search#UpdateSearchResults()$/;"	f
ctrlspace#tabs#CloseTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^function! ctrlspace#tabs#CloseTab()$/;"	f
ctrlspace#tabs#CollectForeignBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^function! ctrlspace#tabs#CollectForeignBuffers()$/;"	f
ctrlspace#tabs#CollectUnsavedBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^function! ctrlspace#tabs#CollectUnsavedBuffers()$/;"	f
ctrlspace#tabs#NewTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^function! ctrlspace#tabs#NewTabLabel(tabnr)$/;"	f
ctrlspace#tabs#RemoveTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^function! ctrlspace#tabs#RemoveTabLabel(tabnr)$/;"	f
ctrlspace#tabs#SetTabLabel	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^function! ctrlspace#tabs#SetTabLabel(tabnr, label, auto)$/;"	f
ctrlspace#ui#Confirmed	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^function! ctrlspace#ui#Confirmed(msg)$/;"	f
ctrlspace#ui#DelayedMsg	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^function! ctrlspace#ui#DelayedMsg(...)$/;"	f
ctrlspace#ui#GetInput	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^function! ctrlspace#ui#GetInput(msg, ...)$/;"	f
ctrlspace#ui#Msg	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^function! ctrlspace#ui#Msg(message)$/;"	f
ctrlspace#ui#ProceedIfModified	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^function! ctrlspace#ui#ProceedIfModified()$/;"	f
ctrlspace#util#ChDir	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#ChDir(dir)$/;"	f
ctrlspace#util#FilesCache	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#FilesCache()$/;"	f
ctrlspace#util#GetbufvarWithDefault	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#GetbufvarWithDefault(nr, name, default)$/;"	f
ctrlspace#util#Gettabvar	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#Gettabvar(nr, name)$/;"	f
ctrlspace#util#GettabvarWithDefault	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#GettabvarWithDefault(nr, name, default)$/;"	f
ctrlspace#util#HandleVimSettings	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#HandleVimSettings(switch)$/;"	f
ctrlspace#util#NormalizeDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#NormalizeDirectory(directory)$/;"	f
ctrlspace#util#SetStatusline	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#SetStatusline()$/;"	f
ctrlspace#util#WorkspaceFile	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! ctrlspace#util#WorkspaceFile()$/;"	f
ctrlspace#window#GoToBufferListPosition	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#GoToBufferListPosition(direction)$/;"	f
ctrlspace#window#GoToStartWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#GoToStartWindow()$/;"	f
ctrlspace#window#GoToWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#GoToWindow()$/;"	f
ctrlspace#window#Kill	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#Kill(pluginBuffer, final)$/;"	f
ctrlspace#window#MaxHeight	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#MaxHeight()$/;"	f
ctrlspace#window#MoveCursor	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#MoveCursor(where)$/;"	f
ctrlspace#window#MoveSelectionBar	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#MoveSelectionBar(where)$/;"	f
ctrlspace#window#QuitVim	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#QuitVim()$/;"	f
ctrlspace#window#SelectedIndex	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#SelectedIndex()$/;"	f
ctrlspace#window#Toggle	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! ctrlspace#window#Toggle(internal)$/;"	f
ctrlspace#workspaces#ActiveWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#ActiveWorkspace()$/;"	f
ctrlspace#workspaces#CreateDigest	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#CreateDigest()$/;"	f
ctrlspace#workspaces#DeleteWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#DeleteWorkspace(name)$/;"	f
ctrlspace#workspaces#LoadWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#LoadWorkspace(bang, name)$/;"	f
ctrlspace#workspaces#NewWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#NewWorkspace()$/;"	f
ctrlspace#workspaces#RenameWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#RenameWorkspace(name)$/;"	f
ctrlspace#workspaces#SaveWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#SaveWorkspace(name)$/;"	f
ctrlspace#workspaces#SelectedWorkspaceName	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#SelectedWorkspaceName()$/;"	f
ctrlspace#workspaces#SetActiveWorkspaceName	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#SetActiveWorkspaceName(name, ...)$/;"	f
ctrlspace#workspaces#SetWorkspaceNames	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#SetWorkspaceNames()$/;"	f
ctrlspace#workspaces#Workspaces	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! ctrlspace#workspaces#Workspaces()$/;"	f
ctype	plugged\\php.vim\\scripts\\syntax.ini	/^ctype = no$/;"	k	section:extensions
curl	plugged\\php.vim\\scripts\\syntax.ini	/^curl = yes$/;"	k	section:extensions
currentLine	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def currentLine(self):$/;"	m	class:LfInstance
currentThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	public $currentThing;$/;"	v	class:FooNS\\SomethingNS\\Something
current_compiler	plugged\\vim-javascript\\compiler\\eslint.vim	/^let current_compiler = "eslint"$/;"	v
current_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def current_text(self):$/;"	m	class:TextObject
cursor	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def cursor(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
cursor	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def cursor(self, pos):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
cursorController	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^def cursorController(func):$/;"	f
d	autoload\\plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload\\plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> d             :exec g:Lf_py "bufExplManager.deleteBuffer(1)"<CR>$/;"	m
d	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> d             :exec g:Lf_py "mruExplManager.deleteMru()"<CR>$/;"	m
d	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\builtin_static_return_type.php	/^$d = DT::createFromFormat();$/;"	v
d	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\builtin_static_return_type.php	/^$d = DateTime::createFromFormat();$/;"	v
d	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$d = new DateTime;$/;"	v
d	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\clone.php	/^$d = clone $c;$/;"	v
d	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let d = "( \\\\(  )"  .  "\\\\(  " . '\\(  \\)' . "\\\\)"$/;"	v
data	plugged\\vim-json\\json-test.json	/^        "data": "Click Here",$/;"	s	object:widget.text
date	plugged\\php.vim\\scripts\\syntax.ini	/^date = yes$/;"	k	section:extensions
days_in_month	plugged\\vim-matchup\\test\\issues\\33\\test.rb	/^    def days_in_month(month, year)$/;"	S	class:Time
dba	plugged\\php.vim\\scripts\\syntax.ini	/^dba = no$/;"	k	section:extensions
dd	autoload\\plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
deBruijn	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static uint64_t deBruijn = 0x022FDD63CC95386D;$/;"	v	typeref:typename:uint64_t	file:
debug	plugged\\ultisnips\\pythonx\\UltiSnips\\debug.py	/^def debug(msg):$/;"	f
debug	plugged\\vim-json\\json-test.json	/^    "debug": "on",$/;"	s	object:widget
decimalCantStartWithPeriod	plugged\\vim-json\\json-test.json	/^	"decimalCantStartWithPeriod":.1,$/;"	n
deco	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def deco(*args, **kwargs):$/;"	f	function:cursorController	file:
deco	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def deco(*args, **kwargs):$/;"	f	function:showRelativePath	file:
deco	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def deco(self, *args, **kwargs):$/;"	f	function:modifiableController	file:
default_blacklist	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^let default_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']$/;"	v
default_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let default_role = {$/;"	v
default_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let default_role = {}$/;"	v
deferred highlighting	plugged\\vim-matchup\\README.md	/^#### deferred highlighting$/;"	t
delFromCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def delFromCache(self, name):$/;"	m	class:MruExplorer
delMruBufnr	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def delMruBufnr(self, buf_number):$/;"	m	class:Mru
delPatternContext	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static void delPatternContext(PyObject* obj)$/;"	f	typeref:typename:void	file:
deleteBuffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def deleteBuffer(self, wipe=0):$/;"	m	class:BufExplManager
deleteMru	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def deleteMru(self):$/;"	m	class:MruExplManager
delete_mark	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def delete_mark(name):$/;"	f
delta	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def delta(self, pos):$/;"	m	class:Position
dep_from_git	plugged\\html5.vim\\Makefile	/^dep_from_git = \\$/;"	m
dep_from_svn	plugged\\html5.vim\\Makefile	/^dep_from_svn = \\$/;"	m
dependencies	plugged\\tcomment_vim\\addon-info.json	/^    "dependencies" : {},$/;"	o
dependencies	plugged\\vim-snippets\\addon-info.json	/^  "dependencies" : {$/;"	o
description	plugged\\tcomment_vim\\addon-info.json	/^    "description" : "An easily extensible & universal comment plugin"$/;"	s
description	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def description(self):$/;"	m	class:SnippetDefinition
description	plugged\\vim-snippets\\addon-info.json	/^  "description" : "community driven set of snippets for snipmate"$/;"	s
did_javascript_syn_inits	plugged\\vim-javascript\\extras\\flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	plugged\\vim-javascript\\extras\\jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	plugged\\vim-javascript\\syntax\\javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_plugin_ultisnips	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^let did_plugin_ultisnips=1$/;"	v
die	plugged\\vim-localvimrc\\support\\build_vim-tools.sh	/^die()$/;"	f
diff	plugged\\ultisnips\\pythonx\\UltiSnips\\_diff.py	/^def diff(a, b, sline=0):$/;"	f
diff_in_buffer_length	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def diff_in_buffer_length(self):$/;"	m	class:VimState
dist	plugged\\html5.vim\\Makefile	/^dist: bundle mkfilelist$/;"	t
dist	plugged\\supertab\\Makefile	/^dist:$/;"	t
dist-clean	plugged\\tagbar-phpctags.vim\\Makefile	/^dist-clean:$/;"	t
dist_enabled_class_extensions	plugged\\phpcomplete.vim\\bin\\generate_builtin_dicts.php	/^$dist_enabled_class_extensions = array($/;"	v
dist_enabled_constant_extensions	plugged\\phpcomplete.vim\\bin\\generate_builtin_dicts.php	/^$dist_enabled_constant_extensions  = array($/;"	v
dist_enabled_function_extensions	plugged\\phpcomplete.vim\\bin\\generate_builtin_dicts.php	/^$dist_enabled_function_extensions  = array($/;"	v
dist_enabled_interface_extensions	plugged\\phpcomplete.vim\\bin\\generate_builtin_dicts.php	/^$dist_enabled_interface_extensions = array($/;"	v
doSometing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level1.php	/^	public function doSometing() {$/;"	f	class:NS1\\SubNS2\\Level1
do_post_expand	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def do_post_expand(self, start, end, snippets_stack):$/;"	m	class:SnippetDefinition
do_post_jump	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def do_post_jump($/;"	m	class:SnippetDefinition
do_pre_expand	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def do_pre_expand(self, visual_content, snippets_stack):$/;"	m	class:SnippetDefinition
do_unmapping	plugged\\ultisnips\\test\\test_Selection.py	/^    do_unmapping = False$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
do_unmapping	plugged\\ultisnips\\test\\test_Selection.py	/^    do_unmapping = True$/;"	v	class:_SelectModeMappings
doc	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$doc = new DOMDocument;$/;"	v
doc	plugged\\vim-localvimrc\\Makefile	/^doc: doc\/localvimrc.txt$/;"	t
doc/*.txt	plugged\\vim-matchup\\.projections.json	/^  "doc\/*.txt": {"type": "doc"},$/;"	o
doc/localvimrc.txt	plugged\\vim-localvimrc\\Makefile	/^doc\/localvimrc.txt: README.md $(html2vimdoc)$/;"	t
document_structure	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let document_structure = [$/;"	v
document_structure	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'doc/;"	v
dom	plugged\\php.vim\\scripts\\syntax.ini	/^dom = yes$/;"	k	section:extensions
dont_find_me	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteVariable\\local_variables.php	/^$dont_find_me = 42;$/;"	v
dpub_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let dpub_role = [$/;"	v
dpub_role	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dp/;"	v
drag_and_drop_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let drag_and_drop_attributes = {$/;"	v
dt	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\completion_in_function_insides.php	/^function dt() {$/;"	f
dummy	plugged\\vim-matchup\\test\\issues\\3\\test.sql	/^create or replace function dummy()$/;"	f
echo_to_hierarchy	plugged\\ultisnips\\pythonx\\UltiSnips\\debug.py	/^def echo_to_hierarchy(text_object):$/;"	f
editorconfig#c_include_path#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\c_include_path.vim	/^function! editorconfig#c_include_path#execute(value) abort$/;"	f
editorconfig#charset#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\charset.vim	/^function! editorconfig#charset#execute(value) abort$/;"	f
editorconfig#end_of_line#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\end_of_line.vim	/^function! editorconfig#end_of_line#execute(value) abort$/;"	f
editorconfig#indent_size#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\indent_size.vim	/^function! editorconfig#indent_size#execute(value) abort$/;"	f
editorconfig#indent_style#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\indent_style.vim	/^function! editorconfig#indent_style#execute(value) abort$/;"	f
editorconfig#insert_final_newline#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\insert_final_newline.vim	/^function! editorconfig#insert_final_newline#execute(value) abort$/;"	f
editorconfig#load	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! editorconfig#load() abort$/;"	f
editorconfig#max_line_length#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\max_line_length.vim	/^function! editorconfig#max_line_length#execute(value) abort$/;"	f
editorconfig#omnifunc	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! editorconfig#omnifunc(findstart, base) abort$/;"	f
editorconfig#root#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\root.vim	/^function! editorconfig#root#execute(value) abort$/;"	f
editorconfig#spell_enabled#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\spell_enabled.vim	/^function! editorconfig#spell_enabled#execute(value) abort$/;"	f
editorconfig#spell_language#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\spell_language.vim	/^function! editorconfig#spell_language#execute(value) abort$/;"	f
editorconfig#tab_width#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\tab_width.vim	/^function! editorconfig#tab_width#execute(value) abort$/;"	f
editorconfig#trim_trailing_whitespace#execute	plugged\\vim-editorconfig\\autoload\\editorconfig\\trim_trailing_whitespace.vim	/^function! editorconfig#trim_trailing_whitespace#execute(value) abort$/;"	f
empty	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def empty(self):$/;"	m	class:LfInstance
enchant	plugged\\php.vim\\scripts\\syntax.ini	/^enchant = no$/;"	k	section:extensions
end	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t end;$/;"	m	struct:HighlightGroup	typeref:typename:uint16_t	file:
end	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t end;$/;"	m	struct:ValueElements	typeref:typename:uint16_t	file:
end	plugged\\LeaderF\\install.bat	/^:end$/;"	l
end	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def end(self):$/;"	m	class:TextObject
end_index	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t end_index;$/;"	m	struct:HighlightGroup	typeref:typename:uint16_t	file:
ensure	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def ensure(self, filetypes):$/;"	m	class:SnippetSource
ensure	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def ensure(self, filetypes):$/;"	m	class:SnippetFileSource
enterBuffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def enterBuffer(self, win_pos):$/;"	m	class:LfInstance
envlist	plugged\\ale\\test\\command_callback\\python_paths\\namespace_package_tox\\tox.ini	/^envlist =$/;"	k	section:tox
equal	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^def equal(str1, str2, ignorecase=True):$/;"	f
ereg	plugged\\php.vim\\scripts\\syntax.ini	/^ereg = yes$/;"	k	section:extensions
escQuote	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^def escQuote(str):$/;"	f
escSpecial	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^def escSpecial(str):$/;"	f
escape	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def escape(inp):$/;"	f
escape	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^def escape(text, chars):$/;"	f
escapeQuote	autoload\\sftpsync\\python\\sftpsync.py	/^	def escapeQuote(self, str):$/;"	m	class:SftpSync
eval	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def eval(text):$/;"	f
evaluate	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^ValueElements* evaluate(TextContext* pText_ctxt,$/;"	f	typeref:typename:ValueElements *
evaluate	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def evaluate(text, pattern, text_mask, j, pattern_mask, k, val):$/;"	m	class:FuzzyMatch
evaluateHighlights	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^HighlightGroup* evaluateHighlights(TextContext* pText_ctxt,$/;"	f	typeref:typename:HighlightGroup *
evaluateHighlights	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def evaluateHighlights(text, pattern, text_mask, j, pattern_mask, k, val):$/;"	m	class:FuzzyMatch
evaluateHighlights_nameOnly	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^HighlightGroup* evaluateHighlights_nameOnly(TextContext* pText_ctxt,$/;"	f	typeref:typename:HighlightGroup *
evaluateOneChar	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def evaluateOneChar(text, pattern):$/;"	m	class:FuzzyMatch
evaluateTwoChar	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def evaluateTwoChar(text, pattern, is_pattern_lower):$/;"	m	class:FuzzyMatch
evaluate_nameOnly	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^ValueElements* evaluate_nameOnly(TextContext* pText_ctxt,$/;"	f	typeref:typename:ValueElements *
event_attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let event_attributes_value = {$/;"	v
event_handler_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythro/;"	v
execute	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    def execute(self, cmd, encoding=None, cleanup=None):$/;"	m	class:AsyncExecutor
executor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    executor = AsyncExecutor()$/;"	v
exif	plugged\\php.vim\\scripts\\syntax.ini	/^exif = no$/;"	k	section:extensions
existing_stab	plugged\\supertab\\plugin\\supertab.vim	/^      let existing_stab = maparg('<s-tab>', 'i', 0, 1)$/;"	v
existing_tab	plugged\\supertab\\plugin\\supertab.vim	/^    let existing_tab = maparg('<tab>', 'i')$/;"	v
exitBuffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def exitBuffer(self):$/;"	m	class:LfInstance
expand	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def expand(self):$/;"	m	class:SnippetManager
expand_anon	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def expand_anon($/;"	m	class:SnippetManager
expand_anon	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def expand_anon(self, *args, **kwargs):$/;"	m	class:SnippetUtilForAction
expand_or_jump	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def expand_or_jump(self):$/;"	m	class:SnippetManager
expected_error	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    expected_error = r"IndexError: line number out of range"$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
expected_error	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    expected_error = r"NameError: name 'Tru' is not defined"$/;"	v	class:ContextSnippets_ReportError
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = " > \\s+qwe"$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = " > abc"$/;"	v	class:ParseSnippets_PrintPythonStacktrace
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Context: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Defined in: .*\/all.snippets"$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Invalid multiword trigger: '!inv snip\/' in \\S+:2"$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Invalid multiword trigger: 'test snip' in \\S+:2"$/;"	v	class:ParseSnippets_MultiWord_NoContainer
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Post-expand: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Pre-expand: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = "Trigger: test"$/;"	v	class:ParseSnippets_PrintErroneousSnippet
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = r"'extends' without file types in \\S+:2"$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = r"Invalid line 'unknown directive' in \\S+:2"$/;"	v	class:ParseSnippets_UnknownDirective
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = r"Invalid priority '' in \\S+:2"$/;"	v	class:ParseSnippets_InvalidPriorityLine1
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = r"Invalid priority '- 50' in \\S+:2"$/;"	v	class:ParseSnippets_InvalidPriorityLine
expected_error	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    expected_error = r"Missing 'endsnippet' for 'testsnip' in \\S+:4"$/;"	v	class:ParseSnippets_MissingEndSnippet
expected_error	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    expected_error = 'changes are untrackable'$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
expected_error	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    expected_error = 'line under the cursor was modified'$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
expected_error	plugged\\ultisnips\\test\\vim_test_case.py	/^    expected_error = ''$/;"	v	class:VimTestCase
expected_python_version	plugged\\ultisnips\\test\\vim_test_case.py	/^    expected_python_version = None # If set, we need to check that our Vim is running this pytho/;"	v	class:VimTestCase
expr_map	plugged\\supertab\\plugin\\supertab.vim	/^      let expr_map = has_key(map_dict, 'expr') && map_dict.expr$/;"	v
expr_map	plugged\\supertab\\plugin\\supertab.vim	/^      let expr_map = maparg('<cr>', 'i') =~? '\\<cr>'$/;"	v
expr_map	plugged\\supertab\\plugin\\supertab.vim	/^    let expr_map = 0$/;"	v
extensions	plugged\\php.vim\\scripts\\syntax.ini	/^[extensions]$/;"	s
extensions	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$extensions = array();$/;"	v
extract_class_fields	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function extract_class_fields($xpath, $classname, $file) {$/;"	f
extract_class_methods	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function extract_class_methods($xpath, $classname, $file) {$/;"	f
extract_class_name	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function extract_class_name($xpath) {$/;"	f
extract_class_signatures	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function extract_class_signatures($files, $extensions) {$/;"	f
extract_constant_names	plugged\\phpcomplete.vim\\bin\\generator\\constants.php	/^function extract_constant_names($files, $extensions) {$/;"	f
extract_function_signatures	plugged\\phpcomplete.vim\\bin\\generator\\functions.php	/^function extract_function_signatures($files, $extensions, $signatures = array()) {$/;"	f
f	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^$f = returnFoo();$/;"	v
f	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\child_foo.php	/^$f = new ChildFoo;$/;"	v
f2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo.php	/^$f2 = new \\NS2\\Foo2;$/;"	v
f2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^$f2 = new \\NS2\\Foo2;$/;"	v	namespace:NS1
f3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^$f3 = new RenamedFoo2;$/;"	v	namespace:NS1
feedkeys	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def feedkeys(keys, mode='n'):$/;"	f
fetch_github	plugged\\html5.vim\\Makefile	/^fetch_github = \\$/;"	m
fetch_local	plugged\\html5.vim\\Makefile	/^fetch_local = @cp -v $(1) $(2) \\$/;"	m
fetch_snippets_from_dir	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^def fetch_snippets_from_dir(path):$/;"	f
fetch_snippets_from_svn	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^def fetch_snippets_from_svn(name):$/;"	f
fetch_url	plugged\\html5.vim\\Makefile	/^fetch_url = \\$/;"	m
fileExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^fileExplManager = FileExplManager()$/;"	v
fileinfo	plugged\\php.vim\\scripts\\syntax.ini	/^fileinfo = no$/;"	k	section:extensions
filename_score	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.py	/^    def filename_score(line):$/;"	f	function:CtrlPPyMatch	file:
filenameize	plugged\\phpcomplete.vim\\bin\\generator\\tools.php	/^function filenameize($str) {$/;"	f
files	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
files	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanMatchContext
files	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
files	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
files	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_CursorIsZeroBased
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ExpandOnTrue
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_PriorityKeyword
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ReportError
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_SimpleSnippet
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_SnippetPriority
files	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_UseContext
files	plugged\\ultisnips\\test\\test_Format.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ClearAll
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ClearOne
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ClearTwo
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_Global_Local_Python
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_Global_Python
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_InvalidPriorityLine
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_InvalidPriorityLine1
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MissingEndSnippet
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_NoContainer
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_Quotes
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippet
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintPythonStacktrace
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_SimpleSnippet
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_UnknownDirective
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:_ParseSnippets_MultiWord
files	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:_ParseSnippets_MultiWord_RE
files	plugged\\ultisnips\\test\\test_Recursive.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Disabled
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_EmptyLinesContinueSnippets
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Interpolation
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_InterpolationWithSystem
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Issue658
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_MultiMatches
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_NoNestedTabstops
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_SimpleSnippet
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestMirrors
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestMirrorsInPlaceholders
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestNoBraceTabstops
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Visual_Simple
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/_\/blub.snippets': """$/;"	v	class:snipMate_SimpleSnippetSubDirectory
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/a.snippets': """$/;"	v	class:snipMate_Extends
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = { 'snippets\/blubi.snippets': """$/;"	v	class:snipMate_OtherFiletype
files	plugged\\ultisnips\\test\\test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanModifyParentBody
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_EnsureIndent
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_MoveVisual
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionModifiesBuffer
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PreActionModifiesBuffer
files	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_UseCorrectJumpActions
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_ClearedByChild
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_ClearedByParent
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_SimpleClear
files	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_SimpleClear2
files	plugged\\ultisnips\\test\\test_TabStop.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
files	plugged\\ultisnips\\test\\test_TabStop.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
files	plugged\\ultisnips\\test\\vim_test_case.py	/^    files = {}$/;"	v	class:VimTestCase
filetypedetect	autoload\\plug.vim	/^        augroup filetypedetect$/;"	a
filetypes	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def filetypes(self):$/;"	m	class:VimBuffer
fill_in_whitespace	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^def fill_in_whitespace(text):$/;"	f
filter	plugged\\php.vim\\scripts\\syntax.ini	/^filter = no$/;"	k	section:extensions
final_private_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    final private function final_private_method($foo = null)$/;"	f	class:UserClass
final_static_public_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    final static public function final_static_public_method()$/;"	f	class:UserClass
finalize	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_base.py	/^def finalize(all_tokens, seen_ts, snippet_instance):$/;"	f
findMe	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^	public function findMe() { }$/;"	f	class:Bar
findMe	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^	public function findMe() { }$/;"	f	class:Bar2
findSubsequence	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func (item *FileItem) findSubsequence(offset int) (int, []int) {$/;"	f	unknown:main.FileItem
find_all_snippet_files	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^def find_all_snippet_files(ft):$/;"	f
find_me	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteVariable\\local_variables.php	/^$find_me = "var";$/;"	v
find_me	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_return.php	/^    public function find_me() { }$/;"	f	class:User
find_me2	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteVariable\\local_variables.php	/^$find_me2 = time();$/;"	v
find_me3	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteVariable\\local_variables.php	/^$find_me3 = new DateTime;$/;"	v
find_me4	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteVariable\\local_variables.php	/^$find_me4 = new BarClass;$/;"	v
find_parent_for_new_to	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def find_parent_for_new_to(self, pos):$/;"	m	class:EditableTextObject
find_snippet_files	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\ulti_snips.py	/^def find_snippet_files(ft, directory):$/;"	f
findme	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\arrays.php	/^    public function findme($a) {$/;"	f	class:Foo
findme	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^    public function findme() {$/;"	f	class:Foo\\FooClass
fixup	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^    def fixup(m):$/;"	f	function:unescape	file:
flatten_test_suite	plugged\\ultisnips\\test_all.py	/^    def flatten_test_suite(suite):$/;"	f
flow_elements	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', /;"	v
fn	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def fn(self):  # pylint:disable=no-self-use,invalid-name$/;"	m	class:SnippetUtil
focus	plugged\\ultisnips\\test\\vim_interface.py	/^    def focus(self, title=None):$/;"	m	class:VimInterfaceWindows
foldmarker	plugged\\vim-snippets\\pythonx\\vimsnippets.py	/^def foldmarker():$/;"	f
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public $foo;$/;"	v	class:Foo
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo_with_extra_content.class.php	/^function foo() {$/;"	f
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    var $foo;$/;"	v	class:Bar
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$foo = new Foo;$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_abstract.class.php	/^    public function foo() {$/;"	f	class:FooAbstract
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_abstract_with_whitespace.class.php	/^        public function foo() {$/;"	f	class:FooAbstract
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_equals_new_foo.php	/^$foo = new FooClass;$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_docblock.php	/^$foo = function($bar3, \\Some\\Class $foo) {$/;"	f
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^$foo = make_a_foo();$/;"	v	namespace:Foo
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops.php	/^    $foo = $result->$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops_extra_whitespace.php	/^    $foo = $result->$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops_extra_whitespace.php	/^    $foo = $result->hoge;$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\singleton_getinstance.php	/^$foo = FooClass::getInstance();$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentFunctionBoundaries\\test.php	/^function foo() {$/;"	f
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^$foo = $bar->baz($f, $bar2-> \/\/ cursor before the comment$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^$foo = $bar->baz($foo = call(), (new foo)->  \/\/ cursor before the comment$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^$foo = $foo ? $bar : $baz-> \/\/cursor here$/;"	v
foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetFunctionLocation\\foo.function.php	/^function foo(){$/;"	f
foo1	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_docblock.php	/^function foo1($bar1) {$/;"	f
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    var $foo2 = '';$/;"	v	class:Foo
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\arrays.php	/^$foo2 = new Foo;$/;"	v
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$foo2 = new Foo;$/;"	v
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_equals_new_foo.php	/^$foo2 = new RenamedFoo;$/;"	v
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_docblock.php	/^function foo2($bar1, $bar2, $bar3) {$/;"	f
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^$foo2 = make_a_renamed_foo();$/;"	v	namespace:Foo
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\singleton_getinstance.php	/^$foo2 = RenamedFoo::getInstance();$/;"	v
foo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\var_comment_mark.php	/^$foo2 = unknown();$/;"	v
foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\arrays.php	/^$foo3 = new Foo;$/;"	v
foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$foo3 = new Foo;$/;"	v
foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$foo3 = new SimilarNames;$/;"	v
foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_equals_new_foo.php	/^$foo3 = new \\NS2\\Foo;$/;"	v
foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^$foo3 = no_ns_make_a_foo();$/;"	v	namespace:Foo
foo3	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\singleton_getinstance.php	/^$foo3 = \\NS2\\Foo::getInstance();$/;"	v
foo4	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\arrays.php	/^$foo4 = $foo2->fooarray[42]->findme();$/;"	v
foo_conflicting_sources	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\var_comment_mark.php	/^$foo_conflicting_sources = Baz::getInstance();$/;"	v
fooarray	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\arrays.php	/^    public $fooarray;$/;"	v	class:Foo
foobar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$foobar = Foo::$static_bar2->return_foo();$/;"	v
format_method_signature	plugged\\phpcomplete.vim\\bin\\generator\\tools.php	/^function format_method_signature($signature) {$/;"	f
ft	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def ft(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
ft#javascript#Fold	autoload\\ft\\javascript.vim	/^function! ft#javascript#Fold(lnum)$/;"	f
ft#php#FixParens	autoload\\ft\\php.vim	/^function! ft#php#FixParens()$/;"	f
ft#php#FixParensPsr2	autoload\\ft\\php.vim	/^function! ft#php#FixParensPsr2()$/;"	f
ft#php#Fold	autoload\\ft\\php.vim	/^function! ft#php#Fold(lnum)$/;"	f
ft#php#Phpcbf	autoload\\ft\\php.vim	/^function! ft#php#Phpcbf()$/;"	f
ftp	plugged\\php.vim\\scripts\\syntax.ini	/^ftp = no$/;"	k	section:extensions
fun	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^function fun(Foo $foo) {$/;"	f
fun	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentFunctionBoundaries\\test.php	/^	public static function fun()$/;"	f	class:FooBar
functionExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^functionExplManager = FunctionExplManager()$/;"	v
fuzzyMatchC_Methods	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static PyMethodDef fuzzyMatchC_Methods[] =$/;"	v	typeref:typename:PyMethodDef[]	file:
fuzzyMatchC_getHighlights	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static PyObject* fuzzyMatchC_getHighlights(PyObject* self, PyObject* args, PyObject* kwargs)$/;"	f	typeref:typename:PyObject *	file:
fuzzyMatchC_getWeight	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static PyObject* fuzzyMatchC_getWeight(PyObject* self, PyObject* args, PyObject* kwargs)$/;"	f	typeref:typename:PyObject *	file:
fuzzyMatchC_initPattern	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static PyObject* fuzzyMatchC_initPattern(PyObject* self, PyObject* args)$/;"	f	typeref:typename:PyObject *	file:
fuzzyMatchC_module	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static struct PyModuleDef fuzzyMatchC_module = {$/;"	v	typeref:struct:PyModuleDef	file:
g!	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  nmap g! <Plug>ScripteaseFilter$/;"	m
g!	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  xmap g! <Plug>ScripteaseFilter$/;"	m
g!!	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  nmap g!! <Plug>ScripteaseFilter<SID>_$/;"	m
g%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^nnoremap <buffer> <silent> g% :<C-U>call <SID>PyMatch('g%','n') <CR>$/;"	m
g%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^onoremap <buffer> <silent> g% v:<C-U>call <SID>PyMatch('g%','o') <CR>$/;"	m
g%	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^vnoremap <buffer> <silent> g% :<C-U>call <SID>PyMatch('g%','v') <CR>m'gv``$/;"	m
g:	plugged\\ale\\autoload\\ale.vim	/^        let g:[l:full_name] = a:default$/;"	v
g:CtrlSpaceFileEngine	_vimrc	/^let g:CtrlSpaceFileEngine = "file_engine_windows_386.exe"$/;"	v
g:CtrlSpaceGlobCommand	_vimrc	/^	let g:CtrlSpaceGlobCommand = 'rg "" -l --color=never'$/;"	v
g:CtrlSpaceLoaded	plugged\\vim-ctrlspace\\plugin\\ctrlspace.vim	/^let g:CtrlSpaceLoaded = 1$/;"	v
g:CtrlSpaceSearchTiming	_vimrc	/^let g:CtrlSpaceSearchTiming = 250$/;"	v
g:CtrlSpaceSymbols	_vimrc	/^	let g:CtrlSpaceSymbols = { "WLoad": "↑", "WSave": "↓", "File": "◯", "CTab": "▣", "Tabs"/;"	v
g:Lf_Arguments	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^let g:Lf_Arguments = {$/;"	v
g:Lf_CacheDirectory	plugged\\LeaderF\\autoload\\lfMru.vim	/^let g:Lf_CacheDirectory = substitute(g:Lf_CacheDirectory, '[\\\/]$', '', '')$/;"	v
g:Lf_CommonArguments	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^let g:Lf_CommonArguments = [$/;"	v
g:Lf_DefaultMode	_vimrc	/^let g:Lf_DefaultMode = 'FullPath'$/;"	v
g:Lf_Helps	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^let g:Lf_Helps = {$/;"	v
g:Lf_HideHelp	_vimrc	/^let g:Lf_HideHelp = 1$/;"	v
g:Lf_IndexTimeLimit	_vimrc	/^let g:Lf_IndexTimeLimit = 10$/;"	v
g:Lf_MruCacheFileName	plugged\\LeaderF\\autoload\\lfMru.vim	/^let g:Lf_MruCacheFileName = g:Lf_CacheDirectory . '\/.LfCache\/tempMru'$/;"	v
g:Lf_NeedCacheTime	_vimrc	/^let g:Lf_NeedCacheTime = 0.5$/;"	v
g:Lf_PythonVersion	plugged\\LeaderF\\autoload\\leaderf.vim	/^        let g:Lf_PythonVersion = 2$/;"	v
g:Lf_PythonVersion	plugged\\LeaderF\\autoload\\leaderf.vim	/^        let g:Lf_PythonVersion = 3$/;"	v
g:Lf_RememberLastSearch	_vimrc	/^let g:Lf_RememberLastSearch = 1$/;"	v
g:Lf_SelfContent	plugged\\LeaderF\\plugin\\leaderf.vim	/^    let g:Lf_SelfContent[a:cmd] = a:description$/;"	v
g:Lf_ShortcutB	_vimrc	/^let g:Lf_ShortcutB = '<C-b>'$/;"	v
g:Lf_ShortcutF	_vimrc	/^let g:Lf_ShortcutF = '<C-p>'$/;"	v
g:Lf_StlPalette	_vimrc	/^let g:Lf_StlPalette = {$/;"	v
g:Lf_StlSeparator	_vimrc	/^let g:Lf_StlSeparator = { 'left': '▶', 'right': '◀' }$/;"	v
g:Lf_WildIgnore	_vimrc	/^let g:Lf_WildIgnore = { 'dir': [], 'file': ['.*'] }$/;"	v
g:Lf_WindowHeight	_vimrc	/^let g:Lf_WindowHeight = 15$/;"	v
g:Lf_WorkingDirectoryMode	_vimrc	/^let g:Lf_WorkingDirectoryMode = 'Ac'$/;"	v
g:Lf_py	plugged\\LeaderF\\autoload\\leaderf.vim	/^            let g:Lf_py = "py "$/;"	v
g:Lf_py	plugged\\LeaderF\\autoload\\leaderf.vim	/^            let g:Lf_py = "py3 "$/;"	v
g:Lf_py	plugged\\LeaderF\\autoload\\leaderf.vim	/^        let g:Lf_py = "py "$/;"	v
g:Lf_py	plugged\\LeaderF\\autoload\\leaderf.vim	/^        let g:Lf_py = "py3 "$/;"	v
g:NERDTree	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoDeleteBuffer	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeCreator	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirArrowCollapsible	_vimrc	/^let g:NERDTreeDirArrowCollapsible = '▾'$/;"	v
g:NERDTreeDirArrowExpandable	_vimrc	/^let g:NERDTreeDirArrowExpandable = '▸'$/;"	v
g:NERDTreeDirNode	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	plugged\\nerdtree\\lib\\nerdtree\\event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeIgnore	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeInvalidBookmarks	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMenuController	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuItem	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeOldSortOrder	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	plugged\\nerdtree\\lib\\nerdtree\\notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	_vimrc	/^let g:NERDTreeQuitOnOpen = 1$/;"	v
g:NERDTreeSortOrder	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
g:NERDTreeUI	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeWinSize	_vimrc	/^let g:NERDTreeWinSize = 42$/;"	v
g:SuperTabClosePreviewOnPopupClose	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabClosePreviewOnPopupClose = 0$/;"	v
g:SuperTabCompleteCase	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabCompleteCase = 'inherit'$/;"	v
g:SuperTabCompletionContexts	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabContextTextMemberPatterns	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabContextTextMemberPatterns = ['\\.', '>\\?::', '->']$/;"	v
g:SuperTabCrMapping	plugged\\supertab\\plugin\\supertab.vim	/^      let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabCrMapping	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabDefaultCompletionType	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	plugged\\supertab\\plugin\\supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['^', '\\s']$/;"	v
g:SuperTabNoCompleteAfter	plugged\\supertab\\plugin\\supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	plugged\\supertab\\plugin\\supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	plugged\\supertab\\plugin\\supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:SuperTabUndoBreak	plugged\\supertab\\plugin\\supertab.vim	/^    let g:SuperTabUndoBreak = 0$/;"	v
g:UltiSnipsEditSplit	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsEditSplit = 'normal'$/;"	v
g:UltiSnipsEditSplit	plugged\\ultisnips\\docker\\docker_vimrc.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsEnableSnipMate	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsEnableSnipMate = 1$/;"	v
g:UltiSnipsExpandTrigger	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsExpandTrigger = "<tab>"$/;"	v
g:UltiSnipsExpandTrigger	plugged\\ultisnips\\docker\\docker_vimrc.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsJumpBackwardTrigger = "<c-k>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	plugged\\ultisnips\\docker\\docker_vimrc.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-z>"$/;"	v
g:UltiSnipsJumpForwardTrigger	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsJumpForwardTrigger = "<c-j>"$/;"	v
g:UltiSnipsJumpForwardTrigger	plugged\\ultisnips\\docker\\docker_vimrc.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-b>"$/;"	v
g:UltiSnipsListSnippets	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsListSnippets = "<c-tab>"$/;"	v
g:UltiSnipsMappingsToIgnore	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsMappingsToIgnore = []$/;"	v
g:UltiSnipsRemoveSelectModeMappings	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsRemoveSelectModeMappings = 1$/;"	v
g:UltiSnipsSnippetDirectories	plugged\\ultisnips\\autoload\\UltiSnips\\map_keys.vim	/^    let g:UltiSnipsSnippetDirectories = [ "UltiSnips" ]$/;"	v
g:__ale_c_project_filenames	plugged\\ale\\autoload\\ale\\c.vim	/^let g:__ale_c_project_filenames = ['.git\/HEAD', 'configure', 'Makefile', 'CMakeLists.txt']$/;"	v
g:_plug_bang	autoload\\plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_uspy	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^       let g:_uspy=":py "$/;"	v
g:_uspy	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^       let g:_uspy=":python "$/;"	v
g:_uspy	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^       let g:_uspy=":python3 "$/;"	v
g:_uspy	plugged\\ultisnips\\plugin\\UltiSnips.vim	/^   let g:_uspy=":py3 "$/;"	v
g:ale#util#error_priority	plugged\\ale\\autoload\\ale\\util.vim	/^let g:ale#util#error_priority = 5$/;"	v
g:ale#util#info_priority	plugged\\ale\\autoload\\ale\\util.vim	/^let g:ale#util#info_priority = 3$/;"	v
g:ale#util#nul_file	plugged\\ale\\autoload\\ale\\util.vim	/^        let g:ale#util#nul_file = 'nul'$/;"	v
g:ale#util#nul_file	plugged\\ale\\autoload\\ale\\util.vim	/^    let g:ale#util#nul_file = '\/dev\/null'$/;"	v
g:ale#util#style_error_priority	plugged\\ale\\autoload\\ale\\util.vim	/^let g:ale#util#style_error_priority = 2$/;"	v
g:ale#util#style_warning_priority	plugged\\ale\\autoload\\ale\\util.vim	/^let g:ale#util#style_warning_priority = 1$/;"	v
g:ale#util#warning_priority	plugged\\ale\\autoload\\ale\\util.vim	/^let g:ale#util#warning_priority = 4$/;"	v
g:ale_buffer_info	plugged\\ale\\autoload\\ale\\engine.vim	/^        let g:ale_buffer_info[a:buffer] = {$/;"	v
g:ale_buffer_info	plugged\\ale\\autoload\\ale\\engine.vim	/^        let g:ale_buffer_info[a:buffer].loclist = l:loclist$/;"	v
g:ale_buffer_info	plugged\\ale\\autoload\\ale\\statusline.vim	/^    let g:ale_buffer_info[a:buffer].count = l:count$/;"	v
g:ale_buffer_info	plugged\\ale\\plugin\\ale.vim	/^let g:ale_buffer_info = {}$/;"	v
g:ale_c_build_dir_names	plugged\\ale\\autoload\\ale\\c.vim	/^let g:ale_c_build_dir_names = get(g:, 'ale_c_build_dir_names', [$/;"	v
g:ale_change_sign_column_color	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_change_sign_column_color = get(g:, 'ale_change_sign_column_color', 0)$/;"	v
g:ale_cmake_cmakelint_executable	plugged\\ale\\ale_linters\\cmake\\cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	plugged\\ale\\ale_linters\\cmake\\cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
g:ale_command_wrapper	plugged\\ale\\autoload\\ale\\job.vim	/^let g:ale_command_wrapper = get(g:, 'ale_command_wrapper', '')$/;"	v
g:ale_completion_delay	plugged\\ale\\autoload\\ale\\completion.vim	/^let g:ale_completion_delay = get(g:, 'ale_completion_delay', 100)$/;"	v
g:ale_completion_enabled	plugged\\ale\\autoload\\ale\\completion.vim	/^    let g:ale_completion_enabled = 0$/;"	v
g:ale_completion_enabled	plugged\\ale\\autoload\\ale\\completion.vim	/^    let g:ale_completion_enabled = 1$/;"	v
g:ale_completion_enabled	plugged\\ale\\plugin\\ale.vim	/^let g:ale_completion_enabled = get(g:, 'ale_completion_enabled', 0)$/;"	v
g:ale_completion_excluded_words	plugged\\ale\\autoload\\ale\\completion.vim	/^let g:ale_completion_excluded_words = get(g:, 'ale_completion_excluded_words', [])$/;"	v
g:ale_completion_max_suggestions	plugged\\ale\\autoload\\ale\\completion.vim	/^let g:ale_completion_max_suggestions = get(g:, 'ale_completion_max_suggestions', 50)$/;"	v
g:ale_create_dummy_temporary_file	plugged\\ale\\autoload\\ale\\assert.vim	/^    let g:ale_create_dummy_temporary_file = 1$/;"	v
g:ale_cs_mcs_options	plugged\\ale\\ale_linters\\cs\\mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
g:ale_echo_cursor	plugged\\ale\\plugin\\ale.vim	/^let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)$/;"	v
g:ale_echo_delay	plugged\\ale\\autoload\\ale\\cursor.vim	/^let g:ale_echo_delay = get(g:, 'ale_echo_delay', 10)$/;"	v
g:ale_echo_msg_error_str	plugged\\ale\\autoload\\ale.vim	/^let g:ale_echo_msg_error_str = get(g:, 'ale_echo_msg_error_str', 'Error')$/;"	v
g:ale_echo_msg_format	_vimrc	/^let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'$/;"	v
g:ale_echo_msg_format	plugged\\ale\\autoload\\ale\\cursor.vim	/^let g:ale_echo_msg_format = get(g:, 'ale_echo_msg_format', '%code: %%s')$/;"	v
g:ale_echo_msg_info_str	plugged\\ale\\autoload\\ale.vim	/^let g:ale_echo_msg_info_str = get(g:, 'ale_echo_msg_info_str', 'Info')$/;"	v
g:ale_echo_msg_warning_str	plugged\\ale\\autoload\\ale.vim	/^let g:ale_echo_msg_warning_str = get(g:, 'ale_echo_msg_warning_str', 'Warning')$/;"	v
g:ale_enabled	plugged\\ale\\autoload\\ale\\toggle.vim	/^    let g:ale_enabled = !get(g:, 'ale_enabled')$/;"	v
g:ale_enabled	plugged\\ale\\plugin\\ale.vim	/^let g:ale_enabled = get(g:, 'ale_enabled', 1)$/;"	v
g:ale_erlang_erlc_options	plugged\\ale\\ale_linters\\erlang\\erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
g:ale_filetype_blacklist	plugged\\ale\\plugin\\ale.vim	/^let g:ale_filetype_blacklist = [$/;"	v
g:ale_fix_buffer_data	plugged\\ale\\autoload\\ale\\fix.vim	/^    let g:ale_fix_buffer_data[a:buffer] = {$/;"	v
g:ale_fix_buffer_data	plugged\\ale\\autoload\\ale\\fix.vim	/^    let g:ale_fix_buffer_data[a:buffer].temporary_directory_list = []$/;"	v
g:ale_fix_buffer_data	plugged\\ale\\plugin\\ale.vim	/^let g:ale_fix_buffer_data = {}$/;"	v
g:ale_fix_on_save	plugged\\ale\\plugin\\ale.vim	/^let g:ale_fix_on_save = get(g:, 'ale_fix_on_save', 0)$/;"	v
g:ale_fixers	_vimrc	/^let g:ale_fixers = {$/;"	v
g:ale_fixers	plugged\\ale\\plugin\\ale.vim	/^let g:ale_fixers = get(g:, 'ale_fixers', {})$/;"	v
g:ale_has_override	plugged\\ale\\autoload\\ale.vim	/^let g:ale_has_override = get(g:, 'ale_has_override', {})$/;"	v
g:ale_history_enabled	plugged\\ale\\plugin\\ale.vim	/^let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)$/;"	v
g:ale_history_log_output	plugged\\ale\\plugin\\ale.vim	/^let g:ale_history_log_output = get(g:, 'ale_history_log_output', 1)$/;"	v
g:ale_html_tidy_executable	plugged\\ale\\ale_linters\\html\\tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	plugged\\ale\\ale_linters\\html\\tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', '-q -e -language en')$/;"	v
g:ale_java_checkstyle_options	plugged\\ale\\ale_linters\\java\\checkstyle.vim	/^    let g:ale_java_checkstyle_options = '-c \/google_checks.xml'$/;"	v
g:ale_java_pmd_options	plugged\\ale\\ale_linters\\java\\pmd.vim	/^    let g:ale_java_pmd_options = '-R category\/java\/bestpractices.xml'$/;"	v
g:ale_javascript_eslint_executable	_vimrc	/^let g:ale_javascript_eslint_executable = 'eslint_d'$/;"	v
g:ale_keep_list_window_open	plugged\\ale\\autoload\\ale\\list.vim	/^let g:ale_keep_list_window_open = get(g:, 'ale_keep_list_window_open', 0)$/;"	v
g:ale_kotlin_kotlinc_classpath	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_config_file	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_c/;"	v
g:ale_kotlin_kotlinc_enable_config	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module/;"	v
g:ale_kotlin_kotlinc_options	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_lint_delay	plugged\\ale\\plugin\\ale.vim	/^let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)$/;"	v
g:ale_lint_on_enter	_vimrc	/^let g:ale_lint_on_enter = 0$/;"	v
g:ale_lint_on_enter	plugged\\ale\\plugin\\ale.vim	/^let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)$/;"	v
g:ale_lint_on_filetype_changed	plugged\\ale\\plugin\\ale.vim	/^let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)$/;"	v
g:ale_lint_on_insert_leave	_vimrc	/^let g:ale_lint_on_insert_leave = 0$/;"	v
g:ale_lint_on_insert_leave	plugged\\ale\\plugin\\ale.vim	/^let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 0)$/;"	v
g:ale_lint_on_save	_vimrc	/^let g:ale_lint_on_save = 1$/;"	v
g:ale_lint_on_save	plugged\\ale\\plugin\\ale.vim	/^let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)$/;"	v
g:ale_lint_on_text_changed	_vimrc	/^let g:ale_lint_on_text_changed = 'never'$/;"	v
g:ale_lint_on_text_changed	plugged\\ale\\plugin\\ale.vim	/^let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'always')$/;"	v
g:ale_linter_aliases	plugged\\ale\\plugin\\ale.vim	/^let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})$/;"	v
g:ale_linters	_vimrc	/^let g:ale_linters = {$/;"	v
g:ale_linters	plugged\\ale\\plugin\\ale.vim	/^let g:ale_linters = get(g:, 'ale_linters', {})$/;"	v
g:ale_linters_explicit	plugged\\ale\\plugin\\ale.vim	/^let g:ale_linters_explicit = get(g:, 'ale_linters_explicit', 0)$/;"	v
g:ale_linters_ignore	plugged\\ale\\autoload\\ale.vim	/^let g:ale_linters_ignore = get(g:, 'ale_linters_ignore', {})$/;"	v
g:ale_list_vertical	plugged\\ale\\autoload\\ale\\list.vim	/^let g:ale_list_vertical = get(g:, 'ale_list_vertical', 0)$/;"	v
g:ale_list_window_size	plugged\\ale\\autoload\\ale\\list.vim	/^let g:ale_list_window_size = get(g:, 'ale_list_window_size', 10)$/;"	v
g:ale_loclist_msg_format	plugged\\ale\\autoload\\ale\\list.vim	/^let g:ale_loclist_msg_format = get(g:, 'ale_loclist_msg_format',$/;"	v
g:ale_lsp_error_messages	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^        let g:ale_lsp_error_messages[a:linter_name] = []$/;"	v
g:ale_lsp_error_messages	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^    let g:ale_lsp_error_messages = get(g:, 'ale_lsp_error_messages', {})$/;"	v
g:ale_lsp_next_message_id	plugged\\ale\\autoload\\ale\\lsp.vim	/^        let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_message_id	plugged\\ale\\autoload\\ale\\lsp.vim	/^    let g:ale_lsp_next_message_id += 1$/;"	v
g:ale_lsp_next_message_id	plugged\\ale\\autoload\\ale\\lsp.vim	/^let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_version_id	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^        let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lsp_next_version_id	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^    let g:ale_lsp_next_version_id += 1$/;"	v
g:ale_lsp_next_version_id	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_max_buffer_history_size	plugged\\ale\\autoload\\ale\\history.vim	/^let g:ale_max_buffer_history_size = get(g:, 'ale_max_buffer_history_size', 20)$/;"	v
g:ale_max_signs	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_max_signs = get(g:, 'ale_max_signs', -1)$/;"	v
g:ale_objc_clang_options	plugged\\ale\\ale_linters\\objc\\clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_objcpp_clang_options	plugged\\ale\\ale_linters\\objcpp\\clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_open_list	plugged\\ale\\autoload\\ale\\list.vim	/^let g:ale_open_list = get(g:, 'ale_open_list', 0)$/;"	v
g:ale_php_phan_executable	plugged\\ale\\ale_linters\\php\\phan.vim	/^let g:ale_php_phan_executable = get(g:, 'ale_php_phan_executable', 'phan')$/;"	v
g:ale_php_phan_minimum_severity	plugged\\ale\\ale_linters\\php\\phan.vim	/^let g:ale_php_phan_minimum_severity = get(g:, 'ale_php_phan_minimum_severity', 0)$/;"	v
g:ale_php_phan_use_client	plugged\\ale\\ale_linters\\php\\phan.vim	/^let g:ale_php_phan_use_client = get(g:, 'ale_php_phan_use_client', 0)$/;"	v
g:ale_php_phpcs_standard	plugged\\ale\\ale_linters\\php\\phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
g:ale_php_phpmd_executable	plugged\\ale\\ale_linters\\php\\phpmd.vim	/^let g:ale_php_phpmd_executable = get(g:, 'ale_php_phpmd_executable', 'phpmd')$/;"	v
g:ale_php_phpmd_ruleset	plugged\\ale\\ale_linters\\php\\phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial/;"	v
g:ale_php_phpstan_configuration	plugged\\ale\\ale_linters\\php\\phpstan.vim	/^let g:ale_php_phpstan_configuration = get(g:, 'ale_php_phpstan_configuration', '')$/;"	v
g:ale_php_phpstan_executable	plugged\\ale\\ale_linters\\php\\phpstan.vim	/^let g:ale_php_phpstan_executable = get(g:, 'ale_php_phpstan_executable', 'phpstan')$/;"	v
g:ale_php_phpstan_level	plugged\\ale\\ale_linters\\php\\phpstan.vim	/^let g:ale_php_phpstan_level = get(g:, 'ale_php_phpstan_level', '4')$/;"	v
g:ale_puppet_puppetlint_executable	plugged\\ale\\autoload\\ale\\fixers\\puppetlint.vim	/^    let g:ale_puppet_puppetlint_executable = 'puppet-lint'$/;"	v
g:ale_puppet_puppetlint_options	plugged\\ale\\autoload\\ale\\fixers\\puppetlint.vim	/^    let g:ale_puppet_puppetlint_options = ''$/;"	v
g:ale_python_flake8_executable	_vimrc	/^let g:ale_python_flake8_executable = 'python'$/;"	v
g:ale_python_flake8_options	_vimrc	/^let g:ale_python_flake8_options = '-m flake8 --select F,E999'$/;"	v
g:ale_python_prospector_executable	plugged\\ale\\ale_linters\\python\\prospector.vim	/^let g:ale_python_prospector_executable =$/;"	v
g:ale_python_prospector_options	plugged\\ale\\ale_linters\\python\\prospector.vim	/^let g:ale_python_prospector_options =$/;"	v
g:ale_python_prospector_use_global	plugged\\ale\\ale_linters\\python\\prospector.vim	/^let g:ale_python_prospector_use_global = get(g:, 'ale_python_prospector_use_global', get(g:, 'al/;"	v
g:ale_r_lintr_lint_package	plugged\\ale\\ale_linters\\r\\lintr.vim	/^let g:ale_r_lintr_lint_package = get(g:, 'ale_r_lintr_lint_package', 0)$/;"	v
g:ale_r_lintr_options	plugged\\ale\\ale_linters\\r\\lintr.vim	/^let g:ale_r_lintr_options = get(g:, 'ale_r_lintr_options', 'with_defaults()')$/;"	v
g:ale_ruby_brakeman_options	plugged\\ale\\ale_linters\\ruby\\brakeman.vim	/^let g:ale_ruby_brakeman_options =$/;"	v
g:ale_rust_ignore_error_codes	plugged\\ale\\autoload\\ale\\handlers\\rust.vim	/^    let g:ale_rust_ignore_error_codes = []$/;"	v
g:ale_set_balloons	plugged\\ale\\plugin\\ale.vim	/^let g:ale_set_balloons = get(g:, 'ale_set_balloons', has('balloon_eval') && has('gui_running'))$/;"	v
g:ale_set_highlights	plugged\\ale\\plugin\\ale.vim	/^let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))$/;"	v
g:ale_set_lists_synchronously	plugged\\ale\\test\\vimrc	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_loclist	plugged\\ale\\plugin\\ale.vim	/^let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)$/;"	v
g:ale_set_quickfix	plugged\\ale\\plugin\\ale.vim	/^let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)$/;"	v
g:ale_set_signs	plugged\\ale\\plugin\\ale.vim	/^let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))$/;"	v
g:ale_sh_shell_default_shell	plugged\\ale\\ale_linters\\sh\\shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
g:ale_sh_shell_default_shell	plugged\\ale\\ale_linters\\sh\\shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sh_shell_default_shell	plugged\\ale\\ale_linters\\sh\\shell.vim	/^    let g:ale_sh_shell_default_shell = g:ale_linters_sh_shell_default_shell$/;"	v
g:ale_sign_column_always	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_column_always = get(g:, 'ale_sign_column_always', 0)$/;"	v
g:ale_sign_error	_vimrc	/^let g:ale_sign_error = '»»'$/;"	v
g:ale_sign_error	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_error = get(g:, 'ale_sign_error', '>>')$/;"	v
g:ale_sign_info	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_info = get(g:, 'ale_sign_info', g:ale_sign_warning)$/;"	v
g:ale_sign_offset	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_offset = get(g:, 'ale_sign_offset', 1000000)$/;"	v
g:ale_sign_style_error	_vimrc	/^let g:ale_sign_style_error = "S»"$/;"	v
g:ale_sign_style_error	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_style_error = get(g:, 'ale_sign_style_error', g:ale_sign_error)$/;"	v
g:ale_sign_style_warning	_vimrc	/^let g:ale_sign_style_warning = 'S┄'$/;"	v
g:ale_sign_style_warning	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_style_warning = get(g:, 'ale_sign_style_warning', g:ale_sign_warning)$/;"	v
g:ale_sign_warning	_vimrc	/^let g:ale_sign_warning = '▪▪'$/;"	v
g:ale_sign_warning	plugged\\ale\\autoload\\ale\\sign.vim	/^let g:ale_sign_warning = get(g:, 'ale_sign_warning', '--')$/;"	v
g:ale_tex_chktex_executable	plugged\\ale\\ale_linters\\tex\\chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	plugged\\ale\\ale_linters\\tex\\chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
g:ale_type_map	plugged\\ale\\autoload\\ale\\engine.vim	/^let g:ale_type_map = get(g:, 'ale_type_map', {})$/;"	v
g:ale_verilog_verilator_options	plugged\\ale\\ale_linters\\verilog\\verilator.vim	/^    let g:ale_verilog_verilator_options = ''$/;"	v
g:ale_virtualenv_dir_names	plugged\\ale\\autoload\\ale\\python.vim	/^let g:ale_virtualenv_dir_names = get(g:, 'ale_virtualenv_dir_names', [$/;"	v
g:ale_warn_about_trailing_blank_lines	plugged\\ale\\plugin\\ale.vim	/^let g:ale_warn_about_trailing_blank_lines = get(g:, 'ale_warn_about_trailing_blank_lines', 1)$/;"	v
g:ale_warn_about_trailing_whitespace	plugged\\ale\\plugin\\ale.vim	/^let g:ale_warn_about_trailing_whitespace = get(g:, 'ale_warn_about_trailing_whitespace', 1)$/;"	v
g:ale_xml_xmllint_executable	plugged\\ale\\ale_linters\\xml\\xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	plugged\\ale\\ale_linters\\xml\\xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
g:aria_attributes_complete	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^        let g:aria_attributes_complete = 0$/;"	v
g:aria_attributes_complete	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
g:asyncrun_auto	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_auto = ''$/;"	v
g:asyncrun_bell	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_bell = 0$/;"	v
g:asyncrun_code	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_code = ''$/;"	v
g:asyncrun_code	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_code = s:async_code$/;"	v
g:asyncrun_encs	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_encs = ''$/;"	v
g:asyncrun_exit	_vimrc	/^let g:asyncrun_exit = 'call AsyncRunExit()'$/;"	v
g:asyncrun_exit	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_exit = ''$/;"	v
g:asyncrun_ftrun	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_ftrun = {}$/;"	v
g:asyncrun_hook	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_hook = ''$/;"	v
g:asyncrun_info	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_info = ''$/;"	v
g:asyncrun_info	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_info = a:args$/;"	v
g:asyncrun_last	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_last = 0$/;"	v
g:asyncrun_local	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_local = 1$/;"	v
g:asyncrun_mode	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_mode = 0$/;"	v
g:asyncrun_save	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_save = 0$/;"	v
g:asyncrun_shell	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_shell = ''$/;"	v
g:asyncrun_shell_error	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^				let g:asyncrun_shell_error = py3eval('c')$/;"	v
g:asyncrun_shell_error	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^				let g:asyncrun_shell_error = pyeval('c')$/;"	v
g:asyncrun_shell_error	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^			let g:asyncrun_shell_error = v:shell_error$/;"	v
g:asyncrun_shellflag	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_shellflag = ''$/;"	v
g:asyncrun_silent	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_silent = 1$/;"	v
g:asyncrun_skip	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_skip = 0$/;"	v
g:asyncrun_status	autoload\\myconf\\statusline.vim	/^	let g:asyncrun_status = ''$/;"	v
g:asyncrun_status	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^		let g:asyncrun_status = "failure"$/;"	v
g:asyncrun_status	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^		let g:asyncrun_status = "running"$/;"	v
g:asyncrun_status	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^		let g:asyncrun_status = "success"$/;"	v
g:asyncrun_status	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_status = ''$/;"	v
g:asyncrun_stop	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_stop = ''$/;"	v
g:asyncrun_support	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^		let g:asyncrun_support = 1$/;"	v
g:asyncrun_support	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_support = 1$/;"	v
g:asyncrun_support	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let g:asyncrun_support = 0$/;"	v
g:asyncrun_text	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^		let g:asyncrun_text = opts.text$/;"	v
g:asyncrun_text	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_text = ''$/;"	v
g:asyncrun_text	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_text = s:async_info.text$/;"	v
g:asyncrun_timer	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_timer = 25$/;"	v
g:asyncrun_trim	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_trim = 0$/;"	v
g:asyncrun_windows	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let g:asyncrun_windows = 1$/;"	v
g:asyncrun_windows	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let g:asyncrun_windows = 0$/;"	v
g:autoloaded_scriptease	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^let g:autoloaded_scriptease = 1$/;"	v
g:better_whitespace_enabled	_vimrc	/^let g:better_whitespace_enabled = 0$/;"	v
g:better_whitespace_filetypes_blacklist	_vimrc	/^let g:better_whitespace_filetypes_blacklist = ['', 'diff', 'gitcommit', 'unite', 'qf', 'help', '/;"	v
g:closetag_close_shortcut	_vimrc	/^let g:closetag_close_shortcut = '®'$/;"	v
g:closetag_filenames	_vimrc	/^let g:closetag_filenames = '*.xml,*.html,*.xhtml,*.phtml,*.php,*.js,*.jsx'$/;"	v
g:closetag_filenames	plugged\\vim-closetag\\plugin\\closetag.vim	/^    let g:closetag_filenames = substitute(g:closetag_filenames, '\\s*,\\s\\+', ',', 'g')$/;"	v
g:closetag_filetypes	plugged\\vim-closetag\\plugin\\closetag.vim	/^    let g:closetag_filetypes = substitute(g:closetag_filetypes, '\\s*,\\s\\+', ',', 'g')$/;"	v
g:closetag_xhtml_filenames	_vimrc	/^let g:closetag_xhtml_filenames = '*.xhtml,*.js,*.jsx'$/;"	v
g:closetag_xhtml_filenames	plugged\\vim-closetag\\plugin\\closetag.vim	/^    let g:closetag_xhtml_filenames = substitute(g:closetag_xhtml_filenames, '\\s*,\\s\\+', ',', /;"	v
g:closetag_xhtml_filetypes	plugged\\vim-closetag\\plugin\\closetag.vim	/^    let g:closetag_xhtml_filetypes = substitute(g:closetag_xhtml_filetypes, '\\s*,\\s\\+', ',', /;"	v
g:colors_name	colors\\fixedzenburn.vim	/^let g:colors_name="fixedzenburn"$/;"	v
g:colors_name	plugged\\Zenburn\\colors\\zenburn.vim	/^let g:colors_name="zenburn"$/;"	v
g:commented_fixture_class_content	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^    let g:commented_fixture_class_content = readfile(expand('%:p:h').'\/'.'fixtures\/CompleteUse/;"	v
g:ctrlp_alldirs	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^			let g:ctrlp_alldirs = ctrlp#utils#readfile(cafile)$/;"	v
g:ctrlp_allfiles	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^			let g:ctrlp_allfiles = ctrlp#dirnfile(g:ctrlp_allfiles)[1]$/;"	v
g:ctrlp_allfiles	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^			let g:ctrlp_allfiles = ctrlp#utils#readfile(cafile)$/;"	v
g:ctrlp_allfiles	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^		let g:ctrlp_allfiles = []$/;"	v
g:ctrlp_allfiles	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^		let g:ctrlp_allfiles = split(system(s:safe_printf(lscmd, path)), "\\n")$/;"	v
g:ctrlp_allfiles	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^		let g:ctrlp_allfiles = systemlist(s:safe_printf(lscmd, path))$/;"	v
g:ctrlp_allmixes	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^	let g:ctrlp_allmixes = { 'filtime': getftime(ctrlp#utils#cachefile()),$/;"	v
g:ctrlp_alltags	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^	let g:ctrlp_alltags = []$/;"	v
g:ctrlp_autoignore_debug	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^	let g:ctrlp_autoignore_debug = 0$/;"	v
g:ctrlp_autoignore_loaded	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let g:ctrlp_autoignore_loaded = 1$/;"	v
g:ctrlp_autoignore_trace	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^	let g:ctrlp_autoignore_trace = 0$/;"	v
g:ctrlp_builtins	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let g:ctrlp_builtins = len(g:ctrlp_types)-1$/;"	v
g:ctrlp_custom_ignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^	let g:ctrlp_custom_ignore = {}$/;"	v
g:ctrlp_custom_ignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let g:ctrlp_custom_ignore['func'] = 'ctrlp#autoignore#ignore'$/;"	v
g:ctrlp_custom_ignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let g:ctrlp_custom_ignore['func-close'] = 'ctrlp#autoignore#ignore_close'$/;"	v
g:ctrlp_custom_ignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let g:ctrlp_custom_ignore['func-init'] = 'ctrlp#autoignore#ignore_init'$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^		let g:ctrlp_lines = ctrlp#mrufiles#refresh()$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^	let g:ctrlp_lines = []$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^	let g:ctrlp_lines = call(a:rfunc, [tbrem])$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^	let g:ctrlp_lines = eval(types[s:itemtype])$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^		let g:ctrlp_lines = g:ctrlp_allmixes['data']$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^	let g:ctrlp_lines = copy(ctrlp#files())$/;"	v
g:ctrlp_lines	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^	let g:ctrlp_lines = len(mrufs) > len(g:ctrlp_lines)$/;"	v
g:ctrlp_newcache	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^		let g:ctrlp_newcache = 0$/;"	v
g:ctrlp_newcache	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^		let g:ctrlp_newcache = 1$/;"	v
g:ctrlp_newdir	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^		let g:ctrlp_newdir = 0$/;"	v
g:ctrlp_newmix	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^	let g:ctrlp_newmix = 0$/;"	v
g:ctrlp_root_markers	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^	let g:ctrlp_root_markers = []$/;"	v
g:ctrlp_types	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^	let g:ctrlp_types = s:types$/;"	v
g:current_line_whitespace_disabled_hard	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^            let g:current_line_whitespace_disabled_hard = 0$/;"	v
g:current_line_whitespace_disabled_hard	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^            let g:current_line_whitespace_disabled_hard = 1$/;"	v
g:current_line_whitespace_disabled_hard	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^        let g:current_line_whitespace_disabled_hard = 0$/;"	v
g:current_line_whitespace_disabled_soft	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^            let g:current_line_whitespace_disabled_soft = 0$/;"	v
g:current_line_whitespace_disabled_soft	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^            let g:current_line_whitespace_disabled_soft = 1$/;"	v
g:current_line_whitespace_disabled_soft	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^        let g:current_line_whitespace_disabled_soft = 0$/;"	v
g:current_ulti_dict	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^    let g:current_ulti_dict = {}$/;"	v
g:current_ulti_dict_info	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^      let g:current_ulti_dict_info = {}$/;"	v
g:dir	plugged\\ale\\autoload\\ale\\test.vim	/^    let g:dir = getcwd() " no-custom-checks$/;"	v
g:editorconfig\\_blacklist	plugged\\vim-editorconfig\\README.md	/^### g:editorconfig\\_blacklist$/;"	S
g:editorconfig\\_root\\_chdir	plugged\\vim-editorconfig\\README.md	/^### g:editorconfig\\_root\\_chdir$/;"	S
g:editorconfig\\_verbose	plugged\\vim-editorconfig\\README.md	/^### g:editorconfig\\_verbose$/;"	S
g:editorconfig_blacklist	plugged\\vim-editorconfig\\plugin\\editorconfig.vim	/^let g:editorconfig_blacklist = get(g:, 'editorconfig_blacklist', {})$/;"	v
g:editorconfig_root_chdir	plugged\\vim-editorconfig\\plugin\\editorconfig.vim	/^let g:editorconfig_root_chdir = get(g:, 'editorconfig_root_chdir', 0)$/;"	v
g:fixture_class_content	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^    let g:fixture_class_content = readfile(expand('%:p:h').'\/'.'fixtures\/CompleteUserClass\/us/;"	v
g:fixture_class_content	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^    let g:fixture_class_content = readfile(expand('%:p:h').'\/'.'fixtures\/DocBlock\/foo.class.p/;"	v
g:fixture_file_content	plugged\\phpcomplete.vim\\tests\\GetFunctionReturnTypeHint_test.vim	/^    let g:fixture_file_content = readfile(expand('%:p:h').'\/'.'fixtures\/GetFunctionReturnTypeH/;"	v
g:html5_aria_attributes_complete	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
g:html5_event_handler_attributes_complete	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
g:html5_microdata_attributes_complete	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
g:html5_rdfa_attributes_complete	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
g:jsx_ext_required	_vimrc	/^let g:jsx_ext_required = 0$/;"	v
g:jsx_ext_required	plugged\\vim-jsx\\ftdetect\\javascript.vim	/^  let g:jsx_ext_required = 0$/;"	v
g:jsx_pragma_required	plugged\\vim-jsx\\ftdetect\\javascript.vim	/^  let g:jsx_pragma_required = 0$/;"	v
g:leaderf#colorscheme#default#palette	plugged\\LeaderF\\autoload\\leaderf\\colorscheme\\default.vim	/^let g:leaderf#colorscheme#default#palette = leaderf#colorscheme#mergePalette(s:palette)$/;"	v
g:leaderf#colorscheme#powerline#palette	plugged\\LeaderF\\autoload\\leaderf\\colorscheme\\powerline.vim	/^let g:leaderf#colorscheme#powerline#palette = leaderf#colorscheme#mergePalette(s:palette)$/;"	v
g:leaderf#loaded	plugged\\LeaderF\\autoload\\leaderf.vim	/^    let g:leaderf#loaded = 1$/;"	v
g:leaderf_loaded	plugged\\LeaderF\\plugin\\leaderf.vim	/^    let g:leaderf_loaded = 1$/;"	v
g:lexima#default_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima#default_rules += [$/;"	v
g:lexima#default_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima#default_rules = [$/;"	v
g:lexima#newline_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima#newline_rules = [$/;"	v
g:lexima#space_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima#space_rules = [$/;"	v
g:lexima_enable_basic_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima_enable_basic_rules = get(g:, 'lexima_enable_basic_rules', 1)$/;"	v
g:lexima_enable_endwise_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima_enable_endwise_rules = get(g:, 'lexima_enable_endwise_rules', 1)$/;"	v
g:lexima_enable_newline_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima_enable_newline_rules = get(g:, 'lexima_enable_newline_rules', 1)$/;"	v
g:lexima_enable_space_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima_enable_space_rules = get(g:, 'lexima_enable_space_rules', 1)$/;"	v
g:lexima_map_escape	plugged\\lexima.vim\\plugin\\lexima.vim	/^  let g:lexima_map_escape = '<Esc>'$/;"	v
g:lexima_no_default_rules	_vimrc	/^let g:lexima_no_default_rules = 1$/;"	v
g:lexima_no_default_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima_no_default_rules = get(g:, 'lexima_no_default_rules', 0)$/;"	v
g:lexima_no_map_to_escape	plugged\\lexima.vim\\autoload\\lexima.vim	/^let g:lexima_no_map_to_escape = get(g:, 'lexima_no_map_to_escape', 0)$/;"	v
g:loaded_ale	plugged\\ale\\plugin\\ale.vim	/^let g:loaded_ale = 1$/;"	v
g:loaded_ale_dont_use_this_in_other_plugins_please	plugged\\ale\\plugin\\ale.vim	/^let g:loaded_ale_dont_use_this_in_other_plugins_please = 1$/;"	v
g:loaded_better_whitespace_plugin	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^let g:loaded_better_whitespace_plugin = 1$/;"	v
g:loaded_ctrlp	plugged\\ctrlp.vim\\plugin\\ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_buftag	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_changes	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_line	plugged\\ctrlp.vim\\autoload\\ctrlp\\line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_quickfix	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_tag	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_undo	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_editorconfig	plugged\\vim-editorconfig\\plugin\\editorconfig.vim	/^let g:loaded_editorconfig = 1$/;"	v
g:loaded_gitbranch	plugged\\vim-gitbranch\\plugin\\gitbranch.vim	/^let g:loaded_gitbranch = 1$/;"	v
g:loaded_hgbranch	plugged\\vim-gitbranch\\plugin\\hgbranch.vim	/^let g:loaded_hgbranch = 1$/;"	v
g:loaded_lexima	plugged\\lexima.vim\\plugin\\lexima.vim	/^let g:loaded_lexima = 1$/;"	v
g:loaded_localvimrc	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let g:loaded_localvimrc = 1$/;"	v
g:loaded_matchit	plugged\\vim-matchup\\plugin\\matchup.vim	/^let g:loaded_matchit = 1$/;"	v
g:loaded_matchparen	plugged\\vim-matchup\\plugin\\matchup.vim	/^  let g:loaded_matchparen = 1$/;"	v
g:loaded_matchup	plugged\\vim-matchup\\plugin\\matchup.vim	/^let g:loaded_matchup = 1$/;"	v
g:loaded_nerdtree_autoload	plugged\\nerdtree\\autoload\\nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	plugged\\nerdtree\\nerdtree_plugin\\exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_pathogen	autoload\\pathogen.vim	/^let g:loaded_pathogen = 1$/;"	v
g:loaded_plug	autoload\\plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_scriptease	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^let g:loaded_scriptease = 1$/;"	v
g:loaded_tagbar	plugged\\tagbar\\autoload\\tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:localvimrc_ask	_vimrc	/^let g:localvimrc_ask = 0$/;"	v
g:localvimrc_ask	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_ask                 = 0$/;"	v
g:localvimrc_autocmd	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_autocmd             = 1$/;"	v
g:localvimrc_blacklist	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_blacklist           = []$/;"	v
g:localvimrc_count	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_count               = -1$/;"	v
g:localvimrc_debug	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let g:localvimrc_debug = 0$/;"	v
g:localvimrc_debug	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_debug               = 0$/;"	v
g:localvimrc_enable	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_enable              = 1$/;"	v
g:localvimrc_event	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_event               = [ "BufWinEnter" ]$/;"	v
g:localvimrc_file	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_file = resolve(expand("<afile>:p"))$/;"	v
g:localvimrc_file_dir	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_file_dir = fnamemodify(g:localvimrc_file, ":h")$/;"	v
g:localvimrc_file_directory_only	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_file_directory_only = 0$/;"	v
g:localvimrc_name	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_name                = [ ".lvimrc" ]$/;"	v
g:localvimrc_persistence_file	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_persistence_file    = expand("$HOME\/.localvimrc_persistent")$/;"	v
g:localvimrc_persistent	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_persistent          = 1$/;"	v
g:localvimrc_reverse	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_reverse             = 0$/;"	v
g:localvimrc_sandbox	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_sandbox             = 1$/;"	v
g:localvimrc_script	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_script = l:rcfile$/;"	v
g:localvimrc_script_dir	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_script_dir = fnamemodify(g:localvimrc_script, ":h")$/;"	v
g:localvimrc_script_dir_unresolved	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_script_dir_unresolved = fnamemodify(g:localvimrc_script_unresolved, ":h/;"	v
g:localvimrc_script_unresolved	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_script_unresolved = l:rcfile_unresolved$/;"	v
g:localvimrc_sourced_once	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^          let g:localvimrc_sourced_once = 1$/;"	v
g:localvimrc_sourced_once	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_sourced_once = 0$/;"	v
g:localvimrc_sourced_once_for_file	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^            let g:localvimrc_sourced_once_for_file = 1$/;"	v
g:localvimrc_sourced_once_for_file	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^        let g:localvimrc_sourced_once_for_file = 0$/;"	v
g:localvimrc_whitelist	plugged\\vim-localvimrc\\test\\default.vim	/^let g:localvimrc_whitelist           = []$/;"	v
g:mapleader	plugged\\ale\\test\\vimrc	/^let g:mapleader=','$/;"	v
g:matchup#perf#times	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^      let g:matchup#perf#times[l:key].maximum = l:elapsed$/;"	v
g:matchup#perf#times	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^    let g:matchup#perf#times[l:key] = {$/;"	v
g:matchup#perf#times	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^    let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed$/;"	v
g:matchup#perf#times	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^    let g:matchup#perf#times[l:key].last = l:elapsed$/;"	v
g:matchup#perf#times	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let g:matchup#perf#times = {}$/;"	v
g:matchup#re#backref	plugged\\vim-matchup\\autoload\\matchup\\re.vim	/^let g:matchup#re#backref = g:matchup#re#not_bslash.'\\\\'.'\\(\\d\\)'$/;"	v
g:matchup#re#gspec	plugged\\vim-matchup\\autoload\\matchup\\re.vim	/^let g:matchup#re#gspec = g:matchup#re#not_bslash . '\\\\g{\\(.\\{-}\\)}'$/;"	v
g:matchup#re#not_bslash	plugged\\vim-matchup\\autoload\\matchup\\re.vim	/^let g:matchup#re#not_bslash = '\\v%(\\\\@<!%(\\\\\\\\)*)@<=\\m'$/;"	v
g:matchup#re#ze	plugged\\vim-matchup\\autoload\\matchup\\re.vim	/^let g:matchup#re#ze = g:matchup#re#not_bslash . '\\\\ze'$/;"	v
g:matchup#re#zs	plugged\\vim-matchup\\autoload\\matchup\\re.vim	/^let g:matchup#re#zs = g:matchup#re#not_bslash . '\\\\zs'$/;"	v
g:matchup_hotfix_html	plugged\\vim-matchup\\test\\issues\\19\\hotfix.vim	/^let g:matchup_hotfix_html = 'HtmlListHotfix'$/;"	v
g:matchup_hotfix_html	plugged\\vim-matchup\\test\\issues\\8\\hotfix.vim	/^let g:matchup_hotfix_html = 'HTMLHotFix'$/;"	v
g:matchup_hotfix_sql	plugged\\vim-matchup\\test\\issues\\3\\hotfix.vim	/^let g:matchup_hotfix_sql = 'SQLHotFix'$/;"	v
g:matchup_hotfix_vim	plugged\\vim-matchup\\test\\issues\\7\\hotfix.vim	/^let g:matchup_hotfix_vim = 'AugroupHotfix'$/;"	v
g:matchup_hotfix_vim	plugged\\vim-matchup\\test\\issues\\7\\hotfix2.vim	/^let g:matchup_hotfix_vim = 'AugroupHotfix'$/;"	v
g:matchup_matchparen_deferred	_vimrc	/^let g:matchup_matchparen_deferred = 1$/;"	v
g:matchup_matchparen_deferred	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^    let g:matchup_matchparen_deferred = 0$/;"	v
g:matchup_matchparen_enabled	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^  let g:matchup_matchparen_enabled = 0$/;"	v
g:matchup_matchparen_enabled	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^  let g:matchup_matchparen_enabled = 1$/;"	v
g:matchup_matchparen_enabled	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^  let g:matchup_matchparen_enabled = a:0 > 0$/;"	v
g:matchup_matchparen_status_offscreen	_vimrc	/^let g:matchup_matchparen_status_offscreen = 0$/;"	v
g:matchup_matchpref_html_nolists	plugged\\vim-matchup\\test\\issues\\19\\option.vim	/^let g:matchup_matchpref_html_nolists = 1$/;"	v
g:myconf_statusline_currentmode	plugin\\statusline.vim	/^let g:myconf_statusline_currentmode={$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_classes = {}$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\CompleteBuiltInClass_test.vim	/^    let g:php_builtin_classes = {$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:php_builtin_classes = { }$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:php_builtin_classes = {$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_classes = {$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:php_builtin_classes = {$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^	let g:php_builtin_classes['fictionalbuiltinclass'] = {$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_builtin_classes = {}$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^    let g:php_builtin_classes = {}$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^    let g:php_builtin_classes = {$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^    let g:php_builtin_classes = {}$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:php_builtin_classes = {}$/;"	v
g:php_builtin_classes	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^    let g:php_builtin_classes = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:php_builtin_classnames[classname] = ''$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:php_builtin_classnames = { 'DateTime':'' }$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:php_builtin_classnames = { }$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_classnames = {$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:php_builtin_classnames = {$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^	let g:php_builtin_classnames['fictionalbuiltinclass'] = ''$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^    let g:php_builtin_classnames = {'datetime': ''}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_classnames	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^    let g:php_builtin_classnames = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_functions = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_functions = {$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_functions = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_builtin_functions = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:php_builtin_functions = {$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:php_builtin_functions = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\GetFunctionLocation_test.vim	/^    let g:php_builtin_functions = {$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\GetFunctionLocation_test.vim	/^    let g:php_builtin_functions = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\GetFunctionReturnTypeHint_test.vim	/^    let g:php_builtin_functions = {}$/;"	v
g:php_builtin_functions	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^    let g:php_builtin_functions = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:php_builtin_interfacenames[interfacename] = ''$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_interfacenames = {$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^	let g:php_builtin_interfacenames['arrayaccess'] = ''$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^	let g:php_builtin_interfacenames['fictionalbuiltininterface'] = ''$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfacenames	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^    let g:php_builtin_interfacenames = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:php_builtin_interfaces = { }$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:php_builtin_interfaces = {$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_builtin_interfaces = {$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^	let g:php_builtin_interfaces['arrayaccess'] = {$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^	let g:php_builtin_interfaces['fictionalbuiltininterface'] = {$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GetClassContents_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GetClassLocation_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_interfaces	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^    let g:php_builtin_interfaces = {}$/;"	v
g:php_builtin_object_functions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^		let g:php_builtin_object_functions[classname.'::'.method_name.'('] = method_info.signature$/;"	v
g:php_builtin_object_functions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^		let g:php_builtin_object_functions[interfacename.'::'.method_name.'('] = method_info.signature$/;"	v
g:php_builtin_object_functions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_object_functions = {}$/;"	v
g:php_builtin_object_functions	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^    let g:php_builtin_object_functions = {$/;"	v
g:php_builtin_object_functions	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^    let g:php_builtin_object_functions = {}$/;"	v
g:php_builtin_vars	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_builtin_vars ={$/;"	v
g:php_builtin_vars	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^    let g:php_builtin_vars = {$/;"	v
g:php_builtin_vars	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^    let g:php_builtin_vars = {}$/;"	v
g:php_constants	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:php_constants = {}$/;"	v
g:php_constants	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_constants = {$/;"	v
g:php_constants	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_constants = {}$/;"	v
g:php_constants	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_constants = {}$/;"	v
g:php_keywords	plugged\\phpcomplete.vim\\misc\\php_keywords.vim	/^let g:php_keywords = {$/;"	v
g:php_keywords	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_keywords = {$/;"	v
g:php_keywords	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:php_keywords = {}$/;"	v
g:php_keywords	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:php_keywords = {}$/;"	v
g:php_syntax_extensions_disabled	plugged\\php.vim\\syntax\\php.vim	/^    let g:php_syntax_extensions_disabled = []$/;"	v
g:php_syntax_extensions_enabled	plugged\\php.vim\\syntax\\php.vim	/^    let g:php_syntax_extensions_enabled = ["bcmath", "bz2", "core", "curl", "date", "dom", "ereg/;"	v
g:phpcomplete_active_class_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_active_class_extensions += g:phpcomplete_add_class_extensions$/;"	v
g:phpcomplete_active_class_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:phpcomplete_active_class_extensions = [$/;"	v
g:phpcomplete_active_constant_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_active_constant_extensions += g:phpcomplete_add_constant_extensions$/;"	v
g:phpcomplete_active_constant_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:phpcomplete_active_constant_extensions = [$/;"	v
g:phpcomplete_active_function_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_active_function_extensions += g:phpcomplete_add_function_extensions$/;"	v
g:phpcomplete_active_function_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:phpcomplete_active_function_extensions = [$/;"	v
g:phpcomplete_active_interface_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_active_interface_extensions += g:phpcomplete_add_interface_extensions$/;"	v
g:phpcomplete_active_interface_extensions	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let g:phpcomplete_active_interface_extensions = [$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['0mq_messaging'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['apc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['cairo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['chdb'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['curl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['date_time'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['directories'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['dom'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['ev'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['event'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['fann'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['fileinfo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['gearman'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['gender'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['gmagick'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['gmp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['haru'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['hrtime'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['http'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['imagemagick'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['intl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['judy'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['ktaglib'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['lapack'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['libxml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['lua'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['memcache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['memcached'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['ming'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['mongo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['mysqli'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['mysqlnd_uh'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['oauth'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['oci8'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['phar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['predefined_exceptions'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['predefined_interfaces_and_classes'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['pthreads'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['quickhash'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['rar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['reflection'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['rrd'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['sessions'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['simplexml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['snmp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['soap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['solr'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['sphinx'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['spl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['spl_types'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['sqlite3'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['stomp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['streams'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['svm'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['sync'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['tidy'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['tokyo_tyrant'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['v8js'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['varnish'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['weakref'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['xmldiff'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['xmlreader'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['xsl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['yaf'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['yar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['classes']['zip'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['4d_pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['apc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['apd'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['arrays'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['bbcode'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['blenc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['cairo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['calendar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['classkit'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['com'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['command_line_usage'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['common'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['context_options_and_parameters'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['cubrid'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['cubrid_pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['curl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['cyrus'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['date_time'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['db_'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['dbx'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['direct_io'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['directories'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['dom'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['eio'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['error_handling'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ev'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['event'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['exif'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['expect'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['fann'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['fdf'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['fileinfo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['filesystem'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['filter'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['firebird_interbase'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['firebird_pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['fribidi'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['frontbase'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ftp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['gd'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['gearman'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['geoip'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['gmp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['gnupg'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['gopher'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['gupnp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['handling_file_uploads'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['hash'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['http'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['hyperwave_api'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ibm_db2'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['iconv'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['id3'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['iis'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['imagemagick'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['imap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['informix'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ingres'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['inotify'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['intl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['json'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['kadm5'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ldap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['libevent'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['libxml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['list_of_parser_tokens'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['list_of_reserved_words'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mailparse'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['math'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['maxdb'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mcrypt'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mcve'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['memcache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mhash'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_4_to_php_50x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_50x_to_php_51x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_51x_to_php_52x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_52x_to_php_53x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_53x_to_php_54x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_54x_to_php_55x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['migrating_from_php_55x_to_php_56x'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ming'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['misc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mnogosearch'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mongo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ms_sql_server_pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['msql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mssql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['multibyte_string'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysql_pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysqli'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysqlnd_memcache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysqlnd_ms'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysqlnd_mux'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysqlnd_qc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['mysqlnd_uh'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ncurses'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['network'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['newt'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['oauth'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['oci8'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['odbc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['odbc_and_db2_pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['oggvorbis'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['openal'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['openssl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['output_control'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['paradox'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['parsekit'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['password_hashing'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['pcntl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['pcre'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['pdo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['php_options_info'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['php_type_comparison_tables'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['phpini_directives'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['posix'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['posix_regex'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['postgresql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['program_execution'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['pspell'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['pthreads'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['radius'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['rar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['rpm_reader'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['runkit'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sam'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['semaphore'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sessions'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['snmp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['soap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sockets'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['solr'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sphinx'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['spl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sqlite'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sqlite3'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['sqlsrv'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['ssh2'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['streams'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['strings'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['supported_protocols_and_wrappers'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['svn'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['tidy'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['trader'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['types'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['unknow'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['uopz'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['urls'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['variable_handling'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['varnish'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['win32service'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['xattr'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['xdiff'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['xhprof'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['xml_parser'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['xsl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['yaf'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['yaml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['yar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['yp_nis'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['constants']['zlib'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['apache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['apc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['apd'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['arrays'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['bbcode'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['bc_math'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['bcompiler'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['blenc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['bzip2'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['cairo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['calendar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['chdb'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['classes_objects'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['classkit'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['com'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['crack'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ctype'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['cubrid'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['curl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['cyrus'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['date_time'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['db_'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['dba'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['dbase'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['dbx'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['direct_io'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['directories'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['dom'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['eio'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['enchant'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['error_handling'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['exif'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['expect'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['fam'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['fann'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['fastcgi_process_manager'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['fdf'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['fileinfo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['filepro'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['filesystem'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['filter'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['firebird_interbase'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['fribidi'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['frontbase'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ftp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['function_handling'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['gd'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['geoip'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['gettext'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['gmp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['gnupg'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['gopher'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['gupnp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['hash'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['http'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['hyperwave_api'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ibm_db2'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['iconv'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['id3'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['iis'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['imap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['inclued'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['informix'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ingres'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['inotify'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['intl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['json'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['judy'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['kadm5'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ldap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['libevent'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['libxml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['lzf'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mail'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mailparse'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['math'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['maxdb'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mcrypt'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mcve'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['memcache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mhash'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ming'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['misc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mnogosearch'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mongo'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mqseries'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['msession'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['msql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mssql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['multibyte_string'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mysql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mysqli'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mysqlnd_memcache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mysqlnd_ms'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mysqlnd_qc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['mysqlnd_uh'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ncurses'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['network'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['newt'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['nsapi'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['oauth'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['oci8'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['odbc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['opcache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['openal'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['openssl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['output_control'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['paradox'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['parsekit'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['password_hashing'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['pcntl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['pcre'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['pdf'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['php_options_info'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['posix'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['posix_regex'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['postgresql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['proctitle'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['program_execution'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ps'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['pspell'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['radius'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['rar'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['readline'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['recode'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['rpm_reader'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['rrd'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['runkit'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['semaphore'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['session_pgsql'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['sessions'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['shared_memory'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['simplexml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['snmp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['soap'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['sockets'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['solr'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['spl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['spplus'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['sqlite'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['sqlsrv'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ssdeep'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['ssh2'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['statistics'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['stomp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['streams'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['strings'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['svn'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['sybase'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['taint'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['tcp'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['tidy'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['tokenizer'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['trader'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['uopz'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['urls'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['variable_handling'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['vpopmail'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['wddx'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['win32ps'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['win32service'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['wincache'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['xattr'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['xdiff'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['xhprof'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['xml_parser'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['xml_rpc'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['xmlwriter'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['yaml'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['yaz'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['yp_nis'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['zip'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['functions']['zlib'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['interfaces']['date_time'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['interfaces']['json'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['interfaces']['predefined_interfaces_and_classes'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['interfaces']['reflection'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin.vim	/^let g:phpcomplete_builtin['interfaces']['spl'] = {$/;"	v
g:phpcomplete_builtin	plugged\\phpcomplete.vim\\misc\\builtin_manual.vim	/^let g:phpcomplete_builtin['classes']['xmlwriter'] = {$/;"	v
g:phpcomplete_cache_taglists	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_cache_taglists = 1$/;"	v
g:phpcomplete_complete_for_unknown_classes	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_complete_for_unknown_classes = 0$/;"	v
g:phpcomplete_complete_for_unknown_classes	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^    let g:phpcomplete_complete_for_unknown_classes = 0$/;"	v
g:phpcomplete_complete_for_unknown_classes	plugged\\phpcomplete.vim\\tests\\CompleteUnknownClass_test.vim	/^    let g:phpcomplete_complete_for_unknown_classes = 1$/;"	v
g:phpcomplete_enhance_jump_to_definition	plugged\\phpcomplete.vim\\ftplugin\\php_phpcomplete.vim	/^let g:phpcomplete_enhance_jump_to_definition = get(g:, 'phpcomplete_enhance_jump_to_definition',/;"	v
g:phpcomplete_mappings	plugged\\phpcomplete.vim\\ftplugin\\php_phpcomplete.vim	/^let g:phpcomplete_mappings = extend({$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\CompleteClassName_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\CompleteGeneral_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 2$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\CompleteUse_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 99$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\GenerateBuiltinClassStub_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\GetCurrentSymbolWithContext_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 2$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	plugged\\phpcomplete.vim\\tests\\LocateSymbol_test.vim	/^    let g:phpcomplete_min_num_of_chars_for_namespace_completion = 2$/;"	v
g:phpcomplete_parse_docblock_comments	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_parse_docblock_comments = 0$/;"	v
g:phpcomplete_parse_docblock_comments	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^    let g:phpcomplete_parse_docblock_comments = 0$/;"	v
g:phpcomplete_parse_docblock_comments	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^    let g:phpcomplete_parse_docblock_comments = 1$/;"	v
g:phpcomplete_relax_static_constraint	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_relax_static_constraint = 0$/;"	v
g:phpcomplete_relax_static_constraint	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^    let g:phpcomplete_relax_static_constraint = 0$/;"	v
g:phpcomplete_relax_static_constraint	plugged\\phpcomplete.vim\\tests\\CompleteUserClass_test.vim	/^    let g:phpcomplete_relax_static_constraint = 1$/;"	v
g:phpcomplete_relax_static_constraint	plugged\\phpcomplete.vim\\tests\\GetDocBlock_test.vim	/^    let g:phpcomplete_relax_static_constraint = 0$/;"	v
g:phpcomplete_search_tags_for_variables	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let g:phpcomplete_search_tags_for_variables = 0$/;"	v
g:phpcomplete_search_tags_for_variables	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^    let g:phpcomplete_search_tags_for_variables = 0$/;"	v
g:phpcomplete_search_tags_for_variables	plugged\\phpcomplete.vim\\tests\\CompleteVariable_test.vim	/^    let g:phpcomplete_search_tags_for_variables = 1$/;"	v
g:phpcomplete_search_tags_for_variables	plugged\\phpcomplete.vim\\tests\\GetClassName_test.vim	/^    let g:phpcomplete_search_tags_for_variables = 1$/;"	v
g:plug_home	autoload\\plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload\\plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload\\plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload\\plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload\\plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:sftpsync_echo_time	plugin\\sftpsync_conf.vim	/^let g:sftpsync_echo_time = 0$/;"	v
g:sftpsync_host_keys_file	plugin\\sftpsync_conf.vim	/^let g:sftpsync_host_keys_file = 'C:\/Cygwin64\/home\/$USERNAME\/.ssh\/known_hosts'$/;"	v
g:sftpsync_private_key_file	plugin\\sftpsync_conf.vim	/^let g:sftpsync_private_key_file = 'C:\/Cygwin64\/home\/$USERNAME\/.ssh\/id_rsa'$/;"	v
g:sftpsync_projects	plugin\\sftpsync_conf.vim	/^let g:sftpsync_projects = {$/;"	v
g:sftpsync_use_statusline	plugin\\sftpsync_conf.vim	/^let g:sftpsync_use_statusline = 1$/;"	v
g:smartBackspacePattern	plugin\\backspace.vim	/^let g:smartBackspacePattern = join(['\\V\\s\\@<=\\.', '\\_^\\@<=\\.', '\\[\\^;[=,({<>''`".\/_$@!/;"	v
g:snips_author	plugged\\vim-snippets\\plugin\\vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_email	plugged\\vim-snippets\\plugin\\vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_github	plugged\\vim-snippets\\plugin\\vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:tagbar#icon_closed	plugged\\tagbar\\autoload\\tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	plugged\\tagbar\\autoload\\tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_autoclose	_vimrc	/^	let g:tagbar_autoclose = 0$/;"	v
g:tagbar_autoclose	plugged\\tagbar\\autoload\\tagbar.vim	/^    let g:tagbar_autoclose = !g:tagbar_autoclose$/;"	v
g:tagbar_case_insensitive	plugged\\tagbar\\autoload\\tagbar.vim	/^    let g:tagbar_case_insensitive = !g:tagbar_case_insensitive$/;"	v
g:tagbar_ctags_bin	plugged\\tagbar\\autoload\\tagbar.vim	/^                let g:tagbar_ctags_bin = ctags$/;"	v
g:tagbar_ctags_bin	plugged\\tagbar\\autoload\\tagbar.vim	/^        let g:tagbar_ctags_bin = expand(g:tagbar_ctags_bin)$/;"	v
g:tagbar_hide_nonpublic	plugged\\tagbar\\autoload\\tagbar.vim	/^    let g:tagbar_hide_nonpublic = !g:tagbar_hide_nonpublic$/;"	v
g:tagbar_iconchars	plugged\\tagbar\\plugin\\tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	plugged\\tagbar\\plugin\\tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:tagbar_phpctags_bin	plugged\\tagbar-phpctags.vim\\plugin\\tagbar-phpctags.vim	/^        let g:tagbar_phpctags_bin = 'phpctags'$/;"	v
g:tagbar_phpctags_bin	plugged\\tagbar-phpctags.vim\\plugin\\tagbar-phpctags.vim	/^        let g:tagbar_phpctags_bin = expand("<sfile>:p:h").'\/..\/bin\/phpctags'$/;"	v
g:tagbar_phpctags_bin	plugged\\tagbar-phpctags.vim\\plugin\\tagbar-phpctags.vim	/^        let g:tagbar_phpctags_bin = expand("<sfile>:p:h").'\/..\/phpctags'$/;"	v
g:tagbar_phpctags_bin	plugged\\tagbar-phpctags.vim\\plugin\\tagbar-phpctags.vim	/^        let g:tagbar_phpctags_bin = expand("<sfile>:p:h").'\/..\/phpctags\/phpctags'$/;"	v
g:tagbar_phpctags_memory_limit	plugged\\tagbar-phpctags.vim\\plugin\\tagbar-phpctags.vim	/^    let g:tagbar_phpctags_memory_limit = '128M'$/;"	v
g:tagbar_sort	plugged\\tagbar\\autoload\\tagbar.vim	/^        let g:tagbar_sort = !g:tagbar_sort$/;"	v
g:tagbar_type_php	plugged\\tagbar-phpctags.vim\\plugin\\tagbar-phpctags.vim	/^let g:tagbar_type_php = {$/;"	v
g:tagbar_type_snippets	plugged\\ultisnips\\ftplugin\\snippets.vim	/^let g:tagbar_type_snippets = {$/;"	v
g:tcomment#blank_lines	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#blank_lines = 2    "{{{2$/;"	v
g:tcomment#block2_fmt_c	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#block2_fmt_c = {$/;"	v
g:tcomment#block_fmt_c	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#block_fmt_c = {$/;"	v
g:tcomment#block_fmt_xml	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#block_fmt_xml = {$/;"	v
g:tcomment#commentstring_c	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#commentstring_c = '\/* %s *\/'   "{{{2$/;"	v
g:tcomment#filetype#guess	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_blade	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_blade = 'html'   "{{{2$/;"	v
g:tcomment#filetype#guess_dsl	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_dsl = 'xml'   "{{{2$/;"	v
g:tcomment#filetype#guess_jinja	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_jinja = 'html'   "{{{2$/;"	v
g:tcomment#filetype#guess_php	ftplugin\\php.vim	/^let g:tcomment#filetype#guess_php = 'php'$/;"	v
g:tcomment#filetype#guess_php	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_php = 'html'   "{{{2$/;"	v
g:tcomment#filetype#guess_rmd	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_rmd = 'markdown'   "{{{2$/;"	v
g:tcomment#filetype#guess_rnoweb	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_rnoweb = 'r'   "{{{2$/;"	v
g:tcomment#filetype#guess_vue	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#guess_vue = 'html'   "{{{2$/;"	v
g:tcomment#filetype#ignore_blade	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#ignore_blade = 'html'   "{{{2$/;"	v
g:tcomment#filetype#ignore_php	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#ignore_php = 'sql'   "{{{2$/;"	v
g:tcomment#filetype#map	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#map = {$/;"	v
g:tcomment#filetype#syntax_map	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^    let g:tcomment#filetype#syntax_map = {$/;"	v
g:tcomment#ignore_char_type	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#ignore_char_type = 1   "{{{2$/;"	v
g:tcomment#ignore_comment_def	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#ignore_comment_def = []   "{{{2$/;"	v
g:tcomment#inline_fmt_c	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#inline_fmt_c = tcomment#GetLineC()$/;"	v
g:tcomment#inline_fmt_xml	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#inline_fmt_xml = {$/;"	v
g:tcomment#line_fmt_c	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#line_fmt_c = {$/;"	v
g:tcomment#mode_extra	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#mode_extra = ''   "{{{2$/;"	v
g:tcomment#must_escape_expression_backslash	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#must_escape_expression_backslash = 0   "{{{2$/;"	v
g:tcomment#operator#mode_extra	plugged\\tcomment_vim\\autoload\\tcomment\\operator.vim	/^    let g:tcomment#operator#mode_extra = ''   "{{{2$/;"	v
g:tcomment#options	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#options = {}   "{{{2$/;"	v
g:tcomment#options_comments	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#options_comments = {'whitespace': get(g:tcomment#options, 'whitespace', 'both/;"	v
g:tcomment#options_commentstring	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#options_commentstring = {'whitespace': get(g:tcomment#options, 'whitespace', /;"	v
g:tcomment#replacements_c	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#replacements_c = {$/;"	v
g:tcomment#replacements_xml	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#replacements_xml = {$/;"	v
g:tcomment#rstrip_on_uncomment	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^    let g:tcomment#rstrip_on_uncomment = 1   "{{{2$/;"	v
g:tcomment#syntax#substitute	plugged\\tcomment_vim\\autoload\\tcomment\\syntax.vim	/^    let g:tcomment#syntax#substitute = {$/;"	v
g:tcomment#types#dirty	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^        let g:tcomment#types#dirty = 0$/;"	v
g:tcomment#types#dirty	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^    let g:tcomment#types#dirty = 1$/;"	v
g:tcomment#types#dirty	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^let g:tcomment#types#dirty = 1$/;"	v
g:tcomment#types#names	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^        let g:tcomment#types#names = keys(s:definitions)$/;"	v
g:tcomment#types#rx	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^        let g:tcomment#types#rx = '\\V\\^\\('. join(g:tcomment#types#names, '\\|') .'\\)\\(\\u\\/;"	v
g:tcomment_mapleader1	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_mapleader1 = '<c-_>' "{{{2$/;"	v
g:tcomment_mapleader2	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_mapleader2 = '<Leader>_' "{{{2$/;"	v
g:tcomment_mapleader_comment_anyway	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_mapleader_comment_anyway = 'g>' "{{{2$/;"	v
g:tcomment_mapleader_uncomment_anyway	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_mapleader_uncomment_anyway = 'g<' "{{{2$/;"	v
g:tcomment_maps	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_maps = 1   "{{{2$/;"	v
g:tcomment_opleader1	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_opleader1 = 'gc' "{{{2$/;"	v
g:tcomment_textobject_inlinecomment	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^    let g:tcomment_textobject_inlinecomment = 'ic'   "{{{2$/;"	v
g:used_javascript_libs	ftplugin\\javascript.vim	/^let g:used_javascript_libs = 'jquery,lodash,underscore,react'$/;"	v
g:v_motion_force	plugged\\vim-matchup\\autoload\\matchup.vim	/^  let g:v_motion_force = a:wise$/;"	v
g:v_motion_force	plugged\\vim-matchup\\autoload\\matchup.vim	/^let g:v_motion_force = ''$/;"	v
g:vim_json_syntax_conceal	ftplugin\\json.vim	/^let g:vim_json_syntax_conceal = 0$/;"	v
g:vim_json_syntax_conceal	plugged\\vim-json\\ftplugin\\json.vim	/^	let g:vim_json_syntax_conceal = 1$/;"	v
g:vim_json_syntax_concealcursor	plugged\\vim-json\\ftplugin\\json.vim	/^	let g:vim_json_syntax_concealcursor = ""$/;"	v
g:vim_json_warnings	plugged\\vim-json\\ftplugin\\json.vim	/^	let g:vim_json_warnings = 1$/;"	v
g:vimtex_matchparen_enabled	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^    let g:vimtex_matchparen_enabled = 0$/;"	v
g:vimtex_matchparen_enabled	plugged\\vim-matchup\\plugin\\matchup.vim	/^  let g:vimtex_matchparen_enabled = 0$/;"	v
g:xmldata_aria	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let g:xmldata_aria = {$/;"	v
g:xmldata_html5	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let g:xmldata_html5 = {$/;"	v
g:zenburn_alternate_Error	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_alternate_Error = 0$/;"	v
g:zenburn_alternate_Include	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_alternate_Include = 0$/;"	v
g:zenburn_alternate_Visual	_vimrc	/^let g:zenburn_alternate_Visual = 1$/;"	v
g:zenburn_alternate_Visual	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_alternate_Visual = 0$/;"	v
g:zenburn_color_also_Ignore	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_color_also_Ignore = 0$/;"	v
g:zenburn_disable_Label_underline	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_disable_Label_underline = 0$/;"	v
g:zenburn_enable_TagHighlight	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_enable_TagHighlight = 0$/;"	v
g:zenburn_force_dark_Background	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_force_dark_Background = 0$/;"	v
g:zenburn_high_Contrast	_vimrc	/^let g:zenburn_high_Contrast = 1$/;"	v
g:zenburn_high_Contrast	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_high_Contrast = 0$/;"	v
g:zenburn_old_Visual	_vimrc	/^let g:zenburn_old_Visual = 1$/;"	v
g:zenburn_old_Visual	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_old_Visual = 0$/;"	v
g:zenburn_transparent	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_transparent = 0$/;"	v
g:zenburn_unified_CursorColumn	_vimrc	/^let g:zenburn_unified_CursorColumn = 1$/;"	v
g:zenburn_unified_CursorColumn	plugged\\Zenburn\\colors\\zenburn.vim	/^    let g:zenburn_unified_CursorColumn = 0$/;"	v
g=	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  nmap g= <Plug>ScripteaseFilter$/;"	m
g=	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  xmap g= <Plug>ScripteaseFilter$/;"	m
g==	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  nmap g== <Plug>ScripteaseFilter<SID>_$/;"	m
gather_candidates	plugged\\ultisnips\\rplugin\\python3\\deoplete\\sources\\ultisnips.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gd	plugged\\php.vim\\scripts\\syntax.ini	/^gd = yes$/;"	k	section:extensions
getActualThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function getActualThing(){$/;"	f	class:BarNS\\Things\\Thing
getAnother31Instance	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^	public function getAnother31Instance() {$/;"	f	class:NS3\\SubNS\\Level3
getBasename	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def getBasename(path):$/;"	f
getCacheFileName	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def getCacheFileName(self):$/;"	m	class:Mru
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:AnyExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:BufferExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:BufTagExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:ColorschemeExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:Explorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:Explorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:FileExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:FunctionExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:HelpExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:HistoryExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:LineExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:MruExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:SelfExplorer
getContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def getContent(self, *args, **kwargs):$/;"	m	class:TagExplorer
getDirname	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def getDirname(path):$/;"	f
getFreshContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def getFreshContent(self, *args, **kwargs):$/;"	m	class:Explorer
getFreshContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def getFreshContent(self, *args, **kwargs):$/;"	m	class:Explorer
getFreshContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def getFreshContent(self, *args, **kwargs):$/;"	m	class:FileExplorer
getFreshContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def getFreshContent(self, *args, **kwargs):$/;"	m	class:HelpExplorer
getFreshContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def getFreshContent(self, *args, **kwargs):$/;"	m	class:TagExplorer
getHighlights	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^HighlightGroup* getHighlights(char* text,$/;"	f	typeref:typename:HighlightGroup *
getHighlights	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def getHighlights(self, text):$/;"	m	class:FuzzyMatch
getHistoryType	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def getHistoryType(self):$/;"	m	class:HistoryExplorer
getLevel31Instance	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^	public function getLevel31Instance() {$/;"	f	class:NS3\\SubNS\\Level3
getMaxBufnameLen	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def getMaxBufnameLen(self):$/;"	m	class:BufferExplorer
getMaxBufnameLen	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def getMaxBufnameLen(self):$/;"	m	class:MruExplorer
getMruBufnrs	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def getMruBufnrs(self):$/;"	m	class:Mru
getOriginalCursor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def getOriginalCursor(self):$/;"	m	class:LfInstance
getOriginalPos	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def getOriginalPos(self):$/;"	m	class:LfInstance
getPage	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^    public static function getPage(){$/;"	f	class:Foo\\Page
getPage2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^    public static function getPage2(){$/;"	f	class:Foo\\Page
getPrefixLength	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def getPrefixLength(self):$/;"	m	class:BufferExplorer
getPrefixLength	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def getPrefixLength(self):$/;"	m	class:MruExplorer
getRenamedPage	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^    public static function getRenamedPage(){$/;"	f	class:Foo\\Page
getRenamedPage2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^    public static function getRenamedPage2(){$/;"	f	class:Foo\\Page
getResult	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops.php	/^	public function getResult() {$/;"	f	class:Model
getResult	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops_extra_whitespace.php	/^   public function getResult() {$/;"	f	class:Model
getSomething	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function getSomething() {$/;"	f	class:FooNS\\Foo
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def getStlCategory(self):$/;"	m	class:AnyExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def getStlCategory(self):$/;"	m	class:BufferExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def getStlCategory(self):$/;"	m	class:BufTagExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def getStlCategory(self):$/;"	m	class:ColorschemeExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def getStlCategory(self):$/;"	m	class:Explorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def getStlCategory(self):$/;"	m	class:Explorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def getStlCategory(self):$/;"	m	class:FileExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def getStlCategory(self):$/;"	m	class:FunctionExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def getStlCategory(self):$/;"	m	class:HelpExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def getStlCategory(self):$/;"	m	class:HistoryExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def getStlCategory(self):$/;"	m	class:LineExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def getStlCategory(self):$/;"	m	class:MruExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def getStlCategory(self):$/;"	m	class:SelfExplorer
getStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def getStlCategory(self):$/;"	m	class:TagExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def getStlCurDir(self):$/;"	m	class:AnyExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def getStlCurDir(self):$/;"	m	class:BufferExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def getStlCurDir(self):$/;"	m	class:BufTagExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\colorschemeExpl.py	/^    def getStlCurDir(self):$/;"	m	class:ColorschemeExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def getStlCurDir(self):$/;"	m	class:Explorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def getStlCurDir(self):$/;"	m	class:Explorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def getStlCurDir(self):$/;"	m	class:FileExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def getStlCurDir(self):$/;"	m	class:FunctionExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^    def getStlCurDir(self):$/;"	m	class:HelpExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^    def getStlCurDir(self):$/;"	m	class:HistoryExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^    def getStlCurDir(self):$/;"	m	class:LineExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def getStlCurDir(self):$/;"	m	class:MruExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^    def getStlCurDir(self):$/;"	m	class:SelfExplorer
getStlCurDir	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^    def getStlCurDir(self):$/;"	m	class:TagExplorer
getThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function getThing() {$/;"	f	class:FooNS\\Foo
getThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	function getThing() {$/;"	f	class:FooNS\\SomethingNS\\Something
getUser	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_return.php	/^    public static function getUser(){ }$/;"	f	class:User
getWeight	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^float getWeight(char* text, uint16_t text_len,$/;"	f	typeref:typename:float
getWeight	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def getWeight(self, text):$/;"	m	class:FuzzyMatch
getWeight2	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def getWeight2(self, text):$/;"	m	class:FuzzyMatch
getWeight3	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fuzzyMatch.py	/^    def getWeight3(self, text):$/;"	m	class:FuzzyMatch
get_buffer_data	plugged\\ultisnips\\test\\vim_interface.py	/^    def get_buffer_data(self):$/;"	m	class:VimInterface
get_buffer_filetypes	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def get_buffer_filetypes(self):$/;"	m	class:SnippetManager
get_clear_priority	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def get_clear_priority(self, filetypes):$/;"	m	class:SnippetSource
get_cleared	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def get_cleared(self, filetypes):$/;"	m	class:SnippetSource
get_comment_format	plugged\\vim-snippets\\pythonx\\vimsnippets.py	/^def get_comment_format():$/;"	f
get_cursor_pos	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def get_cursor_pos():$/;"	f
get_deep_extends	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def get_deep_extends(self, base_filetypes):$/;"	m	class:SnippetSource
get_extension_name	plugged\\phpcomplete.vim\\bin\\generator\\tools.php	/^function get_extension_name($file, $extensions) {$/;"	f
get_extension_names	plugged\\phpcomplete.vim\\bin\\generator\\tools.php	/^function get_extension_names($docs_dir) {$/;"	f
get_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo.php	/^function get_foo() {$/;"	f
get_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo.php	/^function get_foo() {$/;"	f	namespace:NS1
get_mark_pos	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def get_mark_pos(name):$/;"	f
get_matching_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_snippet_dictionary.py	/^    def get_matching_snippets(self, trigger, potentially, autotrigger_only,$/;"	m	class:SnippetDictionary
get_option	plugged\\vim-snippets\\pythonx\\javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
get_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def get_snippets(self, filetypes, before, possible, autotrigger_only,$/;"	m	class:SnippetSource
get_tabstops	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def get_tabstops(self):$/;"	m	class:SnippetInstance
gettext	plugged\\php.vim\\scripts\\syntax.ini	/^gettext = yes$/;"	k	section:extensions
gitbranch#detect	plugged\\vim-gitbranch\\autoload\\gitbranch.vim	/^function! gitbranch#detect(path) abort$/;"	f
gitbranch#dir	plugged\\vim-gitbranch\\autoload\\gitbranch.vim	/^function! gitbranch#dir(path) abort$/;"	f
gitbranch#name	plugged\\vim-gitbranch\\autoload\\gitbranch.vim	/^function! gitbranch#name() abort$/;"	f
global_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
global_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
global_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
global_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
global_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
global_states_and_properties	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let global_states_and_properties = {$/;"	v
gmp	plugged\\php.vim\\scripts\\syntax.ini	/^gmp = no$/;"	k	section:extensions
graphic_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let graphic_role = [$/;"	v
guess_edit	plugged\\ultisnips\\pythonx\\UltiSnips\\_diff.py	/^def guess_edit(initial_line, last_text, current_text, vim_state):$/;"	f
h	plugin\\quickfix.vim	/^nmap <silent> h :lfirs<CR>zv$/;"	m
hOffset	plugged\\vim-json\\json-test.json	/^        "hOffset": 250,$/;"	n	object:widget.image
hOffset	plugged\\vim-json\\json-test.json	/^        "hOffset": 250,$/;"	n	object:widget.text
handle_action	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_common.py	/^def handle_action(head, tail, line_index):$/;"	f
handle_class_const	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function handle_class_const($xpath, $node, $file) {$/;"	f
handle_class_property	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function handle_class_property($xpath, $node, $file) {$/;"	f
handle_context	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_common.py	/^def handle_context(tail, line_index):$/;"	f
handle_extends	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_common.py	/^def handle_extends(tail, line_index):$/;"	f
handle_func_alias	plugged\\phpcomplete.vim\\bin\\generator\\functions.php	/^function handle_func_alias($xpath, $nodes, $file) {$/;"	f
handle_func_def	plugged\\phpcomplete.vim\\bin\\generator\\functions.php	/^function handle_func_def($xpath, $nodes, $file) {$/;"	f
handle_method_def	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function handle_method_def($xpath, $classname, $node, $file) {$/;"	f
has_option	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def has_option(self, opt):$/;"	m	class:SnippetDefinition
has_version	plugged\\ultisnips\\test\\vim_interface.py	/^    def has_version(self, major, minor, patchlevel):$/;"	m	class:VimInterface
hash	plugged\\php.vim\\scripts\\syntax.ini	/^hash = yes$/;"	k	section:extensions
head_tail	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^def head_tail(line):$/;"	f
height	plugged\\vim-json\\json-test.json	/^        "height": 500$/;"	n	object:widget.window
helpExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\helpExpl.py	/^helpExplManager = HelpExplManager()$/;"	v
hgbranch	plugged\\vim-gitbranch\\plugin\\hgbranch.vim	/^augroup hgbranch$/;"	a
hgbranch#detect	plugged\\vim-gitbranch\\autoload\\hgbranch.vim	/^function! hgbranch#detect(path) abort$/;"	f
hgbranch#dir	plugged\\vim-gitbranch\\autoload\\hgbranch.vim	/^function! hgbranch#dir(path) abort$/;"	f
hgbranch#name	plugged\\vim-gitbranch\\autoload\\hgbranch.vim	/^function! hgbranch#name() abort$/;"	f
hideCursor	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def hideCursor(self):$/;"	m	class:LfCli
highlight surrounding	plugged\\vim-matchup\\README.md	/^#### highlight surrounding$/;"	t
highlightMatches	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def highlightMatches(self):$/;"	m	class:LfCli
highlighting timeouts	plugged\\vim-matchup\\README.md	/^#### highlighting timeouts$/;"	t
historyExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\historyExpl.py	/^historyExplManager = HistoryExplManager()$/;"	v
html2vimdoc	plugged\\vim-localvimrc\\Makefile	/^html2vimdoc = $(vim-tools)\/bin\/html2vimdoc$/;"	m
html5.vim	plugged\\html5.vim\\CHANGES.markdown	/^# html5.vim$/;"	c
html5.vim	plugged\\html5.vim\\README.md	/^# html5.vim$/;"	c
htmlcomplete#CheckDoctype	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#DetectOmniFlavor	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#LoadAria	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	plugged\\html5.vim\\autoload\\htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
i	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py b:Lf_AnyExplManager."input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "bufTagExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "bufExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "colorschemeExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "fileExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "functionExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "helpExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "lineExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "mruExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "selfExplManager.input()"<CR>$/;"	m
i	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> i             :exec g:Lf_py "tagExplManager.input()"<CR>$/;"	m
i	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> i <NOP>$/;"	m
i	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentInstruction\\instructions.php	/^for ($i = 0; $i < 10; ++$i) $date-> \/\/ cursor before the comment$/;"	v
iabbrev_map	plugged\\supertab\\plugin\\supertab.vim	/^    let iabbrev_map = iabbrevs =~? '\\<cr>'$/;"	v
iconv	plugged\\php.vim\\scripts\\syntax.ini	/^iconv = yes$/;"	k	section:extensions
id	plugged\\vim-json\\json-test.json	/^  "id": "file",$/;"	s	object:menu
ifExtensionEnabled	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$ifExtensionEnabled = function ($extensionName) {$/;"	f
ignores	plugged\\ultisnips\\test\\test_Selection.py	/^    ignores = ['H']$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
ignores	plugged\\ultisnips\\test\\test_Selection.py	/^    ignores = ['e', 'H']$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
ignores	plugged\\ultisnips\\test\\test_Selection.py	/^    ignores = ['e']$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
ignores	plugged\\ultisnips\\test\\test_Selection.py	/^    ignores = []$/;"	v	class:_SelectModeMappings
image	plugged\\vim-json\\json-test.json	/^    "image": { $/;"	o	object:widget
image_repro	plugged\\ultisnips\\Makefile	/^image_repro: image_vim_80_py3$/;"	t
image_vim_74_py2	plugged\\ultisnips\\Makefile	/^image_vim_74_py2:$/;"	t
image_vim_74_py3	plugged\\ultisnips\\Makefile	/^image_vim_74_py3:$/;"	t
image_vim_80_py2	plugged\\ultisnips\\Makefile	/^image_vim_80_py2:$/;"	t
image_vim_80_py3	plugged\\ultisnips\\Makefile	/^image_vim_80_py3:$/;"	t
image_vim_git_py2	plugged\\ultisnips\\Makefile	/^image_vim_git_py2:$/;"	t
image_vim_git_py3	plugged\\ultisnips\\Makefile	/^image_vim_git_py3:$/;"	t
imap	plugged\\php.vim\\scripts\\syntax.ini	/^imap = no$/;"	k	section:extensions
indent_to_spaces	plugged\\ultisnips\\pythonx\\UltiSnips\\indent_util.py	/^    def indent_to_spaces(self, indent):$/;"	m	class:IndentUtil
inherited	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\base_foo.php	/^	public function inherited() {$/;"	f	class:BaseFoo
init-author	plugged\\html5.vim\\Makefile	/^init-author:$/;"	t
init-runtime	plugged\\html5.vim\\Makefile	/^init-runtime:$/;"	t
initBuffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def initBuffer(self, content, unit, set_content):$/;"	m	class:LfInstance
initPattern	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^PatternContext* initPattern(char* pattern, uint16_t pattern_len)$/;"	f	typeref:typename:PatternContext *
initfuzzyMatchC	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^PyMODINIT_FUNC initfuzzyMatchC(void)$/;"	f	typeref:typename:PyMODINIT_FUNC
initial_line	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_BackspaceOneChar
initial_line	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_DeleteOneChar
initial_line	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_InsertOneChar
initial_line	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_InsertOneChar1
initial_line	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_Noop0
initialize	plugged\\vim-matchup\\test\\issues\\26\\example.rb	/^    def initialize$/;"	f	class:Example
inject_class_constants	plugged\\phpcomplete.vim\\bin\\generator\\constants.php	/^function inject_class_constants(&$class_groups, $class_constant_groups, $generate_warnings = tru/;"	f
input	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def input(self, callback):$/;"	m	class:LfCli
input	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def input(self, content=None):$/;"	m	class:Manager
install	plugged\\html5.vim\\Makefile	/^install: init-runtime bundle pure-install record$/;"	t
install	plugged\\phpcomplete.vim\\misc\\ctags-better-php.rb	/^  def install$/;"	f	class:CtagsBetterPhp
install	plugged\\supertab\\Makefile	/^install: supertab.vmb$/;"	t
install-deps	plugged\\html5.vim\\Makefile	/^install-deps:$/;"	t
install_file	plugged\\html5.vim\\Makefile	/^install_file = \\$/;"	m
install_git_source	plugged\\html5.vim\\Makefile	/^install_git_source = \\$/;"	m
install_source	plugged\\html5.vim\\Makefile	/^install_source = \\$/;"	m
instantiate	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:SnippetDefinition
instantiate	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\snipmate.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:SnipMateSnippetDefinition
instantiate	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\ulti_snips.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:UltiSnipsSnippetDefinition
interbase	plugged\\php.vim\\scripts\\syntax.ini	/^interbase = no$/;"	k	section:extensions
intl	plugged\\php.vim\\scripts\\syntax.ini	/^intl = no$/;"	k	section:extensions
isAscii	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def isAscii(str):$/;"	f
isFullPath	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def isFullPath(self):$/;"	m	class:LfCli
isFuzzy	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def isFuzzy(self):$/;"	m	class:LfCli
isPrefix	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def isPrefix(self): #assume that there are no \\%23l, \\%23c, \\%23v, \\%...$/;"	m	class:LfCli
isRefinement	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def isRefinement(self):$/;"	m	class:LfCli
is_buffer_changed_outside	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def is_buffer_changed_outside(self):$/;"	m	class:VimBufferProxy
is_complete_edit	plugged\\ultisnips\\pythonx\\UltiSnips\\_diff.py	/^def is_complete_edit(initial_line, original, wanted, cmds):$/;"	f
is_focused	plugged\\ultisnips\\test\\vim_interface.py	/^    def is_focused(self, title=None):$/;"	m	class:VimInterfaceWindows
is_fuzzyMatch_C	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    is_fuzzyMatch_C = True$/;"	v
is_fuzzyMatch_C	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^is_fuzzyMatch_C = False$/;"	v
is_killed	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_tabstop.py	/^    def is_killed(self):$/;"	m	class:TabStop
is_lower	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint8_t is_lower;$/;"	m	struct:PatternContext	typeref:typename:uint8_t	file:
is_process_running	plugged\\ultisnips\\test\\vim_interface.py	/^def is_process_running(pid):$/;"	f
is_set	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def is_set(self):$/;"	m	class:_SnippetUtilCursor
itemSpace	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	itemSpace         = 5$/;"	c	package:main
items	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	items   ItemCollection$/;"	v	package:main
items	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	items ItemCollection$/;"	m	struct:main.SortItems
j	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> j             j:exec g:Lf_py "bufTagExplManager._previewResult(Fa/;"	m
j	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> j             j:exec g:Lf_py "colorschemeExplManager._previewResu/;"	m
j	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> j             j:exec g:Lf_py "functionExplManager._previewResult(/;"	m
j	plugin\\quickfix.vim	/^nmap <silent> j :lprev<CR>zv$/;"	m
javascript_syntax_detection	plugged\\vim-javascript\\ftdetect\\javascript.vim	/^augroup javascript_syntax_detection$/;"	a
json	plugged\\php.vim\\scripts\\syntax.ini	/^json = yes$/;"	k	section:extensions
jump_backwards	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def jump_backwards(self):$/;"	m	class:SnippetManager
jump_forwards	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def jump_forwards(self):$/;"	m	class:SnippetManager
k	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> k             k:exec g:Lf_py "bufTagExplManager._previewResult(Fa/;"	m
k	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> k             k:exec g:Lf_py "colorschemeExplManager._previewResu/;"	m
k	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> k             k:exec g:Lf_py "functionExplManager._previewResult(/;"	m
k	plugin\\quickfix.vim	/^nmap <silent> k :lnext<CR>zv$/;"	m
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = ' ' + EA + 'Hello' + JF + 'World'$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = '123 abc' + EA + '123' + JF + '456'$/;"	v	class:Anon_Trigger_Multi
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = 'abc ' + EA$/;"	v	class:Anon_NoTrigger_AfterSpace
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = 'abc' + EA + '123' + JF + '456'$/;"	v	class:Anon_NoTrigger_Multi
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = 'abc' + EA + '\\nabc' + EX$/;"	v	class:Anon_Trigger_Twice
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = 'abc' + EA$/;"	v	class:Anon_NoTrigger_Simple
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = 'abc' + EA$/;"	v	class:Anon_Trigger_Simple
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = 'blah blah abc' + EA$/;"	v	class:Anon_Trigger_Opts
keys	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    keys = EA + 'Hello' + JF + 'World'$/;"	v	class:Anon_NoTrigger_BeginningOfLine
keys	plugged\\ultisnips\\test\\test_Autocommands.py	/^    keys = 'test' + EX + 'test' + EX + 'bar' + JF + JF + ' done ' + ESC + \\$/;"	v	class:Autocommands
keys	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    keys = 'a'$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
keys	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    keys = 'a\\na'$/;"	v	class:Autotrigger_CanMatchContext
keys	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    keys = 'abc'$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
keys	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    keys = 'abc'$/;"	v	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
keys	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    keys = 'if' + EX + '=' + ESC + 'o='$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = "te'st" + EX$/;"	v	class:Snippet_With_SingleQuote
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = '\\ttest' + EX$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = '\\ttest' + EX$/;"	v	class:TrimSpacesAtEndOfLines
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'oouu trig b' + 2 * ARR_L + EX$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te ül' + EX + 'hello'$/;"	v	class:Snippet_With_Umlauts_Mirrors
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te ül' + EX + 'hüüll'$/;"	v	class:Snippet_With_Umlauts_Python
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te ül' + EX + 'more text' + JF + JF + 'end'$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te ül' + EX + 'more text'$/;"	v	class:Snippet_With_Umlauts_TypeOn
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te ül' + EX + JF + 'more text' + JF + 'end'$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te ül' + EX + JF + JF + 'end'$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te"st' + EX$/;"	v	class:Snippet_With_DoubleQuote
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te' + LS + '2\\n'$/;"	v	class:Snippet_With_DoubleQuote_List
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te' + LS + '2\\n'$/;"	v	class:Snippet_With_SingleQuote_List
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'te' + LS + '2\\n'$/;"	v	class:Snippet_With_Umlauts_List
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_EndNL
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_EndStartNL
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_JustNL
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_StartNL
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + 'z' + JF + 'y'$/;"	v	class:MultiLineDefault_Type
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + BS + JF + 'Goodbye'$/;"	v	class:LeaveTrailingWhitespace
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + BS + JF + 'Goodbye'$/;"	v	class:RemoveTrailingWhitespace
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + BS + JF + 'y'$/;"	v	class:MultiLineDefault_BS
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'test' + EX + JF + 'y'$/;"	v	class:MultiLineDefault_Jump
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'teüst' + EX$/;"	v	class:Snippet_With_Umlauts
keys	plugged\\ultisnips\\test\\test_Chars.py	/^    keys = 'ööuu trig b' + 2 * ARR_L + EX$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
keys	plugged\\ultisnips\\test\\test_Completion.py	/^    keys = 'superkallifragilistik\\ntest' + EX + 'sup' + COMPL_KW + \\$/;"	v	class:Completion_SimpleExample_ECR
keys	plugged\\ultisnips\\test\\test_Completion.py	/^    keys = COMPLETION_OPTIONS + 'test' + EX + 'com' + COMPL_KW + JF + 'foo'$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
keys	plugged\\ultisnips\\test\\test_Completion.py	/^    keys = COMPLETION_OPTIONS + 'test' + EX + 'foo' + JF + 'com' + COMPL_KW + \\$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = "123" + ESC + "vhh" + EX + "test" + EX + " zzz" + ESC + \\$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = "e" + EX + " " + "e" + EX$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = "e" + EX$/;"	v	class:ContextSnippets_CursorIsZeroBased
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_ExpandOnTrue
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_SimpleSnippet
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_UseContext
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'e' + EX$/;"	v	class:ContextSnippets_ReportError
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'e' + EX$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = 'i' + EX$/;"	v	class:ContextSnippets_PriorityKeyword
keys	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    keys = r"""$/;"	v	class:ContextSnippets_SnippetPriority
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'first line\\n\\n\\n\\n\\n\\nthird line' + \\$/;"	v	class:Undo_RemoveWholeSnippet
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'hello test' + EX + 'upsi' + ESC + 'hh' + 'iabcdef' + ESC + 'u'$/;"	v	class:Undo_RemoveEditInTabstop
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'i' + EX + 'asd' + JF + 'feh' + ESC + 'uuuu'$/;"	v	class:Undo_CompletelyUndoSnippet
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'i' + EX + 'asd' + JF + ESC + 'u'$/;"	v	class:Undo_ChangesInPlaceholder
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'i' + EX + 'i' + EX + ESC + 'u'$/;"	v	class:Undo_RemoveOneSnippetByTime
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'i' + EX + 'i' + EX + ESC + 'uu'$/;"	v	class:Undo_RemoveOneSnippetByTime2
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + 'A' + JF + BS + 'BBB'$/;"	v	class:Backspace_TabStop_NotZero
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + 'A' + JF + BS + 'BBB'$/;"	v	class:Backspace_TabStop_Zero
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + 'a' + JF + 'test' + EX + ESC + 'u' + JF$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + 'a' + JF + BS + JF + 'Int' + JF + 'body'$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + 'aaaaa' + JF + BS + JF + '3333'$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + ESC + 'Vkx' + 'i\\nworld\\n'$/;"	v	class:DeleteSnippetInsertion0
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + ESC + 'ddi' + JB$/;"	v	class:DeleteCurrentTabStop1_JumpBack
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + ESC + 'j2dd'$/;"	v	class:DeleteLastTwoLinesInSnippet
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + ESC + 'u'$/;"	v	class:DeleteSnippetInsertion1
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + ESC + 'u'$/;"	v	class:Undo_RemoveMultilineSnippet
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + JF + ESC + 'ddi' + JB + 'hello'$/;"	v	class:DeleteCurrentTabStop2_JumpBack
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX + JF + ESC + 'ddkji' + JB + 'hello' + JF + 'world'$/;"	v	class:DeleteCurrentTabStop3_JumpAround
keys	plugged\\ultisnips\\test\\test_Editing.py	/^    keys = 'test' + EX+ 'a b c' + JF + 'shallnot'$/;"	v	class:JumpForward_DefSnippet
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'Wie hallo gehts' + ESC + 'bhi' + EX + 'Huiui!'$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'Wie hallo gehts' + ESC + 'bhi' + EX$/;"	v	class:ExpandInTheMiddleOfLine_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'Wie hallo gehts' + ESC + 'bhi' + EX$/;"	v	class:MultilineExpand_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'hallo ' + EX$/;"	v	class:DoNotExpandAfterSpace_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'hallo' + EX + '\\nAnd more'$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'hallo' + EX + '\\nHallo Welt!\\n\\n\\b\\b\\b\\b\\b'$/;"	v	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'hallo' + EX + '\\nhallo' + EX$/;"	v	class:SimpleExpandTwice_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'hallo' + EX + 'and again'$/;"	v	class:SimpleExpandTypeAfterExpand_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'hallo' + EX$/;"	v	class:SimpleExpand_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'na du hallo' + EX + 'and again\\b\\b\\b\\b\\bblub'$/;"	v	class:SimpleExpandTypeAndDelete_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Expand.py	/^    keys = 'test' + EX + EX$/;"	v	class:ExitSnippetModeAfterTabstopZero
keys	plugged\\ultisnips\\test\\test_Fixes.py	/^    keys = '  test' + EX + 'hello' + JF + 'world' + JF + 'blub'$/;"	v	class:Bug1251994
keys	plugged\\ultisnips\\test\\test_Fixes.py	/^    keys = '\\t\\t\\tpd' + EX + '2'$/;"	v	class:VirtualEdit
keys	plugged\\ultisnips\\test\\test_Fixes.py	/^    keys = 'blahfasel' + ESC + 'v' + 4 * ARR_L + \\$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
keys	plugged\\ultisnips\\test\\test_Fixes.py	/^    keys = 'test' + EX + 'foo'$/;"	v	class:ShiftWidthZero
keys	plugged\\ultisnips\\test\\test_Fixes.py	/^    keys = 'test' + EX + ESC + \\$/;"	v	class:NonUnicodeDataInUnnamedRegister
keys	plugged\\ultisnips\\test\\test_Fixes.py	/^    keys = 'yank' + ESC + 'by4lea test' + EX + 'HELLO' + JF + JF + ESC + 'p'$/;"	v	class:RetainsTheUnnamedRegister
keys	plugged\\ultisnips\\test\\test_Folding.py	/^    keys = 'fold' + EX + 'hi' + ESC + 'jdd'$/;"	v	class:Fold_DeleteMiddleLine_ECR
keys	plugged\\ultisnips\\test\\test_Folding.py	/^    keys = 'fold' + EX + 'hi'$/;"	v	class:FoldOverwrite_Simple_ECR
keys	plugged\\ultisnips\\test\\test_Folding.py	/^    keys = 'test' + EX + 'Ball'$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
keys	plugged\\ultisnips\\test\\test_Folding.py	/^    keys = 'test' + EX + JF + 'sub junk {}'$/;"	v	class:PerlSyntaxFold
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = '    test' + EX + 'Hui'$/;"	v	class:ProperIndenting_SimpleCase_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = '    test' + EX + '\\n' + 'blah'$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = '    test' + EX + 'blah'$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = 'inc' + EX + 'cstdl'$/;"	v	class:ProperIndenting_FirstLineInFileComplete_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = 'inc' + EX + 'foo'$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = 'm' + EX + 'm1' + EX + '\\nHallo'$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = 'm' + EX$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = 'test' + EX + 'This is a longer text that should wrap'$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = 'test' + EX + \\$/;"	v	class:FOSimple_Break_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = ('test' + EX + 'This is a longer snippet that should wrap properly '$/;"	v	class:FOTextAfter_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Format.py	/^    keys = ('test' + EX + 'This is a longersnippet that should wrap properly')$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """    test""" + EX$/;"	v	class:PythonCode_IndentEtSwOffset
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """   test""" + EX$/;"	v	class:PythonCode_IndentEtSw
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """   test""" + EX$/;"	v	class:PythonCode_IndentNoetSwTs
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_MultiAppendShift
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_MultiAppendShiftMethods
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_MultiAppendSimpleIndent
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_ResetIndent
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_SimpleMkline
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """test""" + EX + 'ups'$/;"	v	class:PythonCode_LongerTextThanSource_Chars
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """test""" + EX + 'ups'$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_Locals
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_OptExists
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_OptNoExists
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = '    test' + EX$/;"	v	class:PythonCodeOld_IndentedMultiline
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = '    test' + EX$/;"	v	class:PythonCode_MultilineIndented
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = '    test' + EX$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = ' ' * 8 + 'test' + EX  # < 8 works.$/;"	v	class:PythonCode_IndentProblem
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:PythonVisual_SelectOneWord
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:PythonVisual_LineSelect_Simple
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'Hallo Welt'$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'Hallo Welt'$/;"	v	class:PythonCode_ReferencePlaceholderBefore
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'aaa'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'abc'$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'and more'$/;"	v	class:TabStop_Shell_SimpleExample
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'and more'$/;"	v	class:TabStop_Shell_TextInNextLine
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'and more'$/;"	v	class:TabStop_Shell_WithUmlauts
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'blah' + ', bah'$/;"	v	class:PythonCode_CanOverwriteTabstop
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'ho'$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'ho'$/;"	v	class:PythonCode_ReferencePlaceholder
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + 'overwrite' + JF + 'and more'$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + ESC + "otest" + EX + JF + ESC$/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + ESC + "otest" + EX + JF + JF + JF + JF$/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + JF + 'and more'$/;"	v	class:TabStop_Shell_InDefValue_Leave
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + JF + 'and more'$/;"	v	class:TabStop_Shell_ShebangPython
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX + JF + 'okay'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCodeOld_SimpleExample
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_MultiAppend
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_SimpleAppend
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_SimpleExample
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_TransformedBeforeMultiLine
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_UseNewOverOld
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:Python_WeirdScoping_Error
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
keys	plugged\\ultisnips\\test\\test_Interpolation.py	/^    keys = 'ups test' + EX$/;"	v	class:PythonCode_TrickyReferences
keys	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    keys = ' ' + LS + '3\\n'$/;"	v	class:ListAllAvailable_SpaceInFront_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    keys = '' + LS + '3\\n'$/;"	v	class:ListAllAvailable_NothingTyped_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    keys = 'hallo qualle' + LS + 'Hi'$/;"	v	class:ListAllAvailable_NonDefined_NoExpectionShouldBeRaised
keys	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    keys = 'hallo test' + LS + '1\\n'$/;"	v	class:ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    keys = 'hallo test' + LS + '2\\n'$/;"	v	class:ListAllAvailable_testtyped_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    keys = '} ' + LS + '3\\n'$/;"	v	class:ListAllAvailable_BraceInFront_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'for' + EX + '100' + JF + 'avar\\b\\b\\b\\ba_variable' + JF + \\$/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'hallo test' + EX + 'elt'$/;"	v	class:Mirror_TestKillTabstop_Kill
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'a'$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo Du\\nHi\\b\\bAch Blah'$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo du'$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo du\\nwie gehts'$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo test'$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo welt'$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo welt'$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo\\b\\b'$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo\\b\\bhups'$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hallo\\nagain'$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'hi' + JF + 'hu' + JF + 'hub' + JF + 'hulla' + \\$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + 'do snap'$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + 'overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + 'overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + JF + 'end'$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'stdin'$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'stdin'$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'world'$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + 'world'$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX + BS + 'hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Mirror.py	/^    keys = 'ups test blah' + ESC + '02f i' + EX + 'hallo'$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = '<trh' + EX + 'blah' + JF + BS + BS + JF + 'end'$/;"	v	class:CursorMovement_BS_InEditMode
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 1 * ARR_U + '\\n' + JF + \\$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 2 * ARR_D + JF + \\$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 3 * ARR_L + \\$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 4 * ARR_L + \\$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 7 * ARR_L + \\$/;"	v	class:IMMoving_NoExiting_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + JF + 'hallo'$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + \\$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'test' + EX + 'text' + 3 * ARR_U + 6 * ARR_D$/;"	v	class:IMMoving_CursorsKeys_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'test' + EX + 'this is something\\nvery nice\\nnot' + JF + 'more text'$/;"	v	class:CursorMovement_Multiline_ECR
keys	plugged\\ultisnips\\test\\test_Movement.py	/^    keys = 'test' + EX + 'this' + 2 * ARR_L + 'hallo\\nwelt'$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
keys	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    keys = 'test' + EX + ' ' + ESC + ESC + 'ahi'$/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
keys	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    keys = 'test' + EX + '0\\n' + 'hi'$/;"	v	class:Multiple_SimpleCaseSelectZero_EEscape
keys	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    keys = 'test' + EX + '1\\n'$/;"	v	class:Multiple_SimpleCaseSelectFirst_ECR
keys	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    keys = 'test' + EX + '2\\n'$/;"	v	class:Multiple_SimpleCaseSelectSecond_ECR
keys	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    keys = 'test' + EX + '5\\n'$/;"	v	class:Multiple_SimpleCaseSelectTooHigh_ESelectLast
keys	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    keys = 'test' + EX + ESC + 'hi'$/;"	v	class:Multiple_SimpleCaseEscapeOut_ECR
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = '"test snip"' + EX$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'ab' + EX + '\\nac' + EX$/;"	v	class:ParseSnippets_Global_Python
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'ab' + EX$/;"	v	class:ParseSnippets_Global_Local_Python
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'abc def' + EX$/;"	v	class:ParseSnippets_MultiWord_RE1
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'foo' + EX + ' bar' + EX + '\\nbar' + EX$/;"	v	class:ParseSnippets_MultiWord_RE2
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'inv snip' + EX$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'snip test' + EX$/;"	v	class:ParseSnippets_MultiWord_Description
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'snippet test' + EX$/;"	v	class:ParseSnippets_MultiWord_Description_Option
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test snip' + EX$/;"	v	class:ParseSnippets_MultiWord_NoContainer
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test snip' + EX$/;"	v	class:ParseSnippets_MultiWord_Quotes
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test snip' + EX$/;"	v	class:ParseSnippets_MultiWord_Simple
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test test test' + EX$/;"	v	class:ParseSnippets_MultiWord_RE3
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippet
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintPythonStacktrace
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearAll
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine1
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_MissingEndSnippet
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_SimpleSnippet
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_UnknownDirective
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'toclear' + EX + '\\n' + 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearOne
keys	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    keys = 'toclear' + EX + '\\n' + 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearTwo
keys	plugged\\ultisnips\\test\\test_Plugin.py	/^    keys = ('longtextlongtext\\n' +$/;"	v	class:Plugin_SuperTab_SimpleTest
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'form_for user, namespace: some_namespace, html: {i' + EX + 'i' + EX$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + '    hallo m' + EX + 'hi'$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + '    m' + EX + 'hi'$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hello m' + EX + 'hi' + JF + 'two' + JF + 'ups' + JF + 'three' + \\$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hello m' + EX + 'world m' + EX + 'end'$/;"	v	class:RecTabsStops_TypeInZero2_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hello\\nhello again m' + EX + 'hi' + JF + 'two' + \\$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hello\\nm' + EX + 'hi' + JF + 'two' + JF + 'ups' + JF + 'three' + \\$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hi' + JF + 'm' + EX + 'again' + JF + 'm1' + \\$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hi' + JF + 'm' + EX + \\$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'hi' + JF + 'm1' + EX + 'CD' + JF + 'DE'$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'a' + 3 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'a' + 4 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_LeavingInner_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hello' + JF + 'world' + JF + JF + JF + 'end'$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hello' + JF + JF + JF + 'world' + JF + 'end'$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hello' + \\$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hi' + JF + 'hallo' + JF + 'end'$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hi'$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'm' + EX + 'a' + 4 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_LeavingInnerInner_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'm' + EX + 'a' + 6 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + ' m1' + EX + 'hi' + JF + 'two' + JF + 'end'$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'CD' + JF + 'DE'$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'CD' + JF + 'DE'$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'Hallo' + JF + 'Hi' + \\$/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'hi' + JF + 'two' + JF + 'end'$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'one' + JF + 'two' + \\$/;"	v	class:RecTabStops_MirroredZeroTS_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'one' + JF + 'two' + \\$/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + JF + 'm1' + EX + 'hi' + JF + 'end'$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'm' + EX + JF + JF + BS + 'm' + EX$/;"	v	class:RecTabsStops_BackspaceZero_ECR
keys	plugged\\ultisnips\\test\\test_Recursive.py	/^    keys = 'v' + EX + 'frac' + EX + 'a' + JF + 'b' + JF + 'frac' + EX + 'aa' + JF + JF + 'cc' + /;"	v	class:RecTabsStops_TypeInZero_ECR
keys	plugged\\ultisnips\\test\\test_Selection.py	/^    keys = 'for' + EX + 'k' + JF$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
keys	plugged\\ultisnips\\test\\test_Selection.py	/^    keys = 'for' + EX + 'k' + JF$/;"	v	class:OldSelection_RealWorldCase_Test
keys	plugged\\ultisnips\\test\\test_Selection.py	/^    keys = 'test' + EX + 'Hello'$/;"	v	class:_SelectModeMappings
keys	plugged\\ultisnips\\test\\test_Selection.py	/^    keys = 'test' + EX + 'ui' + JF$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
keys	plugged\\ultisnips\\test\\test_Selection.py	/^    keys = 'test' + EX + 'ui' + JF$/;"	v	class:OldSelection_SimpleTabstop_Test
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'v' + EX$/;"	v	class:snipMate_Visual_Simple
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'def' + EX$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'for' + EX + 'blub' + JF + 'j' + JF + 'hi'$/;"	v	class:snipMate_TestMirrors
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'hello' + EX + '2\\n'$/;"	v	class:snipMate_MultiMatches
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'hello' + EX + '\\nhello1' + EX + '\\nhello2' + EX$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'hello' + EX + ESC + ':set ft=blubi\\nohello' + EX$/;"	v	class:snipMate_OtherFiletype
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'hello' + EX$/;"	v	class:snipMate_Disabled
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'hello' + EX$/;"	v	class:snipMate_SimpleSnippet
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'hello' + EX$/;"	v	class:snipMate_SimpleSnippetSubDirectory
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'opt' + EX + 'some' + JF + 'not' + JF + 'ende'$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'opt' + EX + 'some' + JF + JF + 'ende'$/;"	v	class:snipMate_TestMirrorsInPlaceholders
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'test' + EX + 'blub' + JF + 'blah'$/;"	v	class:snipMate_TestNoBraceTabstops
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'test' + EX + 'blub' + JF + 'blah'$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'test' + EX + JF + 'hi'$/;"	v	class:snipMate_NoNestedTabstops
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'test' + EX$/;"	v	class:snipMate_EmptyLinesContinueSnippets
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'test' + EX$/;"	v	class:snipMate_Interpolation
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = 'test' + EX$/;"	v	class:snipMate_InterpolationWithSystem
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = ESC + ':set fo=r\\n' + 'i\/*' + EX + '1\\n2'$/;"	v	class:snipMate_Issue658
keys	plugged\\ultisnips\\test\\test_SnipMate.py	/^    keys = ESC + ':set ft=a\\n' + 'itest1' + EX$/;"	v	class:snipMate_Extends
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = """$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = """$/;"	v	class:SnippetActions_MoveVisual
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "a" + EX + "1" + JF + "b" + EX + " c" + EX + "2" + JF + "3" + JF + "4" + JF + JF$/;"	v	class:SnippetActions_UseCorrectJumpActions
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "i" + EX + "x" + JF + "1" + JF + "2" + JF + ";"$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "i" + EX + "x" + JF + JF + "1" + JF + "2" + JF + ";"$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "i" + EX$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3" + JF + " or 4" + JF + "5"$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3" + JF + "4"$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3"$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2"$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = '[]' + ARR_L + 'a' + EX + '1' + JF + '2'$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = '\\n3' + ARR_U + 'a' + EX + '1' + JF + '2'$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = '\\ni' + EX + 'i' + EX + 'x' + JF + 'y' + JF + JF + 'z'$/;"	v	class:SnippetActions_CanModifyParentBody
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = '\\ni' + EX + 'i' + EX + 'x'$/;"	v	class:SnippetActions_EnsureIndent
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = '\\ni' + EX + 'x' + JF + 'y'$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'a' + EX + '123'$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'a' + EX$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'a' + EX$/;"	v	class:SnippetActions_PostActionModifiesBuffer
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'a' + EX$/;"	v	class:SnippetActions_PreActionModifiesBuffer
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'i' + EX + 'blah' + JF + 'n' + EX + JF + 'pass'$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'i' + EX + 'p' + EX + JF + 'z'$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
keys	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    keys = 'i' + EX$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '   test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '   test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '  test it' + EX + '1\\n'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '  test' + EX + '1\\n'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '  test' + EX$/;"	v	class:No_Tab_Expand_ET_Leading_Spaces
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '  test' + EX$/;"	v	class:No_Tab_Expand_Leading_Spaces
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = ' .' + EX$/;"	v	class:SnippetOptions_Regex_Self_Space
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = ' .a' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextAfter
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '$test' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '-test' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '.' + EX$/;"	v	class:SnippetOptions_Regex_Self_Start
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '[[test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix3
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '\\t\\thi' + EX$/;"	v	class:No_Tab_Expand_RealWorld
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = '\\ttest' + EX$/;"	v	class:No_Tab_Expand_Leading_Tabs
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a(test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix2
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a-test it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a-test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'a.' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextBefore
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'abc test test' + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'abc test test' + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'atest it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'atest it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'atest' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'atest' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NoExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test ' + EX$/;"	v	class:SnippetOptions_Regex_WithSpace
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test cabfed' + EX$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test cabfed' + EX$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test me' + EX$/;"	v	class:MultiWordSnippet_Simple
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test test abc' + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test test test' + EX$/;"	v	class:SnippetOptions_Regex_Multiple
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_ET
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_ET_SW
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_ET_SW_TS
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_No_TS
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_Simple
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NormalExpand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_Regex_Expand
keys	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    keys = 'ßßtest' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test me' + EX$/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX + '1\\n\\n' + 'test' + EX + '2\\n'$/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_OverwriteExisting
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear2
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = 'test1' + EX$/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = (ESC + ':set ft=p\\n' + 'itest' + EX + '\\n' +$/;"	v	class:SnippetPriorities_ClearedByChild
keys	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    keys = ESC + ':set ft=c\\n' + 'itest' + EX$/;"	v	class:SnippetPriorities_ClearedByParent
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'echo' + EX + 'test'$/;"	v	class:TabStop_Exit_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'echo' + EX$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'Nase'$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'Nase'$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'Somelengthy Text' + JF + 'Hi' + JB + \\$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'Somelengthy Text' + JF + 'Hi' + JB + \\$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'Test' + JF + 'Hi' + JF + JF + 'du'$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'haselnut' + 2 * ARR_L + 'hips' + JF + 'end'$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'na' + JF + 'Du Nase'$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'na' + JF + 'Du Nase'$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + 'ship'$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + JF + 'Test' + JF + 'Hi'$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'hallo' + EX + JF + 'Test' + JF + 'Hi'$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'i' + EX + EX + '1' + JF + '2' + JF + ' after' + JF + '3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'i' + EX + EX + '1' + JF + '2' + JF + ' after' + JF + '3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test hallo World' + ESC + '02f i' + EX + 'world' + JF + 'try' + \\$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + ' blah' + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Hello' + JF + 'World' + JF$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Hello' + JF + 'World'$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Hi' + JF + 'Hallo' + JB + 'SomethingElse' + JF + \\$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Nothing'$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'Nothing'$/;"	v	class:TabStop_Multiline_Overwrite
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'WORLD' + JF + 'End'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + '[ -u -v -d ]'$/;"	v	class:TabStop_EscapingChars_RealLife
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'blub' + JF + 'hello'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'hello' + JF + 'world'$/;"	v	class:TabStop_EscapingChars_Backslash4
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:TabStop_EscapingCharsDollars
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + 'ups' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + BS + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + BS + JF + 'Nothing'$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + ESC + '0ihi'$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + ESC + '0ihi'$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + ESC + '0ihi'$/;"	v	class:TabStopEscapingWhenSelected_ECR
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'Blah'$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'Hallo' + JF + 'Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'WORLD' + JF + 'End'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + '\\n' + JF + 't'$/;"	v	class:TabStop_CROnlyOnSelectedNear
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'hello'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'longertext' + JB + 'overwrite' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'longertext' + JB + JF + 'overwrite' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'longertext' + JB + JF + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'no' + JF + 'End' + JB + 'yes' + JB + \\$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'no' + JF + 'End' + JB + 'yes' + JF + 'Begin' \\$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'no' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + 'ups' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + JF + 'Hallo' + JB + JB + 'Blah' + JF + 'Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX + JF + JF + 'Hallo' + JF + 'Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsBackticks
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsDollars1
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingChars_Backslash
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingChars_Backslash2
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingChars_Backslash3
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Multiline_Leave
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
keys	plugged\\ultisnips\\test\\test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'ascii' + EX + 'éèàçôïÉÈÀÇÔÏ€'$/;"	v	class:Transformation_LowerCaseAsciiResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'ascii' + EX + 'éèàçôïÉÈÀÇÔÏ€'$/;"	v	class:Transformation_SimpleCaseAsciiResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'b'$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'some\\b\\b\\b\\b\\b'$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX + 'some\\b\\b\\b\\bmore'$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'hallo test' + EX$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'HALLO'$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'SomE tExt '$/;"	v	class:Transformation_MultipleTransformations_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'TEST'$/;"	v	class:Transformation_OptionIgnoreCase_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'a b  c d e f ghhh h oha'$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'a some more text'$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'a some'$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'a, nice,   building'$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'a, nice, building'$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'aa'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'aa'$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'ab'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'b some'$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'dead parrot'$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'foo boo aoo'$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo foo boy'$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo' + ESC + '$a\\n' + \\$/;"	v	class:Transformation_ConditionalInConditional_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'hi' + JF + BS$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'sometext' + JF + 'overwrite'$/;"	v	class:Transformation_InsideTabOvertype_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'sometext' + JF$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'test, hallo'$/;"	v	class:Transformation_CINewlines_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'test, hallo'$/;"	v	class:Transformation_CITabstop_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + 'test, halul'$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + BS + 'hallo'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + BS + JF + 'hi'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test' + EX + BS$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
keys	plugged\\ultisnips\\test\\test_Transformation.py	/^    keys = 'test\\ntest\\ntest' + ESC + 'V2k' + EX + 'test' + EX$/;"	v	class:Transformation_OptionMultiline_ECR
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = 'abc test' + EX$/;"	v	class:AddFunc_Opt
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = 'abc test' + EX$/;"	v	class:AddFunc_Simple
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = 'testme' + EX + 'hi1' + JF + 'hi2' + JF + 'hi3' + JF + 'hi4'$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = 'testme' + EX + 'hi1' + JF + 'hi2' + JF + 'hi3' + JF + 'hi4'$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = 'testme' + EX + 'hi;' + JF + 'hi2' + \\$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = ($/;"	v	class:VerifyVimDict2
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = ($/;"	v	class:VerifyVimDict3
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = ('blumba' + EX + ESC +$/;"	v	class:AddNewSnippetSource
keys	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    keys = ('test=(type(UltiSnips#SnippetsInCurrentScope()) . len(UltiSnips#SnippetsInCurrentSc/;"	v	class:VerifyVimDict1
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = '    hello\\n    nice\\n\\tworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_CheckIndentTwice
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = '\\tblablub' + ESC + '5hv3l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'bla blub\\n  helloi' + ESC + '0k4lvjll' + EX + 'test' + EX$/;"	v	class:Visual_CrossOneLine
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0lv4l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord_Inword
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v$' + EX + 'test' + EX + ESC + 'o'$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v$' + EX + 'test' + \\$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX + '\\ntest' + EX$/;"	v	class:Visual_ExpandTwice
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX + 'hello'$/;"	v	class:Visual_InDefaultText_SelectOneWord
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX + JF + 'hello'$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:VisualTransformation_SelectOneWord
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:VisualWithDefault_ExpandWithVisual
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord_TwiceVisual
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:VisualTransformation_LineSelect_Simple
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_CheckIndentSimple
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_Simple
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:Visual_LineSelect_WithTabStop
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'if' + EX + 'one\\n\\ttwo\\n\\tthree' + ESC + \\$/;"	v	class:Visual_LineSelect_DedentLine
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'test' + EX + 'abc'$/;"	v	class:Visual_NoVisualSelection_Ignore
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'xxxyyyyxxx' + ESC + '4|vlll' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWordExclusive
keys	plugged\\ultisnips\\test\\test_Visual.py	/^    keys = 'xxxyyyyxxx' + ESC + '4|vlll' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWordInclusive
keys	plugged\\ultisnips\\test\\vim_test_case.py	/^    keys = ''$/;"	v	class:VimTestCase
keyword_spacing	plugged\\vim-snippets\\pythonx\\javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
killProcess	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    def killProcess(self):$/;"	m	class:AsyncExecutor
l	plugin\\quickfix.vim	/^nmap <silent> l :llast<CR>zv$/;"	m
l:line	plugged\\vim-matchup\\test\\forwhile.vim	/^    let l:line = getline('.')[:l:pos-1]$/;"	v
l:pos	plugged\\vim-matchup\\test\\forwhile.vim	/^              let l:pos -= 1$/;"	v
l:pos	plugged\\vim-matchup\\test\\forwhile.vim	/^    let l:pos  = col('.') - 1$/;"	v
l:pos	plugged\\vim-matchup\\test\\tabs.vim	/^				let l:pos -= 1$/;"	v
landmark_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let landmark_role = [$/;"	v
landmark_role	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main'/;"	v
lang_tag	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let lang_tag = [$/;"	v
launch	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def launch(self, text_before, visual_content, parent, start, end):$/;"	m	class:SnippetDefinition
launch	plugged\\ultisnips\\test\\vim_interface.py	/^    def launch(self, config=[]):$/;"	m	class:VimInterface
launch	plugged\\ultisnips\\test\\vim_interface.py	/^    def launch(self, config=[]):$/;"	m	class:VimInterfaceTmuxNeovim
ldap	plugged\\php.vim\\scripts\\syntax.ini	/^ldap = no$/;"	k	section:extensions
leaderf#Any#Maps	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^function! leaderf#Any#Maps(category)$/;"	f
leaderf#Any#parseArguments	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^function! leaderf#Any#parseArguments(argLead, cmdline, cursorPos)$/;"	f
leaderf#Any#start	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^function! leaderf#Any#start(bang, args)$/;"	f
leaderf#BufTag#Maps	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^function! leaderf#BufTag#Maps()$/;"	f
leaderf#BufTag#cleanup	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^function! leaderf#BufTag#cleanup()$/;"	f
leaderf#BufTag#removeCache	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^function! leaderf#BufTag#removeCache(bufNum)$/;"	f
leaderf#BufTag#startExpl	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^function! leaderf#BufTag#startExpl(win_pos, bang, ...)$/;"	f
leaderf#BufTag#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^function! leaderf#BufTag#startExplPattern(win_pos, bang, all, pattern)$/;"	f
leaderf#Buffer#Maps	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^function! leaderf#Buffer#Maps()$/;"	f
leaderf#Buffer#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^function! leaderf#Buffer#startExpl(win_pos, ...)$/;"	f
leaderf#Buffer#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^function! leaderf#Buffer#startExplPattern(win_pos, pattern)$/;"	f
leaderf#Colors#Maps	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^function! leaderf#Colors#Maps()$/;"	f
leaderf#Colors#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^function! leaderf#Colors#startExpl(win_pos, ...)$/;"	f
leaderf#File#Maps	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^function! leaderf#File#Maps()$/;"	f
leaderf#File#cleanup	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^function! leaderf#File#cleanup()$/;"	f
leaderf#File#startExpl	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^function! leaderf#File#startExpl(win_pos, ...)$/;"	f
leaderf#File#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^function! leaderf#File#startExplPattern(win_pos, pattern)$/;"	f
leaderf#Function#Maps	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^function! leaderf#Function#Maps()$/;"	f
leaderf#Function#cleanup	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^function! leaderf#Function#cleanup()$/;"	f
leaderf#Function#removeCache	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^function! leaderf#Function#removeCache(bufNum)$/;"	f
leaderf#Function#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^function! leaderf#Function#startExpl(win_pos, bang, ...)$/;"	f
leaderf#Function#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^function! leaderf#Function#startExplPattern(win_pos, bang, all, pattern)$/;"	f
leaderf#Help#Maps	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^function! leaderf#Help#Maps()$/;"	f
leaderf#Help#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^function! leaderf#Help#startExpl(win_pos, ...)$/;"	f
leaderf#Help#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^function! leaderf#Help#startExplPattern(win_pos, pattern)$/;"	f
leaderf#History#Maps	plugged\\LeaderF\\autoload\\leaderf\\History.vim	/^function! leaderf#History#Maps()$/;"	f
leaderf#History#startExpl	plugged\\LeaderF\\autoload\\leaderf\\History.vim	/^function! leaderf#History#startExpl(win_pos, type)$/;"	f
leaderf#LfPy	plugged\\LeaderF\\autoload\\leaderf.vim	/^function! leaderf#LfPy(cmd)$/;"	f
leaderf#Line#Maps	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^function! leaderf#Line#Maps()$/;"	f
leaderf#Line#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^function! leaderf#Line#startExpl(win_pos, ...)$/;"	f
leaderf#Line#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^function! leaderf#Line#startExplPattern(win_pos, all, pattern)$/;"	f
leaderf#Mru#Maps	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^function! leaderf#Mru#Maps()$/;"	f
leaderf#Mru#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^function! leaderf#Mru#startExpl(win_pos, ...)$/;"	f
leaderf#Mru#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^function! leaderf#Mru#startExplPattern(win_pos, cwd, pattern)$/;"	f
leaderf#Self#Maps	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^function! leaderf#Self#Maps()$/;"	f
leaderf#Self#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^function! leaderf#Self#startExpl(win_pos, ...)$/;"	f
leaderf#Tag#Maps	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^function! leaderf#Tag#Maps()$/;"	f
leaderf#Tag#startExpl	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^function! leaderf#Tag#startExpl(win_pos, ...)$/;"	f
leaderf#Tag#startExplPattern	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^function! leaderf#Tag#startExplPattern(win_pos, pattern)$/;"	f
leaderf#colorscheme#highlight	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^function! leaderf#colorscheme#highlight(category)$/;"	f
leaderf#colorscheme#highlightMode	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^function! leaderf#colorscheme#highlightMode(category, mode)$/;"	f
leaderf#colorscheme#mergePalette	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^function! leaderf#colorscheme#mergePalette(palette)$/;"	f
leaderf#colorscheme#setStatusline	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^function! leaderf#colorscheme#setStatusline(bufnr, stl)$/;"	f
leaderf#versionCheck	plugged\\LeaderF\\autoload\\leaderf.vim	/^function! leaderf#versionCheck()$/;"	f
leave_with_wait	plugged\\ultisnips\\test\\vim_interface.py	/^    def leave_with_wait(self):$/;"	m	class:VimInterface
len	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t len;$/;"	m	struct:HighlightPos	typeref:typename:uint16_t	file:
level1Method	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level1.php	/^	protected function level1Method() {$/;"	f	class:NS1\\SubNS2\\Level1
level2Method_protected	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level2.php	/^	protected function level2Method_protected() {$/;"	f	class:NS2\\SubNS\\Level2
level2Method_public	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level2.php	/^	public function level2Method_public() {$/;"	f	class:NS2\\SubNS\\Level2
level31Method	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level31.php	/^	public function level31Method() {$/;"	f	class:NS31\\SubNS\\Level31
level3Method_protected	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^	protected function level3Method_protected() {$/;"	f	class:NS3\\SubNS\\Level3
level3Method_public	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_inheritance_level3.php	/^	public function level3Method_public() {$/;"	f	class:NS3\\SubNS\\Level3
lexima	plugged\\lexima.vim\\plugin\\lexima.vim	/^augroup lexima$/;"	a
lexima	plugged\\lexima.vim\\plugin\\lexima.vim	/^augroup lexima-init$/;"	a
lexima#add_rule	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! lexima#add_rule(rule)$/;"	f
lexima#charstack#new	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! lexima#charstack#new()$/;"	f
lexima#clear_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! lexima#clear_rules()$/;"	f
lexima#cmdmode#_expand	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! lexima#cmdmode#_expand(char) abort$/;"	f
lexima#cmdmode#_priority_order	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! lexima#cmdmode#_priority_order(rule1, rule2)$/;"	f
lexima#cmdmode#add_rules	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! lexima#cmdmode#add_rules(rule)$/;"	f
lexima#cmdmode#clear_rules	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! lexima#cmdmode#clear_rules()$/;"	f
lexima#cmdmode#define_altanative_key	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! lexima#cmdmode#define_altanative_key(char, mapping)$/;"	f
lexima#cmdmode#get_map_rules	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! lexima#cmdmode#get_map_rules(char) abort$/;"	f
lexima#endwise_rule#make	plugged\\lexima.vim\\autoload\\lexima\\endwise_rule.vim	/^function! lexima#endwise_rule#make()$/;"	f
lexima#expand	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! lexima#expand(char, mode) abort$/;"	f
lexima#init	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! lexima#init()$/;"	f
lexima#insmode#_default_posthook	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#_default_posthook(char) abort$/;"	f
lexima#insmode#_default_prehook	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#_default_prehook(char) abort$/;"	f
lexima#insmode#_expand	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#_expand(char) abort$/;"	f
lexima#insmode#_map_impl	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#_map_impl(char) abort$/;"	f
lexima#insmode#_priority_order	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#_priority_order(rule1, rule2)$/;"	f
lexima#insmode#add_rules	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#add_rules(rule) abort$/;"	f
lexima#insmode#clear_rules	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#clear_rules()$/;"	f
lexima#insmode#clear_stack	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#clear_stack()$/;"	f
lexima#insmode#define_altanative_key	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#define_altanative_key(char, mapping)$/;"	f
lexima#insmode#delete	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#delete(len, fallback)$/;"	f
lexima#insmode#delete_all	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#delete_all(fallback)$/;"	f
lexima#insmode#delete_till	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#delete_till(char, fallback)$/;"	f
lexima#insmode#delete_till_eol	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#delete_till_eol(fallback)$/;"	f
lexima#insmode#escape	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#escape()$/;"	f
lexima#insmode#get_map_rules	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#get_map_rules(char) abort$/;"	f
lexima#insmode#get_rules	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#get_rules()$/;"	f
lexima#insmode#leave	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#leave(len, fallback)$/;"	f
lexima#insmode#leave_all	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#leave_all(fallback)$/;"	f
lexima#insmode#leave_till	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#leave_till(char, fallback)$/;"	f
lexima#insmode#leave_till_eol	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#leave_till_eol(fallback)$/;"	f
lexima#insmode#map_hook	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! lexima#insmode#map_hook(when, char, expr)$/;"	f
lexima#set_default_rules	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! lexima#set_default_rules()$/;"	f
lexima#sortedlist#new	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^function! lexima#sortedlist#new(init_list, PriorityOrderPred)$/;"	f
lexima#string#take_many	plugged\\lexima.vim\\autoload\\lexima\\string.vim	/^function! lexima#string#take_many(str, ...)$/;"	f
lexima#string#to_inputtable	plugged\\lexima.vim\\autoload\\lexima\\string.vim	/^function! lexima#string#to_inputtable(str)$/;"	f
lexima#string#to_mappable	plugged\\lexima.vim\\autoload\\lexima\\string.vim	/^function! lexima#string#to_mappable(str)$/;"	f
lexima#string#to_upper_specialkey	plugged\\lexima.vim\\autoload\\lexima\\string.vim	/^function! lexima#string#to_upper_specialkey(str) abort$/;"	f
lexima#vital	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! lexima#vital()$/;"	f
lexima.vim	plugged\\lexima.vim\\README.md	/^lexima.vim$/;"	c
lfBytes2Str	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def lfBytes2Str(bytes, encoding=None):$/;"	f
lfBytesLen	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def lfBytesLen(str):$/;"	f
lfCmd	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^lfCmd = vim.command$/;"	v
lfDecode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def lfDecode(str):$/;"	f
lfEncode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def lfEncode(str):$/;"	f
lfEval	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^lfEval = vim.eval$/;"	v
lfMru#record	plugged\\LeaderF\\autoload\\lfMru.vim	/^function! lfMru#record(name)$/;"	f
lfMru#recordBuffer	plugged\\LeaderF\\autoload\\lfMru.vim	/^function! lfMru#recordBuffer(bufNum)$/;"	f
lfOpen	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^    def lfOpen(file, mode='r', buffering=-1, encoding=None, errors=None,$/;"	f
lfPrintError	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^def lfPrintError(error):$/;"	f
lfRelpath	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\utils.py	/^def lfRelpath(path, start=os.curdir):$/;"	f
libxml	plugged\\php.vim\\scripts\\syntax.ini	/^libxml = yes$/;"	k	section:extensions
lineExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\lineExpl.py	/^lineExplManager = LineExplManager()$/;"	v
line_index	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^    def line_index(self):$/;"	m	class:LineIterator
line_till_cursor	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def line_till_cursor(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
link	plugged\\html5.vim\\Makefile	/^link: init-runtime$/;"	t
link_file	plugged\\html5.vim\\Makefile	/^link_file = \\$/;"	m
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-to/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linkreltypes = linktypes$/;"	v
linktypes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', /;"	v
list_procedural_style_files	plugged\\phpcomplete.vim\\bin\\generator\\functions.php	/^function list_procedural_style_files($dir) {$/;"	f
list_snippets	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def list_snippets(self):$/;"	m	class:SnippetManager
live_region_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let live_region_attributes = {$/;"	v
loaded_nerd_tree	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_supertab	plugged\\supertab\\plugin\\supertab.vim	/^let loaded_supertab = 1$/;"	v
loaded_tcomment	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^let loaded_tcomment = 400$/;"	v
localvimrc	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  augroup localvimrc$/;"	a
location	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def location(self):$/;"	m	class:SnippetDefinition
lowercasetagclass	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteClassName\\tagclass.php	/^class lowercasetagclass {$/;"	c
main	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^int main(int argc, const char* argv[])$/;"	f	typeref:typename:int
main	plugged\\ale\\test\\dumb_tcp_client.py	/^def main():$/;"	f
main	plugged\\ale\\test\\dumb_tcp_server.py	/^def main():$/;"	f
main	plugged\\phpcomplete.vim\\bin\\generate_builtin_dicts.php	/^function main($argv){$/;"	f
main	plugged\\tcomment_vim\\spec\\tcomment\\issue30_test.c	/^int main()$/;"	f	typeref:typename:int
main	plugged\\tcomment_vim\\spec\\tcomment\\issue30_test_2.c	/^int main()$/;"	f	typeref:typename:int
main	plugged\\tcomment_vim\\spec\\tcomment\\issue30_test_3.c	/^int main()$/;"	f	typeref:typename:int
main	plugged\\ultisnips\\test_all.py	/^    def main():$/;"	f
main	plugged\\vim-ctrlspace\\go\\file_engine.go	/^func main() {$/;"	f	package:main
main	plugged\\vim-ctrlspace\\go\\file_engine.go	/^package main$/;"	p
main_syntax	plugged\\php.vim\\syntax\\php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	plugged\\vim-javascript\\syntax\\javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	plugged\\vim-json\\syntax\\json.vim	/^  let main_syntax = 'json'$/;"	v
maintainer	plugged\\tcomment_vim\\addon-info.json	/^    "maintainer" : "Tom Link <micathom at gmail com>",$/;"	s
maintainer	plugged\\vim-snippets\\addon-info.json	/^  "maintainer" : "honza @ github & others",$/;"	s
makeDateTime	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\completion_in_function_insides.php	/^    public function makeDateTime() {$/;"	f	class:Foo
make_a_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^function make_a_foo(){$/;"	f	namespace:Foo
make_a_renamed_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\function_return_type.php	/^function make_a_renamed_foo(){$/;"	f	namespace:Foo
make_box	plugged\\vim-snippets\\pythonx\\vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
map	plugged\\supertab\\plugin\\supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	plugged\\supertab\\plugin\\supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
map_dict	plugged\\supertab\\plugin\\supertab.vim	/^      let map_dict = maparg('<cr>', 'i', 0, 1)$/;"	v
mapleader	_vimrc	/^let mapleader = ","$/;"	v
maps	plugged\\ultisnips\\test\\test_Selection.py	/^    maps = ('', '')$/;"	v	class:_SelectModeMappings
maps	plugged\\ultisnips\\test\\test_Selection.py	/^    maps = ('H', 'x')$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
maps	plugged\\ultisnips\\test\\test_Selection.py	/^    maps = ('H', 'x')$/;"	v	class:SelectModeMappings_RemoveBeforeSelecting_ECR
maps	plugged\\ultisnips\\test\\test_Selection.py	/^    maps = ('H', 'x'), ('e', 'l')$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
maps	plugged\\ultisnips\\test\\test_Selection.py	/^    maps = ('H', 'x'), ('e', 'l')$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
maps	plugged\\ultisnips\\test\\test_Selection.py	/^    maps = ('e', 'l'), ('H', 'x')$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
matched	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def matched(self):$/;"	m	class:SnippetDefinition
matches	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def matches(self, before, visual_content=None):$/;"	m	class:SnippetDefinition
matchup#delim#end_offset	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#end_offset(delim) " {{{1$/;"	f
matchup#delim#fill_backrefs	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#fill_backrefs(re, groups, warn) " {{{1$/;"	f
matchup#delim#get_current	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#get_current(type, side, ...) " {{{1$/;"	f
matchup#delim#get_matching	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#get_matching(delim, ...) " {{{1$/;"	f
matchup#delim#get_next	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#get_next(type, side, ...) " {{{1$/;"	f
matchup#delim#get_prev	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#get_prev(type, side, ...) " {{{1$/;"	f
matchup#delim#get_surround_nearest	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#get_surround_nearest(open, ...) " {{{1$/;"	f
matchup#delim#get_surrounding	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#get_surrounding(type, ...) " {{{1$/;"	f
matchup#delim#jump_target	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#jump_target(delim) " {{{1$/;"	f
matchup#delim#skip	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#skip(...) " {{{1$/;"	f
matchup#delim#skip0	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#skip0()$/;"	f
matchup#delim#skip_default	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! matchup#delim#skip_default()$/;"	f
matchup#init	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! matchup#init()$/;"	f
matchup#loader#bufwinenter	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! matchup#loader#bufwinenter() abort " {{{1$/;"	f
matchup#loader#capture_group_replacement_order	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! matchup#loader#capture_group_replacement_order(cg) abort " {{{1$/;"	f
matchup#loader#get_capture_groups	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! matchup#loader#get_capture_groups(str, ...) abort " {{{1$/;"	f
matchup#loader#init_buffer	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! matchup#loader#init_buffer() abort " {{{1$/;"	f
matchup#loader#init_module	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! matchup#loader#init_module() abort " {{{1$/;"	f
matchup#loader#remove_capture_groups	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! matchup#loader#remove_capture_groups(re) abort "{{{1$/;"	f
matchup#matchparen#disable	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! matchup#matchparen#disable() " {{{1$/;"	f
matchup#matchparen#enable	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! matchup#matchparen#enable() " {{{1$/;"	f
matchup#matchparen#highlight_surrounding	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! matchup#matchparen#highlight_surrounding(...) " {{{1$/;"	f
matchup#matchparen#init_module	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! matchup#matchparen#init_module() " {{{1$/;"	f
matchup#matchparen#offscreen	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! matchup#matchparen#offscreen(current) " {{{1$/;"	f
matchup#matchparen#toggle	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! matchup#matchparen#toggle(...) " {{{1$/;"	f
matchup#misc#reload	plugged\\vim-matchup\\autoload\\matchup\\misc.vim	/^  function! matchup#misc#reload() abort$/;"	f
matchup#motion#find_matching_pair	plugged\\vim-matchup\\autoload\\matchup\\motion.vim	/^function! matchup#motion#find_matching_pair(visual, down) " {{{1$/;"	f
matchup#motion#find_unmatched	plugged\\vim-matchup\\autoload\\matchup\\motion.vim	/^function! matchup#motion#find_unmatched(visual, down) " {{{1$/;"	f
matchup#motion#insert_mode	plugged\\vim-matchup\\autoload\\matchup\\motion.vim	/^function! matchup#motion#insert_mode() " {{{1$/;"	f
matchup#motion#jump_inside	plugged\\vim-matchup\\autoload\\matchup\\motion.vim	/^function! matchup#motion#jump_inside(visual) " {{{1$/;"	f
matchup#motion#op	plugged\\vim-matchup\\autoload\\matchup\\motion.vim	/^function! matchup#motion#op(motion)$/;"	f
matchup#motion_sid	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! matchup#motion_sid()$/;"	f
matchup#perf#show_times	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^function! matchup#perf#show_times()$/;"	f
matchup#perf#tic	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^function! matchup#perf#tic(context)$/;"	f
matchup#perf#timeout	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^function! matchup#perf#timeout() " {{{1$/;"	f
matchup#perf#timeout_check	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^function! matchup#perf#timeout_check() " {{{1$/;"	f
matchup#perf#timeout_start	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^function! matchup#perf#timeout_start(timeout) " {{{1$/;"	f
matchup#perf#toc	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^function! matchup#perf#toc(context, state)$/;"	f
matchup#pos#equal	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#equal(p1, p2) " {{{1$/;"	f
matchup#pos#get_cursor	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^  function! matchup#pos#get_cursor()$/;"	f
matchup#pos#get_cursor_line	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#get_cursor_line() " {{{1$/;"	f
matchup#pos#larger	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#larger(pos1, pos2) " {{{1$/;"	f
matchup#pos#next	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#next(...) " {{{1$/;"	f
matchup#pos#next_eol	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#next_eol(...) " {{{1$/;"	f
matchup#pos#prev	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#prev(...) " {{{1$/;"	f
matchup#pos#set_cursor	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#set_cursor(...) " {{{1$/;"	f
matchup#pos#smaller	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#smaller(pos1, pos2) " {{{1$/;"	f
matchup#pos#smaller_or_equal	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#smaller_or_equal(pos1, pos2) " {{{1$/;"	f
matchup#pos#val	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! matchup#pos#val(...) " {{{1$/;"	f
matchup#re#gspec_pat	plugged\\vim-matchup\\autoload\\matchup\\re.vim	/^function! matchup#re#gspec_pat(key)$/;"	f
matchup#text_obj#delimited	plugged\\vim-matchup\\autoload\\matchup\\text_obj.vim	/^function! matchup#text_obj#delimited(is_inner, visual, type) " {{{1$/;"	f
matchup#text_obj#double_click	plugged\\vim-matchup\\autoload\\matchup\\text_obj.vim	/^function! matchup#text_obj#double_click() " {{{1$/;"	f
matchup#text_obj#undo	plugged\\vim-matchup\\autoload\\matchup\\text_obj.vim	/^function! matchup#text_obj#undo(seq)$/;"	f
matchup#transmute#disable	plugged\\vim-matchup\\autoload\\matchup\\transmute.vim	/^function! matchup#transmute#disable() " {{{1$/;"	f
matchup#transmute#dochange	plugged\\vim-matchup\\autoload\\matchup\\transmute.vim	/^function! matchup#transmute#dochange(list, pri, cur) " {{{1$/;"	f
matchup#transmute#enable	plugged\\vim-matchup\\autoload\\matchup\\transmute.vim	/^function! matchup#transmute#enable() " {{{1$/;"	f
matchup#transmute#init_module	plugged\\vim-matchup\\autoload\\matchup\\transmute.vim	/^function! matchup#transmute#init_module() " {{{1$/;"	f
matchup#transmute#tick	plugged\\vim-matchup\\autoload\\matchup\\transmute.vim	/^function! matchup#transmute#tick(insertmode, entering_insert) " {{{1$/;"	f
matchup#util#check_match_words	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#check_match_words(sha256) " {{{1$/;"	f
matchup#util#command	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#command(cmd) " {{{1$/;"	f
matchup#util#has_duplicate_str	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#has_duplicate_str(list) " {{{1$/;"	f
matchup#util#in_comment	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#in_comment(...) " {{{1$/;"	f
matchup#util#in_comment_or_string	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#in_comment_or_string(...) " {{{1$/;"	f
matchup#util#in_indent	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#in_indent(...) " {{{1$/;"	f
matchup#util#in_string	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#in_string(...) " {{{1$/;"	f
matchup#util#in_syntax	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#in_syntax(name, ...) " {{{1$/;"	f
matchup#util#in_whitespace	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#in_whitespace(...) " {{{1$/;"	f
matchup#util#matchpref	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#matchpref(id, default) " {{{1$/;"	f
matchup#util#patch_match_words	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#patch_match_words(from, to, ...) abort " {{{1$/;"	f
matchup#util#uniq	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#uniq(list) " {{{1$/;"	f
matchup#util#uniq_unsorted	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^function! matchup#util#uniq_unsorted(list) " {{{1$/;"	f
matchup_filetype	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^  augroup matchup_filetype$/;"	a
matchup_matchparen	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^  augroup matchup_matchparen$/;"	a
maxDiff	plugged\\ultisnips\\test\\vim_test_case.py	/^    maxDiff = None  # Show all diff output, always.$/;"	v	class:VimTestCase
maxDisplayedItems	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	maxDisplayedItems = 500$/;"	c	package:main
maxSearchedItems	plugged\\vim-ctrlspace\\go\\file_engine.go	/^	maxSearchedItems  = 200$/;"	c	package:main
mbstring	plugged\\php.vim\\scripts\\syntax.ini	/^mbstring = yes$/;"	k	section:extensions
mcrypt	plugged\\php.vim\\scripts\\syntax.ini	/^mcrypt = yes$/;"	k	section:extensions
median	plugged\\vim-matchup\\test\\issues\\3\\test.sql	/^CREATE FUNCTION dbo.median (@score int)$/;"	f
menu	plugged\\vim-json\\json-test.json	/^{"menu": {$/;"	o
menuitem	plugged\\vim-json\\json-test.json	/^    "menuitem": [$/;"	a	object:menu.popup
metadata_elements	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
method1	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^    function method1($foo) {$/;"	f	class:FooMethodsClass
method2	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^    public function method2($foo) {$/;"	f	class:FooMethodsClass
method3	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^    public static function method3($foo) {$/;"	f	class:FooMethodsClass
method4	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^    static public function method4($foo) {$/;"	f	class:FooMethodsClass
method5	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^    private function method5($foo) {$/;"	f	class:FooMethodsClass
method6	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_methods.class.php	/^    protected function method6($foo) {$/;"	f	class:FooMethodsClass
mhash	plugged\\php.vim\\scripts\\syntax.ini	/^mhash = yes$/;"	k	section:extensions
microdata_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'i/;"	v
microdata_attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let microdata_attributes_value = {$/;"	v
minimally_commented	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public function minimally_commented() {$/;"	f	class:Foo
mkfilelist	plugged\\html5.vim\\Makefile	/^mkfilelist:$/;"	t
mkline	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def mkline(self, line='', indent=None):$/;"	m	class:SnippetUtil
mkrecordscript	plugged\\html5.vim\\Makefile	/^mkrecordscript:$/;"	t
mode	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def mode(self):$/;"	m	class:VimPosition
mode	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def mode(self):$/;"	m	class:VisualContentPreserver
modifiableController	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^def modifiableController(func):$/;"	f
module	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\setup.py	/^module = Extension("fuzzyMatchC",$/;"	v
move	plugged\\ultisnips\\pythonx\\UltiSnips\\position.py	/^    def move(self, pivot, delta):$/;"	m	class:Position
mru	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^mru = Mru()$/;"	v
mruExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^mruExplManager = MruExplManager()$/;"	v
mssql	plugged\\php.vim\\scripts\\syntax.ini	/^mssql = no$/;"	k	section:extensions
myconf	_vimrc	/^augroup myconf$/;"	a
myconf#ctrlspace#Buffer	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#Buffer(n)$/;"	f
myconf#ctrlspace#BufferList	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#BufferList(tabnr)$/;"	f
myconf#ctrlspace#Close	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#Close(mode)$/;"	f
myconf#ctrlspace#CompareByPath	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#CompareByPath(a, b)$/;"	f
myconf#ctrlspace#Go	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#Go(where)$/;"	f
myconf#ctrlspace#Quit	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#Quit()$/;"	f
myconf#ctrlspace#ReloadAll	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#ReloadAll()$/;"	f
myconf#ctrlspace#Write	autoload\\myconf\\ctrlspace.vim	/^function! myconf#ctrlspace#Write()$/;"	f
myconf#func#HowLong	autoload\\myconf\\func.vim	/^function! myconf#func#HowLong(command, numberOfTimes)$/;"	f
myconf#func#HowLongRange	autoload\\myconf\\func.vim	/^function! myconf#func#HowLongRange(command, numberOfTimes) range$/;"	f
myconf#func#HowLongVar	autoload\\myconf\\func.vim	/^function! myconf#func#HowLongVar(command, numberOfTimes)$/;"	f
myconf#func#HowLongVarRange	autoload\\myconf\\func.vim	/^function! myconf#func#HowLongVarRange(command, numberOfTimes) range$/;"	f
myconf#func#JumpToLastPosition	autoload\\myconf\\func.vim	/^function! myconf#func#JumpToLastPosition()$/;"	f
myconf#func#Markers	autoload\\myconf\\func.vim	/^function! myconf#func#Markers(pattern)$/;"	f
myconf#func#Markers2	autoload\\myconf\\func.vim	/^function! myconf#func#Markers2(function, foldlevel)$/;"	f
myconf#func#StartProfiling	autoload\\myconf\\func.vim	/^function! myconf#func#StartProfiling()$/;"	f
myconf#func#ToggleClipboard	autoload\\myconf\\func.vim	/^function! myconf#func#ToggleClipboard()$/;"	f
myconf#func#ToggleMatchParen	autoload\\myconf\\func.vim	/^function! myconf#func#ToggleMatchParen()$/;"	f
myconf#quickfix#GetBufferList	autoload\\myconf\\quickfix.vim	/^function! myconf#quickfix#GetBufferList()$/;"	f
myconf#quickfix#ToggleList	autoload\\myconf\\quickfix.vim	/^function! myconf#quickfix#ToggleList(bufname, pfx)$/;"	f
myconf#statusline#AsyncRun	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#AsyncRun() abort$/;"	f
myconf#statusline#AsyncRunClear	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#AsyncRunClear(timer) abort$/;"	f
myconf#statusline#Buffers	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Buffers()$/;"	f
myconf#statusline#BuffersInit	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#BuffersInit()$/;"	f
myconf#statusline#FileFormat	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#FileFormat()$/;"	f
myconf#statusline#Gitbranch	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Gitbranch() abort$/;"	f
myconf#statusline#Hgbranch	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Hgbranch() abort$/;"	f
myconf#statusline#HowLong	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#HowLong() abort$/;"	f
myconf#statusline#Init	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Init()$/;"	f
myconf#statusline#LinterStatus	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#LinterStatus() abort$/;"	f
myconf#statusline#Mode	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Mode()$/;"	f
myconf#statusline#Paste	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Paste()$/;"	f
myconf#statusline#Rsync	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#Rsync() abort$/;"	f
myconf#statusline#getDefaultLine	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#getDefaultLine()$/;"	f
myconf#statusline#getStatusLine	autoload\\myconf\\statusline.vim	/^function! myconf#statusline#getStatusLine()$/;"	f
myconf#tags#Find	autoload\\myconf\\tags.vim	/^function! myconf#tags#Find()$/;"	f
myconf_ctrlspace	plugin\\ctrlspace.vim	/^augroup myconf_ctrlspace$/;"	a
myconf_statusline	plugin\\statusline.vim	/^augroup myconf_statusline$/;"	a
myconf_tags	plugin\\tags.vim	/^augroup myconf_tags$/;"	a
mysli	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\typehinted_functions.php	/^	$mysli = $foo;$/;"	v
mysql	plugged\\php.vim\\scripts\\syntax.ini	/^mysql = yes$/;"	k	section:extensions
mysqli	plugged\\php.vim\\scripts\\syntax.ini	/^mysqli = yes$/;"	k	section:extensions
naked_public_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    function naked_public_method(){$/;"	f	class:UserClass
name	plugged\\tcomment_vim\\addon-info.json	/^    "name" : "tcomment",$/;"	s
name	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^        name = bundle.lower()$/;"	v
name	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^        name = sys.argv[2]$/;"	v
name	plugged\\vim-json\\json-test.json	/^        "name": "main_window",$/;"	s	object:widget.window
name	plugged\\vim-json\\json-test.json	/^        "name": "sun1",$/;"	s	object:widget.image
name	plugged\\vim-json\\json-test.json	/^        "name": "text1",$/;"	s	object:widget.text
name	plugged\\vim-snippets\\addon-info.json	/^  "name" : "snipmate-snippets",$/;"	s
name_temp	plugged\\ultisnips\\test\\vim_interface.py	/^    def name_temp(self, file_path):$/;"	m	class:TempFileManager
natures	plugged\\supertab\\ftplugin\\html.vim	/^        let natures = eclim#project#util#GetProjectNatureAliases(project)$/;"	v
neocomplete#sources#ultisnips#define	plugged\\ultisnips\\autoload\\neocomplete\\sources\\ultisnips.vim	/^function! neocomplete#sources#ultisnips#define()$/;"	f
nerdtree#checkForBrowse	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
nerdtree#compareNodes	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#completeBookmarks	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#deprecated	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#echo	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#exec	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#exec(cmd)$/;"	f
nerdtree#has_opt	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#renderView	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
nerdtree#runningCygwin	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#runningCygwin()$/;"	f
nerdtree#runningWindows	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#ui_glue#bookmarkNode	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
nerdtree#ui_glue#chRootCwd	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
nerdtree#ui_glue#createDefaultBindings	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
nerdtree#ui_glue#invokeKeyMap	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
nerdtree#ui_glue#openBookmark	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
nerdtree#ui_glue#revealBookmark	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
nerdtree#ui_glue#setupCommands	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
nerdtree#ui_glue#upDir	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState)$/;"	f
nerdtree#version	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! nerdtree#version()$/;"	f
new_scratch_buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def new_scratch_buffer(text):$/;"	f
next	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    next = __next__  # for python2$/;"	v	class:_TextIterator
next	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^    next = __next__  # for python2$/;"	v	class:LineIterator
no_ns_make_a_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\non_namespaced_function.php	/^function no_ns_make_a_foo() {$/;"	f
no_unidecode_available	plugged\\ultisnips\\test\\util.py	/^def no_unidecode_available():$/;"	f
nocomment	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public $nocomment;$/;"	v	class:Foo
nocomment2	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public static $nocomment2;$/;"	v	class:Foo
nomatchparen	plugged\\vim-matchup\\test\\issues\\7\\augroup.vim	/^augroup nomatchparen$/;"	a
normalize	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def normalize(self, name):$/;"	m	class:Mru
not_commented	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public function not_commented() {$/;"	f	class:Foo
ntabs_to_proper_indent	plugged\\ultisnips\\pythonx\\UltiSnips\\indent_util.py	/^    def ntabs_to_proper_indent(self, ntabs):$/;"	m	class:IndentUtil
number	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^    def number(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
number	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_tabstop.py	/^    def number(self):$/;"	m	class:TabStop
o	autoload\\plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py b:Lf_AnyExplManager."accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "bufTagExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "bufExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "colorschemeExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "fileExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "functionExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "helpExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "lineExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "mruExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "selfExplManager.accept()"<CR>$/;"	m
o	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> o             :exec g:Lf_py "tagExplManager.accept()"<CR>$/;"	m
o	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> o <NOP>$/;"	m
obj	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    obj = (0, 3)$/;"	v	class:MovePosition_DelSameLine1
obj	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    obj = (0, 3)$/;"	v	class:MovePosition_InsSameLine1
obj	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    obj = (0, 9)$/;"	v	class:MovePosition_DelSameLine
obj	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    obj = (0, 9)$/;"	v	class:MovePosition_InsSameLine2
obj	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    obj = (1, 0)$/;"	v	class:MovePosition_DelSecondLine
obj	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    obj = (1, 3)$/;"	v	class:MovePosition_DelSecondLine1
object1	plugged\\vim-json\\json-test.json	/^  "object1": "missingComma"$/;"	s
object1	plugged\\vim-json\\json-test.json	/^  "object1": []$/;"	a
object1	plugged\\vim-json\\json-test.json	/^  "object1": true$/;"	b
object1	plugged\\vim-json\\json-test.json	/^  { "object1": 1 }$/;"	n
oci8	plugged\\php.vim\\scripts\\syntax.ini	/^oci8 = no$/;"	k	section:extensions
oci8_11g	plugged\\php.vim\\scripts\\syntax.ini	/^oci8_11g = no$/;"	k	section:extensions
odbc	plugged\\php.vim\\scripts\\syntax.ini	/^odbc = no$/;"	k	section:extensions
offset	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t offset;$/;"	m	struct:TextContext	typeref:typename:uint16_t	file:
onMouseUp	plugged\\vim-json\\json-test.json	/^        "onMouseUp": "sun1.opacity = (sun1.opacity \/ 100) * 90;"$/;"	s	object:widget.text
onclick	plugged\\vim-json\\json-test.json	/^      {"value": "Close", "onclick": "CloseDoc()"}$/;"	s	object:menu.popup.menuitem.2
onclick	plugged\\vim-json\\json-test.json	/^      {"value": "New", "onclick": "CreateNewDoc()"},$/;"	s	object:menu.popup.menuitem.0
onclick	plugged\\vim-json\\json-test.json	/^      {"value": "Open", "onclick": "OpenDoc()"},$/;"	s	object:menu.popup.menuitem.1
onliner	plugged\\phpcomplete.vim\\tests\\fixtures\\DocBlock\\foo.class.php	/^    public $onliner;$/;"	v	class:Foo
open_ascii_file	plugged\\ultisnips\\pythonx\\UltiSnips\\compatibility.py	/^    def open_ascii_file(filename, mode):$/;"	f
openssl	plugged\\php.vim\\scripts\\syntax.ini	/^openssl = yes$/;"	k	section:extensions
opt	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def opt(self, option, default=None):  # pylint:disable=no-self-use$/;"	m	class:SnippetUtil
option_set_to	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def option_set_to(name, new_value):$/;"	f
options	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^        $options = array($/;"	v
out	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^    out = executor.execute("ctags -f- -R")$/;"	v
output	plugged\\ultisnips\\test\\vim_test_case.py	/^    output = ''$/;"	v	class:VimTestCase
overview	plugged\\supertab\\README.rst	/^.. _overview:$/;"	T
overwrite	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def overwrite(self, buf, gtext):$/;"	m	class:TextObject
overwrite_with_initial_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def overwrite_with_initial_text(self, buf):$/;"	m	class:TextObject
p	_vimrc	/^xnoremap p "_d:set paste<CR>p:set nopaste<CR>$/;"	m
p	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> p             :exec g:Lf_py "bufTagExplManager._previewResult(Tru/;"	m
p	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> p             :exec g:Lf_py "colorschemeExplManager._previewResul/;"	m
p	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> p             :exec g:Lf_py "functionExplManager._previewResult(T/;"	m
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = P::getPage();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = Page::getPage();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = Page::getPage2();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = Page::getRenamedPage();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = Page::getRenamedPage2();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = RenamedFoo\\Page::getPage();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced.php	/^$p = \\Foo\\Page::getPage();$/;"	v	namespace:Foo
p	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_namespaced_imported.php	/^$p = Page::getPage();$/;"	v
p	plugged\\phpcomplete.vim\\tests\\vimrc	/^let p = fnamemodify(expand('%:p:h'), ':h')$/;"	v
p	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def p(self):$/;"	m	class:SnippetUtil
package	plugged\\vim-localvimrc\\Makefile	/^package:$/;"	t
para	plugged\\vim-json\\json-test.json	/^                        "para": "A meta-markup language, used to create markup languages such as/;"	s	object:GlossDiv.GlossList.GlossEntry.GlossDef
parse_and_instantiate	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\snipmate.py	/^def parse_and_instantiate(parent_to, text, indent):$/;"	f
parse_and_instantiate	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\ulti_snips.py	/^def parse_and_instantiate(parent_to, text, indent):$/;"	f
parse_args	plugged\\ultisnips\\test_all.py	/^    def parse_args():$/;"	f
parse_content	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^def parse_content(c):$/;"	f
paste#paste_cmd	_vimrc	/^let paste#paste_cmd = {'n': "\\"=@+.'xy'<CR>gPFx\\"_2x"}$/;"	v
paste#paste_cmd	_vimrc	/^let paste#paste_cmd['i'] = 'x<Esc>' . paste#paste_cmd['n'] . '"_s'$/;"	v
paste#paste_cmd	_vimrc	/^let paste#paste_cmd['v'] = '"-c<Esc>gix<Esc>' . paste#paste_cmd['n'] . '"_x'$/;"	v
path_score	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.py	/^    def path_score(line):$/;"	f	function:CtrlPPyMatch	file:
pathogen#cycle_filetype	autoload\\pathogen.vim	/^function! pathogen#cycle_filetype() abort$/;"	f
pathogen#execute	autoload\\pathogen.vim	/^function! pathogen#execute(...) abort$/;"	f
pathogen#expand	autoload\\pathogen.vim	/^function! pathogen#expand(pattern, ...) abort$/;"	f
pathogen#fnameescape	autoload\\pathogen.vim	/^function! pathogen#fnameescape(string) abort$/;"	f
pathogen#glob	autoload\\pathogen.vim	/^function! pathogen#glob(pattern) abort$/;"	f
pathogen#glob_directories	autoload\\pathogen.vim	/^function! pathogen#glob_directories(pattern) abort$/;"	f
pathogen#helptags	autoload\\pathogen.vim	/^function! pathogen#helptags() abort$/;"	f
pathogen#incubate	autoload\\pathogen.vim	/^function! pathogen#incubate(...) abort$/;"	f
pathogen#infect	autoload\\pathogen.vim	/^function! pathogen#infect(...) abort$/;"	f
pathogen#interpose	autoload\\pathogen.vim	/^function! pathogen#interpose(name) abort$/;"	f
pathogen#is_absolute	autoload\\pathogen.vim	/^function! pathogen#is_absolute(path) abort$/;"	f
pathogen#is_disabled	autoload\\pathogen.vim	/^function! pathogen#is_disabled(path) abort$/;"	f
pathogen#join	autoload\\pathogen.vim	/^function! pathogen#join(...) abort$/;"	f
pathogen#legacyjoin	autoload\\pathogen.vim	/^function! pathogen#legacyjoin(...) abort$/;"	f
pathogen#runtime_append_all_bundles	autoload\\pathogen.vim	/^function! pathogen#runtime_append_all_bundles(...) abort$/;"	f
pathogen#runtime_findfile	autoload\\pathogen.vim	/^function! pathogen#runtime_findfile(file,count) abort$/;"	f
pathogen#runtime_prepend_subdirectories	autoload\\pathogen.vim	/^function! pathogen#runtime_prepend_subdirectories(path) abort$/;"	f
pathogen#separator	autoload\\pathogen.vim	/^function! pathogen#separator() abort$/;"	f
pathogen#slash	autoload\\pathogen.vim	/^function! pathogen#slash() abort$/;"	f
pathogen#split	autoload\\pathogen.vim	/^function! pathogen#split(path) abort$/;"	f
pathogen#surround	autoload\\pathogen.vim	/^function! pathogen#surround(path) abort$/;"	f
pathogen#uniq	autoload\\pathogen.vim	/^function! pathogen#uniq(list) abort$/;"	f
pattern	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    char* pattern;$/;"	m	struct:PatternContext	typeref:typename:char *	file:
pattern	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def pattern(self):$/;"	m	class:LfCli
pattern_len	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t pattern_len;$/;"	m	struct:PatternContext	typeref:typename:uint16_t	file:
pattern_mask	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    int64_t pattern_mask[256];$/;"	m	struct:PatternContext	typeref:typename:int64_t[256]	file:
pcntl	plugged\\php.vim\\scripts\\syntax.ini	/^pcntl = no$/;"	k	section:extensions
pcre	plugged\\php.vim\\scripts\\syntax.ini	/^pcre = yes$/;"	k	section:extensions
pdo	plugged\\php.vim\\scripts\\syntax.ini	/^pdo = yes$/;"	k	section:extensions
peek	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def peek(self, count=1):$/;"	m	class:_TextIterator
peek	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^    def peek(self):$/;"	m	class:LineIterator
pgsql	plugged\\php.vim\\scripts\\syntax.ini	/^pgsql = yes$/;"	k	section:extensions
phar	plugged\\php.vim\\scripts\\syntax.ini	/^phar = yes$/;"	k	section:extensions
php.vim	plugged\\php.vim\\README.md	/^php.vim$/;"	c
php_folding	plugged\\php.vim\\syntax\\php.vim	/^  let php_folding = 0$/;"	v
php_html_in_heredoc	plugged\\php.vim\\syntax\\php.vim	/^    let php_html_in_heredoc=1$/;"	v
php_html_in_heredoc	plugged\\php.vim\\syntax\\php.vim	/^  let php_html_in_heredoc=0$/;"	v
php_html_in_nowdoc	plugged\\php.vim\\syntax\\php.vim	/^    let php_html_in_nowdoc=1$/;"	v
php_html_in_nowdoc	plugged\\php.vim\\syntax\\php.vim	/^  let php_html_in_nowdoc=0$/;"	v
php_html_in_strings	plugged\\php.vim\\syntax\\php.vim	/^  let php_html_in_strings=0$/;"	v
php_html_load	plugged\\php.vim\\syntax\\php.vim	/^  let php_html_load=1$/;"	v
php_phpdoc_folding	plugged\\php.vim\\syntax\\php.vim	/^  let php_phpdoc_folding = 0$/;"	v
php_sql_heredoc	plugged\\php.vim\\syntax\\php.vim	/^  let php_sql_heredoc=1$/;"	v
php_sql_nowdoc	plugged\\php.vim\\syntax\\php.vim	/^  let php_sql_nowdoc=1$/;"	v
php_sync_method	plugged\\php.vim\\syntax\\php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	plugged\\php.vim\\syntax\\php.vim	/^    let php_sync_method=php_minlines$/;"	v
phpcomplete#ClearCachedClassContents	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#ClearCachedClassContents(full_file_path) " {{{$/;"	f
phpcomplete#CompareCompletionRow	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompareCompletionRow(i1, i2) " {{{$/;"	f
phpcomplete#CompleteBuiltInClass	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteBuiltInClass(context, classname, base) " {{{$/;"	f
phpcomplete#CompleteClassName	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteClassName(base, kinds, current_namespace, imports) " {{{$/;"	f
phpcomplete#CompleteGeneral	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteGeneral(base, current_namespace, imports) " {{{$/;"	f
phpcomplete#CompletePHP	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompletePHP(findstart, base) " {{{$/;"	f
phpcomplete#CompleteUnknownClass	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteUnknownClass(base, context) " {{{$/;"	f
phpcomplete#CompleteUse	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteUse(base) " {{{$/;"	f
phpcomplete#CompleteUserClass	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteUserClass(context, base, sccontent, visibility) " {{{$/;"	f
phpcomplete#CompleteVariable	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#CompleteVariable(base) " {{{$/;"	f
phpcomplete#EvaluateModifiers	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#EvaluateModifiers(modifiers, required_modifiers, prohibited_modifiers) " {/;"	f
phpcomplete#ExpandClassName	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#ExpandClassName(classname, current_namespace, imports) " {{{$/;"	f
phpcomplete#FormatDocBlock	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#FormatDocBlock(info) " {{{$/;"	f
phpcomplete#GenerateBuiltinClassStub	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GenerateBuiltinClassStub(type, class_info) " {{{$/;"	f
phpcomplete#GetCachedClassContents	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetCachedClassContents(classlocation, class_name) " {{{$/;"	f
phpcomplete#GetCallChainReturnType	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetCallChainReturnType(classname_candidate, class_candidate_namespace, imp/;"	f
phpcomplete#GetClassContents	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetClassContents(classlocation, class_name) " {{{$/;"	f
phpcomplete#GetClassContentsStructure	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetClassContentsStructure(file_path, file_lines, class_name) " {{{$/;"	f
phpcomplete#GetClassLocation	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetClassLocation(classname, namespace) " {{{$/;"	f
phpcomplete#GetClassName	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetClassName(start_line, context, current_namespace, imports) " {{{$/;"	f
phpcomplete#GetCurrentFunctionBoundaries	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetCurrentFunctionBoundaries() " {{{$/;"	f
phpcomplete#GetCurrentInstruction	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetCurrentInstruction(line_number, col_number, phpbegin) " {{{$/;"	f
phpcomplete#GetCurrentNameSpace	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetCurrentNameSpace(file_lines) " {{{$/;"	f
phpcomplete#GetCurrentSymbolWithContext	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetCurrentSymbolWithContext() " {{{$/;"	f
phpcomplete#GetDocBlock	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetDocBlock(sccontent, search) " {{{$/;"	f
phpcomplete#GetFunctionLocation	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetFunctionLocation(function_name, namespace) " {{{$/;"	f
phpcomplete#GetFunctionReturnTypeHint	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetFunctionReturnTypeHint(sccontent, search)$/;"	f
phpcomplete#GetMethodStack	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetMethodStack(line) " {{{$/;"	f
phpcomplete#GetTaglist	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetTaglist(pattern) " {{{$/;"	f
phpcomplete#GetTypeFromDocBlockParam	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#GetTypeFromDocBlockParam(docblock_type) " {{{$/;"	f
phpcomplete#JumpToDefinition	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#JumpToDefinition(mode) " {{{$/;"	f
phpcomplete#LoadData	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#LoadData() " {{{$/;"	f
phpcomplete#LocateSymbol	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#LocateSymbol(symbol, symbol_context, symbol_namespace, current_imports) " /;"	f
phpcomplete#ParseDocBlock	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! phpcomplete#ParseDocBlock(docblock) " {{{$/;"	f
phrasing_elements	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'co/;"	v
placeholder	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def placeholder(self):$/;"	m	class:VisualContentPreserver
plug#	autoload\\plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload\\plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload\\plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload\\plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload\\plug.vim	/^function! plug#load(...)$/;"	f
plugin	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^  augroup plugin-editorconfig-local$/;"	a
plugin	plugged\\vim-editorconfig\\plugin\\editorconfig.vim	/^augroup plugin-editorconfig$/;"	a
plugin/*.vim	plugged\\vim-matchup\\.projections.json	/^  "plugin\/*.vim": {"type": "plugin"},$/;"	o
plugin_cache_dir	plugged\\ultisnips\\test\\vim_test_case.py	/^def plugin_cache_dir():$/;"	f
plugin_cache_dir	plugged\\ultisnips\\test_all.py	/^def plugin_cache_dir():$/;"	f
plugins	plugged\\ultisnips\\test\\test_Plugin.py	/^    plugins = ['ervandew\/supertab']$/;"	v	class:Plugin_SuperTab_SimpleTest
plugins	plugged\\ultisnips\\test\\vim_test_case.py	/^    plugins = []$/;"	v	class:VimTestCase
popup	plugged\\vim-json\\json-test.json	/^  "popup": {$/;"	o	object:menu
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def pos(self):$/;"	m	class:_TextIterator
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 5), (0, 5)$/;"	v	class:TestGuessing_DeleteOneChar
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_InsertOneChar
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_Noop0
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 7), (0, 6)$/;"	v	class:TestGuessing_BackspaceOneChar
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 7), (0, 8)$/;"	v	class:TestGuessing_InsertOneChar1
pos	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def pos(self):$/;"	m	class:VimState
positions	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    HighlightPos positions[64];$/;"	m	struct:HighlightGroup	typeref:typename:HighlightPos[64]	file:
posix	plugged\\php.vim\\scripts\\syntax.ini	/^posix = no$/;"	k	section:extensions
ppos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 5), (0, 5)$/;"	v	class:TestGuessing_DeleteOneChar
ppos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_InsertOneChar
ppos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_Noop0
ppos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 7), (0, 6)$/;"	v	class:TestGuessing_BackspaceOneChar
ppos	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    ppos, pos = (0, 7), (0, 8)$/;"	v	class:TestGuessing_InsertOneChar1
ppos	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def ppos(self):$/;"	m	class:VimState
preserve	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def preserve(self):$/;"	m	class:_SnippetUtilCursor
printDebug	autoload\\sftpsync\\python\\sftpsync.py	/^	def printDebug(self, message):$/;"	m	class:SftpSync
printError	autoload\\sftpsync\\python\\sftpsync.py	/^	def printError(self, error):$/;"	m	class:SftpSync
print_stack	plugged\\ultisnips\\pythonx\\UltiSnips\\debug.py	/^def print_stack():$/;"	f
priority	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def priority(self):$/;"	m	class:SnippetDefinition
privateSomeThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	private $privateSomeThing;$/;"	v	class:FooNS\\SomethingNS\\Something
privateThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	private $privateThing;$/;"	v	class:BarNS\\Things\\Thing
private_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    private function private_method($foo) {$/;"	f	class:UserClass
private_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    private $private_property;$/;"	v	class:UserClass
private_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    private static function private_static_method($foo) {$/;"	f	class:UserClass
private_static_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    private static $private_static_property;$/;"	v	class:UserClass
processors	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^        $processors = array_filter(array_map('trim', preg_split('{[;, ]+}', $groups['processors'/;"	v
project	plugged\\supertab\\ftplugin\\html.vim	/^      let project = eclim#project#util#GetCurrentProjectName()$/;"	v
prop	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassContents\\foo.trait.php	/^	public $prop = 'baz';$/;"	v	trait:FooTrait
property1	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_properties.class.php	/^    var $property1 = 'foo';$/;"	v	class:FooPropertiesClass
property2	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_properties.class.php	/^    public $property2 = 'bar';$/;"	v	class:FooPropertiesClass
protectedSomeThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	protected $protectedSomeThing;$/;"	v	class:FooNS\\SomethingNS\\Something
protectedThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	protected $protectedThing;$/;"	v	class:BarNS\\Things\\Thing
protected_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    protected function protected_method($foo) {$/;"	f	class:UserClass
protected_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    protected $protected_property;$/;"	v	class:UserClass
protected_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    protected static function protected_static_method($foo) {$/;"	f	class:UserClass
protected_static_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    protected static $protected_static_property;$/;"	v	class:UserClass
pspell	plugged\\php.vim\\scripts\\syntax.ini	/^pspell = no$/;"	k	section:extensions
publicSomeThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	public $publicSomeThing;$/;"	v	class:FooNS\\SomethingNS\\Something
publicThing	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_method_chains.php	/^	public $publicThing;$/;"	v	class:BarNS\\Things\\Thing
public_final_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public final function public_final_method($foo, $anotherfoo = '')$/;"	f	class:UserClass
public_final_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public final static function public_final_static_method( $foo, $anotherfoo = array() )$/;"	f	class:UserClass
public_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public function public_method($foo) {$/;"	f	class:UserClass
public_method_with_amp	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public function &public_method_with_amp($foo)$/;"	f	class:UserClass
public_property1	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    var $public_property1;$/;"	v	class:UserClass
public_property2	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public $public_property2;$/;"	v	class:UserClass
public_static_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public static function public_static_method($foo) {$/;"	f	class:UserClass
public_static_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    public static $public_static_property;$/;"	v	class:UserClass
pure-install	plugged\\html5.vim\\Makefile	/^pure-install:$/;"	t
purgeCache	autoload\\sftpsync\\python\\sftpsync.py	/^	def purgeCache(self):$/;"	m	class:SftpSync
pymatcher#PyMatch	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.vim	/^function! pymatcher#PyMatch(items, str, limit, mmode, ispath, crfile, regex)$/;"	f
pymatcher#ShouldHideCurrentFile	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.vim	/^function! pymatcher#ShouldHideCurrentFile(ispath, crfile)$/;"	f
pytest	plugged\\ale\\test\\command_callback\\python_paths\\namespace_package_pytest\\pytest.ini	/^[pytest]$/;"	s
python3	plugged\\ultisnips\\test\\test_Plugin.py	/^def python3():$/;"	f
q	autoload\\plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	autoload\\plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py b:Lf_AnyExplManager."quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "bufTagExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "bufExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Colors.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "colorschemeExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "fileExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "functionExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "helpExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\History.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "historyExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "lineExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "mruExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Self.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "selfExplManager.quit()"<CR>$/;"	m
q	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> q             :exec g:Lf_py "tagExplManager.quit()"<CR>$/;"	m
q	plugged\\ale\\ftplugin\\ale-fix-suggest.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged\\ale\\ftplugin\\ale-preview.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^	noremap <silent><buffer> q :call ctrlspace#help#CloseExternalWindow()<CR>$/;"	m
quit	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def quit(self):$/;"	m	class:Manager
quxFunction	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\typehinted_functions.php	/^    public static function quxFunction(FooClass10 $baz)$/;"	f	class:BazClass
rdfa_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': /;"	v
rdfa_attributes_value	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let rdfa_attributes_value = {$/;"	v
read	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\asyncExecutor.py	/^        def read(outQueue, errQueue, encoding, cleanup):$/;"	f	member:AsyncExecutor.execute	file:
read_text_file	plugged\\ultisnips\\test\\vim_interface.py	/^def read_text_file(filename):$/;"	f
readline	plugged\\php.vim\\scripts\\syntax.ini	/^readline = no$/;"	k	section:extensions
recode	plugged\\php.vim\\scripts\\syntax.ini	/^recode = no$/;"	k	section:extensions
record	plugged\\html5.vim\\Makefile	/^record: mkfilelist mkrecordscript$/;"	t
record_file	plugged\\html5.vim\\Makefile	/^record_file = \\$/;"	m
referrerpolicy	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'str/;"	v
reflect	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^        $reflect = new ReflectionExtension($extensionName);$/;"	v
reflection	plugged\\php.vim\\scripts\\syntax.ini	/^reflection = yes$/;"	k	section:extensions
refresh	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def refresh(self, normal_mode=True):$/;"	m	class:Manager
refresh	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def refresh(self):$/;"	m	class:SnippetSource
refresh	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\file\\_base.py	/^    def refresh(self):$/;"	m	class:SnippetFileSource
register_snippet_source	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def register_snippet_source(self, name, snippet_source):$/;"	m	class:SnippetManager
relationship_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let relationship_attributes = {$/;"	v
release	plugged\\html5.vim\\Makefile	/^release:$/;"	t
relrev	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'inde/;"	v
remember_buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def remember_buffer(self, to):$/;"	m	class:VimState
remember_position	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def remember_position(self):$/;"	m	class:VimState
remember_unnamed_register	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def remember_unnamed_register(self, text_to_expect):$/;"	m	class:VimState
remembered_buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def remembered_buffer(self):$/;"	m	class:VimState
removeCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def removeCache(self, buf_number):$/;"	m	class:BufTagExplManager
removeCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufTagExpl.py	/^    def removeCache(self, buf_number):$/;"	m	class:BufTagExplorer
removeCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def removeCache(self, buf_number):$/;"	m	class:FunctionExplManager
removeCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\functionExpl.py	/^    def removeCache(self, buf_number):$/;"	m	class:FunctionExplorer
replace	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_transformation.py	/^    def replace(self, match):$/;"	m	class:_CleverReplace
replace_initial_text	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def replace_initial_text(self, buf):$/;"	m	class:SnippetInstance
replace_vars	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^def replace_vars(m):$/;"	f
replay_user_edits	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def replay_user_edits(self, cmds, ctab=None):$/;"	m	class:SnippetInstance
repository	plugged\\tcomment_vim\\addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tcomment_vim.git"},$/;"	o
repository	plugged\\vim-snippets\\addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	o
repro	plugged\\ultisnips\\Makefile	/^repro:$/;"	t
reset	plugged\\ultisnips\\pythonx\\UltiSnips\\indent_util.py	/^    def reset(self):$/;"	m	class:IndentUtil
reset	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def reset(self):$/;"	m	class:VisualContentPreserver
reset_indent	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def reset_indent(self):$/;"	m	class:SnippetUtil
resolve_ambiguity	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_base.py	/^def resolve_ambiguity(all_tokens, seen_ts):$/;"	f
restore_unnamed_register	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def restore_unnamed_register(self):$/;"	m	class:VimState
results	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops.php	/^$results = $someModel->getResult(1);$/;"	v
results	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops_extra_whitespace.php	/^$results = $someModel->getResult($/;"	v
returnBar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^	public function returnBar($a, $b = 'foo') : Bar {$/;"	f	class:FooReturnBars
returnBar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^	public function returnBar2($a, $b = 'foo') : Bar2$/;"	f	class:FooReturnBars
returnBar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetFunctionReturnTypeHint\\functions.php	/^	public function returnBar2($a, $b = 'foo') : Bar2$/;"	f
returnBaz2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo2.php	/^	public function returnBaz2() {$/;"	f	class:NS2\\Foo2
returnFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\return_typehinted_functions.php	/^function returnFoo() : FooReturnBars {$/;"	f
returnFoo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetFunctionReturnTypeHint\\functions.php	/^function returnFoo() : Foo {$/;"	f
returnFoo2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\namespaced_foo2.php	/^	public function returnFoo2() {$/;"	f	class:NS2\\Baz2
return_	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^	public function return_() {$/;"	f	class:SimilarNames
return_bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    public function return_bar() {$/;"	f	class:Foo
return_bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_new_oneline_chain.php	/^    public function return_bar() {$/;"	f	class:Foo
return_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    public function return_foo() {$/;"	f	class:Bar
return_foo	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\foo_new_oneline_chain.php	/^    public function return_foo() {$/;"	f	class:Bar
return_foo_ref	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo_references.php	/^function &return_foo_ref(){$/;"	f
return_foo_ref_method	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentSymbolWithContext\\foo_references.php	/^	public function &return_foo_ref_method() {$/;"	f	class:Foo3
return_self	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^	public function return_self() {$/;"	f	class:SimilarNames
return_self	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type.php	/^	public function return_self() {$/;"	f	class:Baz2
return_self_array	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^	public function return_self_array() {$/;"	f	class:Baz3
return_static	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type.php	/^	public function return_static() {$/;"	f	class:Baz2
return_static_array	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^	public function return_static_array() {$/;"	f	class:Baz3
return_this	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type.php	/^	public function return_this() {$/;"	f	class:Baz2
return_this_array	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^	public function return_this_array() {$/;"	f	class:Baz3
rmrecord	plugged\\html5.vim\\Makefile	/^rmrecord:$/;"	t
role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role = extend(role, graphic_role)$/;"	v
role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
role	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes = {}$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-le/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-mult/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbo/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['ra/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin'/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation'/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'ari/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-sel/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline'/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required'/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
runTest	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    def runTest(self):$/;"	m	class:_Base
runTest	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    def runTest(self):$/;"	m	class:_BaseGuessing
runTest	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    def runTest(self):$/;"	m	class:_MPBase
runTest	plugged\\ultisnips\\test\\vim_test_case.py	/^    def runTest(self):$/;"	m	class:VimTestCase
running_on_windows	plugged\\ultisnips\\test\\util.py	/^def running_on_windows():$/;"	f
rv	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def rv(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
rv	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def rv(self, value):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
rv	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^        rv = fetch_snippets_from_dir(bundle)$/;"	v
s	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> s             :exec g:Lf_py "fileExplManager.addSelections()"<CR>$/;"	m
s	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> s             :exec g:Lf_py "mruExplManager.addSelections()"<CR>$/;"	m
s:AcceptSelection	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:AcceptSelection(action)$/;"	f
s:AddBlockTag	plugged\\html5.vim\\indent\\html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
s:AddHintsForTypeScriptParsingErrors	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^function! s:AddHintsForTypeScriptParsingErrors(output) abort$/;"	f
s:AddITags	plugged\\html5.vim\\indent\\html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
s:AddProblemsFromOtherBuffers	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:AddProblemsFromOtherBuffers(buffer, linters) abort$/;"	f
s:AddSubCallbacks	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:AddSubCallbacks(full_list, callbacks) abort$/;"	f
s:Alien2	plugged\\html5.vim\\indent\\html.vim	/^func! s:Alien2()$/;"	f
s:Alien3	plugged\\html5.vim\\indent\\html.vim	/^func! s:Alien3()$/;"	f
s:Alien4	plugged\\html5.vim\\indent\\html.vim	/^func! s:Alien4()$/;"	f
s:Alien5	plugged\\html5.vim\\indent\\html.vim	/^func! s:Alien5()$/;"	f
s:Alien6	plugged\\html5.vim\\indent\\html.vim	/^func! s:Alien6()$/;"	f
s:AlternatePair	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:AlternatePair()$/;"	f
s:ApplyPartialTimer	plugged\\ale\\autoload\\ale\\util.vim	/^function! s:ApplyPartialTimer(timer_id) abort$/;"	f
s:AsEmpty	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:AsEmpty()$/;"	f
s:AsyncRun_Job_AutoCmd	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_AutoCmd(mode, auto)$/;"	f
s:AsyncRun_Job_AutoScroll	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_AutoScroll()$/;"	f
s:AsyncRun_Job_CheckScroll	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_CheckScroll()$/;"	f
s:AsyncRun_Job_Cursor	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_Cursor()$/;"	f
s:AsyncRun_Job_NeoVim	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_NeoVim(job_id, data, event)$/;"	f
s:AsyncRun_Job_OnCallback	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_OnCallback(channel, text)$/;"	f
s:AsyncRun_Job_OnClose	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_OnClose(channel)$/;"	f
s:AsyncRun_Job_OnExit	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_OnExit(job, message)$/;"	f
s:AsyncRun_Job_OnFinish	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_OnFinish()$/;"	f
s:AsyncRun_Job_Start	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_Start(cmd)$/;"	f
s:AsyncRun_Job_Status	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_Status()$/;"	f
s:AsyncRun_Job_Stop	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_Stop(how)$/;"	f
s:AsyncRun_Job_Update	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AsyncRun_Job_Update(count)$/;"	f
s:AutoCmd	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:AutoCmd(name)$/;"	f
s:AutoUpdate	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
s:B	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:B = s:V.import('Vim.Buffer')$/;"	v
s:B	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^let s:B = lexima#vital().B$/;"	v
s:Balanced	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
s:Bookmark	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.GetNodeForName	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	plugged\\nerdtree\\lib\\nerdtree\\bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:BufWinId	plugged\\ale\\autoload\\ale\\list.vim	/^function! s:BufWinId(buffer) abort$/;"	f
s:BuildClassPathOption	plugged\\ale\\ale_linters\\java\\javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildClassPathOption	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildPrompt	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
s:BuildSignMap	plugged\\ale\\autoload\\ale\\sign.vim	/^function! s:BuildSignMap(buffer, current_sign_list, grouped_items) abort$/;"	f
s:BuildText	plugged\\ale\\ale_linters\\ruby\\reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
s:COMPLETION_TRIGGER_CHARACTER	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^let s:COMPLETION_TRIGGER_CHARACTER = 2$/;"	v
s:COMPLETION_TRIGGER_INVOKED	plugged\\ale\\autoload\\ale\\lsp\\message.vim	/^let s:COMPLETION_TRIGGER_INVOKED = 1$/;"	v
s:CSSIndent	plugged\\html5.vim\\indent\\html.vim	/^func! s:CSSIndent()$/;"	f
s:CaptureKeyMap	plugged\\supertab\\plugin\\supertab.vim	/^function! s:CaptureKeyMap(key) " {{{$/;"	f
s:CaptureKeyPresses	plugged\\supertab\\plugin\\supertab.vim	/^function! s:CaptureKeyPresses() " {{{$/;"	f
s:ChangeFoldLevel	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
s:CheckBlockTag	plugged\\html5.vim\\indent\\html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
s:CheckCustomTag	plugged\\html5.vim\\indent\\html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
s:CheckExCtagsVersion	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
s:CheckFTCtags	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
s:CheckForBadConfig	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^function! s:CheckForBadConfig(buffer, lines) abort$/;"	f
s:CheckForExCtags	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
s:CheckMouseClick	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
s:CheckTag	plugged\\html5.vim\\indent\\html.vim	/^func! s:CheckTag(itag)$/;"	f
s:CleanUp	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^fun! s:CleanUp(options, mode, ...)$/;"	f
s:CleanupEveryBuffer	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! s:CleanupEveryBuffer() abort$/;"	f
s:Close	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:Close()$/;"	f
s:CloseCustomFuncs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:CloseCustomFuncs()$/;"	f
s:CloseFold	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CloseFold() abort$/;"	f
s:ClosePreview	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ClosePreview() " {{{$/;"	f
s:CloseWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
s:CloseWindowIfNeeded	plugged\\ale\\autoload\\ale\\list.vim	/^function! s:CloseWindowIfNeeded(buffer) abort$/;"	f
s:Closure	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:Closure()$/;"	f
s:CmpPatterns	plugged\\ale\\autoload\\ale\\pattern_options.vim	/^function! s:CmpPatterns(left_item, right_item) abort$/;"	f
s:CommandLineCompletion	plugged\\supertab\\plugin\\supertab.vim	/^function! s:CommandLineCompletion() " {{{$/;"	f
s:CommentBlock	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:CommentBlock(beg, end, cbeg, cend, comment_mode, comment_do, checkRx, cdef) abort$/;"	f
s:Complete_breakadd	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:Complete_breakadd(A, L, P) abort$/;"	f
s:Complete_breakdel	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:Complete_breakdel(A, L, P) abort$/;"	f
s:CompletionMode	plugged\\supertab\\plugin\\supertab.vim	/^function! s:CompletionMode() " {{{$/;"	f
s:CompletionReset	plugged\\supertab\\plugin\\supertab.vim	/^function! s:CompletionReset(char) " {{{$/;"	f
s:CompletionStillValid	plugged\\ale\\autoload\\ale\\completion.vim	/^function! s:CompletionStillValid(request_id) abort$/;"	f
s:ConstructFromCommentsOption	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^function! s:ConstructFromCommentsOption(comment_mode) abort$/;"	f
s:ContextCompletion	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ContextCompletion() " {{{$/;"	f
s:ContextDiscover	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ContextDiscover() " {{{$/;"	f
s:ContextText	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ContextText() " {{{$/;"	f
s:Continues	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:Continues()$/;"	f
s:CorrectFocusOnStartup	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
s:CountITags	plugged\\html5.vim\\indent\\html.vim	/^func! s:CountITags(text)$/;"	f
s:CountTagsAndState	plugged\\html5.vim\\indent\\html.vim	/^func! s:CountTagsAndState(text)$/;"	f
s:CreateAutocommands	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
s:CreateCountDict	plugged\\ale\\autoload\\ale\\statusline.vim	/^function! s:CreateCountDict() abort$/;"	f
s:CreateNewFile	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
s:CreateTSServerMessageData	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:CreateTSServerMessageData(message) abort$/;"	f
s:CreateTemporaryFileForJob	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:CreateTemporaryFileForJob(buffer, temporary_file) abort$/;"	f
s:CreateTemporaryFileForJob	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:CreateTemporaryFileForJob(buffer, temporary_file, input) abort$/;"	f
s:Creator	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	plugged\\nerdtree\\lib\\nerdtree\\creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:CssFirstUnfinished	plugged\\html5.vim\\indent\\html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
s:CssPrevNonComment	plugged\\html5.vim\\indent\\html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
s:CssUnfinished	plugged\\html5.vim\\indent\\html.vim	/^func! s:CssUnfinished(text)$/;"	f
s:CtagsErrMsg	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
s:CurTypeName	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:CurTypeName()$/;"	f
s:CurrentLineWhitespaceOff	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:CurrentLineWhitespaceOff( level )$/;"	f
s:CurrentLineWhitespaceOn	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:CurrentLineWhitespaceOn()$/;"	f
s:Declare	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:Declare(var, def)$/;"	f
s:DefaultValue	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^function! s:DefaultValue(option) abort$/;"	f
s:DetectFileType	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:DetectFileType(type, ft)$/;"	f
s:DetectFiletype	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
s:DisableFontStyles	colors\\fixedzenburn.vim	/^function! s:DisableFontStyles()$/;"	f
s:DisablePostamble	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! s:DisablePostamble() abort$/;"	f
s:DisableStripWhitespaceOnSave	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:DisableStripWhitespaceOnSave()$/;"	f
s:DisableWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:DisableWhitespace()$/;"	f
s:DoReplacements	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:DoReplacements(text, tokens, replacements) abort "{{{3$/;"	f
s:DoWhile	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:DoWhile()$/;"	f
s:Echo	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:Echo(message) abort$/;"	f
s:Echo	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:Echo(message)$/;"	f
s:EchoCommand	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoCommand(item) abort$/;"	f
s:EchoCommandHistory	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoCommandHistory() abort$/;"	f
s:EchoExecutable	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoExecutable(item) abort$/;"	f
s:EchoGlobalVariables	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:EchoLSPErrorMessages	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoLSPErrorMessages(all_linter_names) abort$/;"	f
s:EchoLinterAliases	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoLinterAliases(all_linters) abort$/;"	f
s:EchoLinterVariables	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:EchoLinterVariables(variable_list) abort$/;"	f
s:EnableLongestEnhancement	plugged\\supertab\\plugin\\supertab.vim	/^function! s:EnableLongestEnhancement() " {{{$/;"	f
s:EnableNoCompleteAfterReset	plugged\\supertab\\plugin\\supertab.vim	/^function! s:EnableNoCompleteAfterReset() " {{{$/;"	f
s:EnablePreamble	plugged\\ale\\autoload\\ale\\toggle.vim	/^function! s:EnablePreamble() abort$/;"	f
s:EnableStripWhiteSpace	_vimrc	/^	function! s:EnableStripWhiteSpace()$/;"	f
s:EnableStripWhitespaceOnSave	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:EnableStripWhitespaceOnSave()$/;"	f
s:EnableWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:EnableWhitespace()$/;"	f
s:EndOfBlock	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^fun! s:EndOfBlock(start)$/;"	f
s:ErrorMsg	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:ErrorMsg(msg)$/;"	f
s:EscapeCtagsCmd	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
s:Event	plugged\\nerdtree\\lib\\nerdtree\\event.vim	/^let s:Event = {}$/;"	v
s:Event.New	plugged\\nerdtree\\lib\\nerdtree\\event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExecuteCtags	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
s:ExecuteCtagsOnFile	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
s:ExitIfSingleCandidate	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ExitIfSingleCandidate()$/;"	f
s:ExpandMap	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ExpandMap(map) " {{{$/;"	f
s:ExprCol	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:ExprCol()$/;"	f
s:ExtraErrorMsg	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! s:ExtraErrorMsg(current, new) abort$/;"	f
s:ExtractCommentsPart	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^function! s:ExtractCommentsPart() abort$/;"	f
s:ExtractOpt	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:ExtractOpt(command) $/;"	f
s:FindConfig	plugged\\ale\\ale_linters\\pug\\puglint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
s:FindConnection	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:FindConnection(key, value) abort$/;"	f
s:FindDUBConfig	plugged\\ale\\ale_linters\\d\\dmd.vim	/^function! s:FindDUBConfig(buffer) abort$/;"	f
s:FindHistoryItem	plugged\\ale\\autoload\\ale\\history.vim	/^function! s:FindHistoryItem(buffer, job_id) abort$/;"	f
s:FindItemAtCursor	plugged\\ale\\autoload\\ale\\cursor.vim	/^function! s:FindItemAtCursor() abort$/;"	f
s:FindProjectWithInitRequestID	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:FindProjectWithInitRequestID(conn, init_request_id) abort$/;"	f
s:FindReferences	plugged\\ale\\autoload\\ale\\references.vim	/^function! s:FindReferences(linter) abort$/;"	f
s:FindSpan	plugged\\ale\\autoload\\ale\\handlers\\rust.vim	/^function! s:FindSpan(buffer, span) abort$/;"	f
s:FindTag	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:FindTag()$/;"	f
s:Findcomplete	autoload\\pathogen.vim	/^function! s:Findcomplete(A,L,P)$/;"	f
s:FixHtmlItalics	_vimrc	/^	function! s:FixHtmlItalics()$/;"	f
s:FixList	plugged\\ale\\autoload\\ale\\list.vim	/^function! s:FixList(buffer, list) abort$/;"	f
s:FlagSet	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	plugged\\nerdtree\\lib\\nerdtree\\flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:ForceUpdate	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
s:FormatEntry	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! s:FormatEntry(key, entry) abort$/;"	f
s:FreshState	plugged\\html5.vim\\indent\\html.vim	/^func! s:FreshState(lnum)$/;"	f
s:GatherOutput	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:GatherOutput(job_id, line) abort$/;"	f
s:GatherOutput	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:GatherOutput(job_id, line) abort$/;"	f
s:GetALEProjectDir	plugged\\ale\\ale_linters\\vim\\ale_custom_linting_rules.vim	/^function! s:GetALEProjectDir(buffer) abort$/;"	f
s:GetAliasedFiletype	plugged\\ale\\autoload\\ale\\linter.vim	/^function! s:GetAliasedFiletype(original_filetype) abort$/;"	f
s:GetBuildDirectory	plugged\\ale\\ale_linters\\c\\clangtidy.vim	/^function! s:GetBuildDirectory(buffer) abort$/;"	f
s:GetBuildDirectory	plugged\\ale\\ale_linters\\cpp\\clangtidy.vim	/^function! s:GetBuildDirectory(buffer) abort$/;"	f
s:GetCachedExtensionMap	plugged\\ale\\autoload\\ale\\filetypes.vim	/^function! s:GetCachedExtensionMap() abort$/;"	f
s:GetCallbacks	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:GetCallbacks(buffer, fixers) abort$/;"	f
s:GetCommentGeometry	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:GetCommentGeometry(cdef, beg, end, checkRx, comment_mode, cbeg, cend) abort$/;"	f
s:GetCounts	plugged\\ale\\autoload\\ale\\statusline.vim	/^function! s:GetCounts(buffer) abort$/;"	f
s:GetDetails	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! s:GetDetails(error) abort$/;"	f
s:GetDir	plugged\\ale\\ale_linters\\python\\mypy.vim	/^function! s:GetDir(buffer) abort$/;"	f
s:GetDir	plugged\\ale\\ale_linters\\python\\vulture.vim	/^function! s:GetDir(buffer) abort$/;"	f
s:GetExecutable	plugged\\ale\\autoload\\ale\\handlers\\sml.vim	/^function! s:GetExecutable(buffer, source) abort$/;"	f
s:GetFileWinnr	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
s:GetFiletypeValue	plugged\\ale\\autoload\\ale\\completion.vim	/^function! s:GetFiletypeValue(map, filetype) abort$/;"	f
s:GetJSONLines	plugged\\ale\\ale_linters\\javascript\\flow.vim	/^function! s:GetJSONLines(lines) abort$/;"	f
s:GetLSPCompletions	plugged\\ale\\autoload\\ale\\completion.vim	/^function! s:GetLSPCompletions(linter) abort$/;"	f
s:GetLinter	plugged\\ale\\autoload\\ale\\assert.vim	/^function! s:GetLinter() abort$/;"	f
s:GetLinterNames	plugged\\ale\\autoload\\ale\\linter.vim	/^function! s:GetLinterNames(original_filetype) abort$/;"	f
s:GetLinterVariables	plugged\\ale\\autoload\\ale\\debugging.vim	/^function! s:GetLinterVariables(filetype, linter_names) abort$/;"	f
s:GetListFromCompileCommandsFile	plugged\\ale\\autoload\\ale\\c.vim	/^function! s:GetListFromCompileCommandsFile(compile_commands_file) abort$/;"	f
s:GetNearbyTag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GetNearbyTag(all, forcecurrent, ...) abort$/;"	f
s:GetPair	plugged\\vim-javascript\\indent\\javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
s:GetScriptType	plugged\\html5.vim\\indent\\html.vim	/^func! s:GetScriptType(str)$/;"	f
s:GetSupportedFiletypes	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
s:GetTagInfo	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
s:GetTempOption	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:GetTempOption(name, default) abort "{{{3$/;"	f
s:GetVars	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:GetVars()$/;"	f
s:GetWorkingDirectory	plugged\\ale\\ale_linters\\cs\\mcsc.vim	/^function! s:GetWorkingDirectory(buffer) abort$/;"	f
s:GlobPath	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:GlobPath(dirs, depth)$/;"	f
s:GoToLSPDefinition	plugged\\ale\\autoload\\ale\\definition.vim	/^function! s:GoToLSPDefinition(linter, options) abort$/;"	f
s:GotoFileWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
s:GotoNextFold	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
s:GotoNextToplevelTag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
s:GotoPrevFold	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
s:GotoTrailingWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:GotoTrailingWhitespace(search_backwards, from, to)$/;"	f
s:GroupLoclistItems	plugged\\ale\\autoload\\ale\\sign.vim	/^function! s:GroupLoclistItems(buffer, loclist) abort$/;"	f
s:HandleBufDelete	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
s:HandleBufWrite	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
s:HandleChannelMessage	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:HandleChannelMessage(channel_id, message) abort$/;"	f
s:HandleCommandMessage	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:HandleCommandMessage(job_id, message) abort$/;"	f
s:HandleExit	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:HandleExit(job_id, exit_code) abort$/;"	f
s:HandleExit	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:HandleExit(job_id, exit_code) abort$/;"	f
s:HandleInitializeResponse	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:HandleInitializeResponse(conn, response) abort$/;"	f
s:HandleLSPDiagnostics	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! s:HandleLSPDiagnostics(conn_id, response) abort$/;"	f
s:HandleLSPErrorMessage	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! s:HandleLSPErrorMessage(linter_name, response) abort$/;"	f
s:HandleOnlyWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
s:HandleSyntaxError	plugged\\ale\\autoload\\ale\\handlers\\ruby.vim	/^function! s:HandleSyntaxError(buffer, lines) abort$/;"	f
s:HandleTSServerDiagnostics	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! s:HandleTSServerDiagnostics(response, error_type) abort$/;"	f
s:HandleUnixFormat	plugged\\ale\\autoload\\ale\\handlers\\unix.vim	/^function! s:HandleUnixFormat(buffer, lines, type) abort$/;"	f
s:Handler	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:Handler(xml_tag, isHtml)$/;"	f
s:HasOpenFileWindows	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
s:HaveAtt	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:HaveAtt()$/;"	f
s:Help	_vimrc	/^function! s:Help(topic)$/;"	f
s:HighlightEOLWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:HighlightEOLWhitespace(type)$/;"	f
s:HighlightEOLWhitespaceExceptCurrentLine	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:HighlightEOLWhitespaceExceptCurrentLine(type)$/;"	f
s:HighlightTag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
s:INTERNAL_ERROR	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:INTERNAL_ERROR = -32603$/;"	v
s:INVALID_PARAMS	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:INVALID_PARAMS = -32602$/;"	v
s:INVALID_REQUEST	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:INVALID_REQUEST = -32600$/;"	v
s:InAllWindows	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:InAllWindows(command)$/;"	f
s:InNumber	plugged\\vim-matchup\\test\\issues\\34\\endvar.vim	/^function! s:InNumber() abort$/;"	f
s:Init	plugged\\supertab\\plugin\\supertab.vim	/^function! s:Init() " {{{$/;"	f
s:Init	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:Init(silent) abort$/;"	f
s:InitBuf	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:InitBuf()$/;"	f
s:InitBuffer	plugged\\supertab\\plugin\\supertab.vim	/^function! s:InitBuffer() " {{{$/;"	f
s:InitCommandMap	plugged\\LeaderF\\autoload\\leaderf.vim	/^function! s:InitCommandMap(var, dict)$/;"	f
s:InitCustomFuncs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:InitCustomFuncs()$/;"	f
s:InitDict	plugged\\LeaderF\\autoload\\leaderf.vim	/^function! s:InitDict(var, dict)$/;"	f
s:InitLexima	_vimrc	/^	function! s:InitLexima()$/;"	f
s:InitTypes	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:InitTypes() abort$/;"	f
s:InitVar	plugged\\LeaderF\\autoload\\leaderf.vim	/^function! s:InitVar(var, value)$/;"	f
s:InitVar	plugged\\LeaderF\\plugin\\leaderf.vim	/^function! s:InitVar(var, value)$/;"	f
s:InitVar	plugin\\sftpsync.vim	/^function! s:InitVar(var, value)$/;"	f
s:InitVariable	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:InitVariable(var, value)$/;"	f
s:InitWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
s:Initial	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:Initial()$/;"	f
s:InlineReplacement	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:InlineReplacement(text, rx, tokens, replacements) abort "{{{3$/;"	f
s:InsideTag	plugged\\html5.vim\\indent\\html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
s:InvokeChain	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:InvokeChain(buffer, executable, linter, chain_index, input) abort$/;"	f
s:IsBlock	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:IsBlock()$/;"	f
s:IsBoolean	plugged\\ale\\autoload\\ale\\linter.vim	/^function! s:IsBoolean(value) abort$/;"	f
s:IsBuiltin	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:IsBuiltin()$/;"	f
s:IsCallback	plugged\\ale\\autoload\\ale\\linter.vim	/^function! s:IsCallback(value) abort$/;"	f
s:IsContOne	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:IsContOne(cont)$/;"	f
s:IsGenericFixer	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! s:IsGenericFixer(suggested_filetypes) abort$/;"	f
s:IsHeaderFile	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^function! s:IsHeaderFile(filename) abort$/;"	f
s:IsInString	plugged\\vim-json\\indent\\json.vim	/^function s:IsInString(lnum, col)$/;"	f
s:IsNoCompleteAfterReset	plugged\\supertab\\plugin\\supertab.vim	/^function! s:IsNoCompleteAfterReset() " {{{$/;"	f
s:IsPreviewOpen	plugged\\supertab\\plugin\\supertab.vim	/^function! s:IsPreviewOpen() " {{{$/;"	f
s:IsSbt	plugged\\ale\\ale_linters\\scala\\fsc.vim	/^function! s:IsSbt(buffer) abort$/;"	f
s:IsSbt	plugged\\ale\\ale_linters\\scala\\scalac.vim	/^function! s:IsSbt(buffer) abort$/;"	f
s:IsSwitch	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:IsSwitch()$/;"	f
s:IsValidFile	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
s:JumpToTag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
s:KeyLoop	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
s:KeyMap	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:KillHandler	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:KillHandler(timer) abort$/;"	f
s:L	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:L = s:V.import('Data.List')$/;"	v
s:L	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^let s:L = lexima#vital().L$/;"	v
s:L	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^let s:L = lexima#vital().L$/;"	v
s:L	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^let s:L = lexima#vital().L$/;"	v
s:LSP_COMPLETION_CLASS_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_CLASS_KIND = 7$/;"	v
s:LSP_COMPLETION_COLOR_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_COLOR_KIND = 16$/;"	v
s:LSP_COMPLETION_CONSTRUCTOR_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_CONSTRUCTOR_KIND = 4$/;"	v
s:LSP_COMPLETION_ENUM_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_ENUM_KIND = 13$/;"	v
s:LSP_COMPLETION_FIELD_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_FIELD_KIND = 5$/;"	v
s:LSP_COMPLETION_FILE_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_FILE_KIND = 17$/;"	v
s:LSP_COMPLETION_FUNCTION_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_FUNCTION_KIND = 3$/;"	v
s:LSP_COMPLETION_INTERFACE_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_INTERFACE_KIND = 8$/;"	v
s:LSP_COMPLETION_KEYWORD_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_KEYWORD_KIND = 14$/;"	v
s:LSP_COMPLETION_METHOD_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_METHOD_KIND = 2$/;"	v
s:LSP_COMPLETION_MODULE_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_MODULE_KIND = 9$/;"	v
s:LSP_COMPLETION_PROPERTY_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_PROPERTY_KIND = 10$/;"	v
s:LSP_COMPLETION_REFERENCE_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_REFERENCE_KIND = 18$/;"	v
s:LSP_COMPLETION_SNIPPET_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_SNIPPET_KIND = 15$/;"	v
s:LSP_COMPLETION_TEXT_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_TEXT_KIND = 1$/;"	v
s:LSP_COMPLETION_UNIT_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_UNIT_KIND = 11$/;"	v
s:LSP_COMPLETION_VALUE_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_VALUE_KIND = 12$/;"	v
s:LSP_COMPLETION_VARIABLE_KIND	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:LSP_COMPLETION_VARIABLE_KIND = 6$/;"	v
s:LanguageGetter	plugged\\ale\\autoload\\ale\\linter.vim	/^function! s:LanguageGetter(buffer) dict abort$/;"	f
s:Lf_CommandMap	plugged\\LeaderF\\autoload\\leaderf.vim	/^let s:Lf_CommandMap = {$/;"	v
s:Lf_Refine	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^function! s:Lf_Refine(arguments)$/;"	f
s:LineHasOpeningBrackets	plugged\\vim-json\\indent\\json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
s:LoadArgCount	plugged\\ale\\autoload\\ale\\util.vim	/^function! s:LoadArgCount(function) abort$/;"	f
s:LoadUserTypeDefs	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
s:LocalVimRC	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRC()$/;"	f
s:LocalVimRCCalcChecksum	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCCalcChecksum(file)$/;"	f
s:LocalVimRCCalcFNV	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCCalcFNV(text)$/;"	f
s:LocalVimRCCheckChecksum	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCCheckChecksum(file, checksum)$/;"	f
s:LocalVimRCClear	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCClear()$/;"	f
s:LocalVimRCDebug	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCDebug(level, text)$/;"	f
s:LocalVimRCDisable	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCDisable()$/;"	f
s:LocalVimRCEdit	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCEdit()$/;"	f
s:LocalVimRCEnable	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCEnable()$/;"	f
s:LocalVimRCError	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCError(text)$/;"	f
s:LocalVimRCMatchAny	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCMatchAny(str, patterns)$/;"	f
s:LocalVimRCReadPersistent	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCReadPersistent()$/;"	f
s:LocalVimRCUserAutocommand	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCUserAutocommand(event)$/;"	f
s:LocalVimRCWritePersistent	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^function! s:LocalVimRCWritePersistent()$/;"	f
s:LookingAt	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:LookingAt()$/;"	f
s:MAX_COL_SIZE	plugged\\ale\\autoload\\ale\\highlight.vim	/^let s:MAX_COL_SIZE = 1073741824 " pow(2, 30)$/;"	v
s:MAX_POS_VALUES	plugged\\ale\\autoload\\ale\\highlight.vim	/^let s:MAX_POS_VALUES = 8$/;"	v
s:METHOD_NOT_FOUND	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:METHOD_NOT_FOUND = -32601$/;"	v
s:ManualCompletionEnter	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ManualCompletionEnter() " {{{$/;"	f
s:MapKeys	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:MapKeys() abort$/;"	f
s:MapNorms	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:MapNorms()$/;"	f
s:MapOp	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^function! s:MapOp(name, extra, op, invoke) "{{{3$/;"	f
s:MapSpecs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
s:MarkProjectAsInitialized	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:MarkProjectAsInitialized(conn, project) abort$/;"	f
s:MarkToOpen	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
s:Match	plugged\\vim-json\\indent\\json.vim	/^function s:Match(lnum, regex)$/;"	f
s:MatchIt	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
s:MatchedItems	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
s:MenuController	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.showMenu	plugged\\nerdtree\\lib\\nerdtree\\menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	plugged\\nerdtree\\lib\\nerdtree\\menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:MinimizeMaxFoldLevel	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
s:NERDTree	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CloseIfQuitOnOpen	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
s:NERDTree.CursorToBookmarkTable	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
s:NERDTree.ExistsForBuf	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	plugged\\nerdtree\\lib\\nerdtree\\nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:Nat	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:Nat(int)$/;"	f
s:NeoVimCallback	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:NeoVimCallback(job, data, event) abort$/;"	f
s:NeoVimOutputCallback	plugged\\ale\\autoload\\ale\\socket.vim	/^function! s:NeoVimOutputCallback(channel_id, data, event) abort$/;"	f
s:NonComment	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^fun! s:NonComment(inc, ...)$/;"	f
s:NotSupport	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:NotSupport()$/;"	f
s:Notifier	plugged\\nerdtree\\lib\\nerdtree\\notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	plugged\\nerdtree\\lib\\nerdtree\\notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	plugged\\nerdtree\\lib\\nerdtree\\notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	plugged\\nerdtree\\lib\\nerdtree\\notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	plugged\\nerdtree\\lib\\nerdtree\\notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:Nsort	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^let s:Nsort = has('patch-7.4.951') ? 'N' : 's:Nsort_func'$/;"	v
s:Nsort_func	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:Nsort_func(a, b) abort " {{{1$/;"	f
s:OneScope	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:OneScope()$/;"	f
s:Open	plugged\\ale\\autoload\\ale\\preview.vim	/^function! s:Open(open_in_tab) abort$/;"	f
s:Open	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:Open()$/;"	f
s:OpenFold	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:OpenFold() abort$/;"	f
s:OpenMulti	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
s:OpenNoMarks	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
s:OpenParents	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
s:OpenWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
s:Opener	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	plugged\\nerdtree\\lib\\nerdtree\\opener.vim	/^function! s:Opener.open(target)$/;"	f
s:PARSE_ERROR	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:PARSE_ERROR = -32700$/;"	v
s:ParseArgs	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:ParseArgs(beg, end, comment_mode, arglist) abort "{{{3$/;"	f
s:ParseCino	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:ParseCino(f)$/;"	f
s:ParseProblemsInHeaders	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^function! s:ParseProblemsInHeaders(buffer, lines) abort$/;"	f
s:ParseTagline	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
s:Path	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.Slash	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.Slash()$/;"	f
s:Path.WinToUnixPath	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.bookmarkNames	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.compareTo	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.compareTo(path)$/;"	f
s:Path.copy	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.isAncestor(path)$/;"	f
s:Path.isHiddenUnder	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.isUnder(path)$/;"	f
s:Path.isUnixHiddenFile	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	plugged\\nerdtree\\lib\\nerdtree\\path.vim	/^function! s:Path.tabnr()$/;"	f
s:PerformMatchHighlight	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:PerformMatchHighlight(pattern)$/;"	f
s:PerformSyntaxHighlight	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:PerformSyntaxHighlight(pattern)$/;"	f
s:PrepareWrappedCommand	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:PrepareWrappedCommand(original_wrapper, command) abort$/;"	f
s:PrevNonBlankNonString	plugged\\vim-json\\indent\\json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
s:PreviousToken	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:PreviousToken(...)$/;"	f
s:PrintHelp	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
s:PrintKinds	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
s:PrintTag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
s:ProcessFile	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
s:ProcessLine	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:ProcessLine(comment_do, match, checkRx, replace) abort$/;"	f
s:ProcessTag	plugged\\tagbar\\autoload\\tagbar.vim	/^function s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
s:PrtAdd	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
s:PrtBS	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtBS()$/;"	f
s:PrtClear	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtClear()$/;"	f
s:PrtClearCache	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
s:PrtCurEnd	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
s:PrtCurLeft	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
s:PrtCurRight	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
s:PrtCurStart	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
s:PrtDelete	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
s:PrtDeleteEnt	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
s:PrtDeleteMRU	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
s:PrtDeleteWord	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
s:PrtExit	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtExit()$/;"	f
s:PrtExpandDir	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
s:PrtFocusMap	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
s:PrtHistory	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
s:PrtInsert	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
s:PrtSelectJump	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
s:PrtSelectMove	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
s:PrtSwitcher	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
s:Pure	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:Pure(f,...)$/;"	f
s:PyMatch	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^fun! s:PyMatch(type, mode) range$/;"	f
s:REQUEST_CANCELLED	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:REQUEST_CANCELLED = -32800$/;"	v
s:ReleaseKeyPresses	plugged\\supertab\\plugin\\supertab.vim	/^function! s:ReleaseKeyPresses() " {{{$/;"	f
s:RemapItemTypes	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:RemapItemTypes(type_map, loclist) abort$/;"	f
s:RemoveITags	plugged\\html5.vim\\indent\\html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
s:RemoveModule	plugged\\ale\\autoload\\ale\\test.vim	/^function! s:RemoveModule(results) abort$/;"	f
s:RemoveProblemsForDisabledLinters	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:RemoveProblemsForDisabledLinters(buffer, linters) abort$/;"	f
s:RemoveUnicodeQuotes	plugged\\ale\\autoload\\ale\\handlers\\flawfinder.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RemoveUnicodeQuotes	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RemoveUnicodeQuotes	plugged\\ale\\autoload\\ale\\handlers\\pony.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:Render	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
s:RenderContent	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
s:RenderKeepView	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
s:ReopenWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
s:ReplaceCompletionOptions	plugged\\ale\\autoload\\ale\\completion.vim	/^function! s:ReplaceCompletionOptions() abort$/;"	f
s:ReplaceInLine	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:ReplaceInLine(text) abort "{{{3$/;"	f
s:Reset	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:Reset(args)$/;"	f
s:RestoreSession	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
s:RunFixer	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:RunFixer(options) abort$/;"	f
s:RunJob	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:RunJob(options) abort$/;"	f
s:RunJob	plugged\\ale\\autoload\\ale\\fix.vim	/^function! s:RunJob(options) abort$/;"	f
s:RunLinter	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:RunLinter(buffer, linter) abort$/;"	f
s:S	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:S = s:V.import('Data.String')$/;"	v
s:S	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^let s:S = lexima#vital().S$/;"	v
s:SERVER_ERROR_END	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SERVER_ERROR_END = -32000$/;"	v
s:SERVER_ERROR_START	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SERVER_ERROR_START = -32099$/;"	v
s:SERVER_NOT_INITIALIZED	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SERVER_NOT_INITIALIZED = -32002$/;"	v
s:SEVERITY_ERROR	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SEVERITY_ERROR = 1$/;"	v
s:SEVERITY_HINT	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SEVERITY_HINT = 4$/;"	v
s:SEVERITY_INFORMATION	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SEVERITY_INFORMATION = 3$/;"	v
s:SEVERITY_WARNING	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:SEVERITY_WARNING = 2$/;"	v
s:SID	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function s:SID()$/;"	f
s:SavePos	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:SavePos()$/;"	f
s:ScriptWrite	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:ScriptWrite(command, pause)$/;"	f
s:SearchLoop	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
s:SelectCompletion	plugged\\supertab\\plugin\\supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
s:SelectJavascript	plugged\\vim-javascript\\ftdetect\\javascript.vim	/^fun! s:SelectJavascript()$/;"	f
s:SendMessageData	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:SendMessageData(conn, data) abort$/;"	f
s:SetCompletionType	plugged\\supertab\\plugin\\supertab.vim	/^function! s:SetCompletionType() " {{{$/;"	f
s:SetDefTxt	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
s:SetDefaultCompletionType	plugged\\supertab\\plugin\\supertab.vim	/^function! s:SetDefaultCompletionType() " {{{$/;"	f
s:SetFoldLevel	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
s:SetFoldLevelRecursive	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
s:SetListsImpl	plugged\\ale\\autoload\\ale\\list.vim	/^function! s:SetListsImpl(timer_id, buffer, loclist) abort$/;"	f
s:SetStatusLine	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:SetStatusLine()$/;"	f
s:SetWD	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
s:Setup	plugged\\ale\\autoload\\ale\\completion.vim	/^function! s:Setup(enabled) abort$/;"	f
s:ShiftTab	plugged\\supertab\\plugin\\supertab.vim	/^        let s:ShiftTab = function(stab)$/;"	v
s:ShiftTab	plugged\\supertab\\plugin\\supertab.vim	/^      let s:ShiftTab = stab$/;"	v
s:ShouldHighlight	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:ShouldHighlight()$/;"	f
s:ShouldIgnore	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^function! s:ShouldIgnore(buffer, linter_name) abort$/;"	f
s:ShouldOpen	plugged\\ale\\autoload\\ale\\list.vim	/^function! s:ShouldOpen(buffer) abort$/;"	f
s:ShouldStripWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:ShouldStripWhitespace()$/;"	f
s:ShouldSuggestForType	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^function! s:ShouldSuggestForType(suggested_filetypes, type_list) abort$/;"	f
s:ShowDetails	plugged\\ale\\autoload\\ale\\hover.vim	/^function! s:ShowDetails(linter, buffer, line, column, opt) abort$/;"	f
s:ShowInPreviewWin	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
s:ShowPrototype	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
s:ShrinkIfExpanded	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
s:SkipFunc	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:SkipFunc()$/;"	f
s:SourcedFile	plugged\\vim-snippets\\plugin\\vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:SpecInputs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
s:SplitPattern	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
s:StartCompletionMode	plugged\\supertab\\plugin\\supertab.vim	/^function! s:StartCompletionMode() " {{{$/;"	f
s:StartOfBlock	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^fun! s:StartOfBlock(start)$/;"	f
s:State	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^let s:State = {$/;"	v
s:State.New	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! s:State.New() abort dict$/;"	f
s:State.getCurrent	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
s:State.setCurrentFile	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
s:State.setPaused	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! s:State.setPaused() abort dict$/;"	f
s:StopCurrentJobs	plugged\\ale\\autoload\\ale\\engine.vim	/^function! s:StopCurrentJobs(buffer, include_lint_file_jobs) abort$/;"	f
s:StopCursorTimer	plugged\\ale\\autoload\\ale\\cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
s:StringReplace	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:StringReplace(text, old, new)$/;"	f
s:StringStrip	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:StringStrip(text)$/;"	f
s:StripWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:StripWhitespace( line1, line2 )$/;"	f
s:StripWhitespaceMotion	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^    function! s:StripWhitespaceMotion(type)$/;"	f
s:SuperTabHelp	plugged\\supertab\\plugin\\supertab.vim	/^function! s:SuperTabHelp() " {{{$/;"	f
s:SynAt	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:SynAt(l,c)$/;"	f
s:TYPE	autoload\\plug.vim	/^let s:TYPE = {$/;"	v
s:Tab	plugged\\supertab\\plugin\\supertab.vim	/^      let s:Tab = function(substitute(existing_tab, '()$', '', ''))$/;"	v
s:Tabdo	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:Tabdo(command)$/;"	f
s:TagName	plugged\\vim-closetag\\plugin\\closetag.vim	/^fun! s:TagName(from)$/;"	f
s:TagbarBufName	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
s:TemporaryFilename	plugged\\ale\\autoload\\ale\\command.vim	/^function! s:TemporaryFilename(buffer) abort$/;"	f
s:TimerHandler	plugged\\ale\\autoload\\ale\\completion.vim	/^function! s:TimerHandler(...) abort$/;"	f
s:ToggleAutoclose	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
s:ToggleByFname	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
s:ToggleCaseInsensitive	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
s:ToggleFocus	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
s:ToggleFold	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
s:ToggleHelp	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
s:ToggleHideNonPublicTags	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
s:ToggleKeyLoop	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
s:ToggleMRURelative	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ToggleMRURelative()$/;"	f
s:ToggleNERDTree	_vimrc	/^function! s:ToggleNERDTree()$/;"	f
s:ToggleRegex	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
s:ToggleSort	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
s:ToggleStripWhitespaceOnSave	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:ToggleStripWhitespaceOnSave()$/;"	f
s:ToggleSyntax	_vimrc	/^function! s:ToggleSyntax()$/;"	f
s:ToggleType	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
s:ToggleWhitespace	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:ToggleWhitespace()$/;"	f
s:ToggleWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
s:Token	plugged\\vim-javascript\\indent\\javascript.vim	/^function s:Token()$/;"	f
s:TransformUserTypeDef	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
s:TreeDirNode	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getChild	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getVisibleChildCount	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	plugged\\nerdtree\\lib\\nerdtree\\tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
s:TreeFileNode.findSibling	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openInNewTab	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	plugged\\nerdtree\\lib\\nerdtree\\tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:UI	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getLineNum(file_node)$/;"	f
s:UI.getPath	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	plugged\\nerdtree\\lib\\nerdtree\\ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:UNKNOWN_ERROR_CODE	plugged\\ale\\autoload\\ale\\lsp\\response.vim	/^let s:UNKNOWN_ERROR_CODE = -32001$/;"	v
s:UnreplaceInLine	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! s:UnreplaceInLine(text) abort "{{{3$/;"	f
s:Update	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:Update(str)$/;"	f
s:UpdateCapabilities	plugged\\ale\\autoload\\ale\\lsp.vim	/^function! s:UpdateCapabilities(conn, capabilities) abort$/;"	f
s:UpdateLineNumbers	plugged\\ale\\autoload\\ale\\sign.vim	/^function! s:UpdateLineNumbers(buffer, current_sign_list, loclist) abort$/;"	f
s:UserCmd	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
s:UsingModule	plugged\\ale\\ale_linters\\python\\flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
s:V	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:V = vital#of('lexima')$/;"	v
s:VimCloseCallback	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:VimCloseCallback(channel) abort$/;"	f
s:VimErrorCallback	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:VimErrorCallback(channel, data) abort$/;"	f
s:VimExitCallback	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:VimExitCallback(job, exit_code) abort$/;"	f
s:VimOutputCallback	plugged\\ale\\autoload\\ale\\job.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
s:VimOutputCallback	plugged\\ale\\autoload\\ale\\socket.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
s:WhitespaceInit	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:WhitespaceInit()$/;"	f
s:WillComplete	plugged\\supertab\\plugin\\supertab.vim	/^function! s:WillComplete(...) " {{{$/;"	f
s:Windo	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^function! s:Windo(command)$/;"	f
s:WindowCheck	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	function! s:WindowCheck(mode)$/;"	f
s:YankLine	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:YankLine(...)$/;"	f
s:ZoomWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
s:_build_module	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_build_module(sid) abort$/;"	f
s:_compare	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:_compare(a, b) abort$/;"	f
s:_concat	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_concat(lists) abort$/;"	f
s:_default_compare	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
s:_file2module	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_file2module(file) abort$/;"	f
s:_getPrefix	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
s:_get_functions	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^  function! s:_get_functions(sid) abort$/;"	f
s:_get_module_path	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_get_module_path(name) abort$/;"	f
s:_get_sid_by_script	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_get_sid_by_script(path) abort$/;"	f
s:_import	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_import(name) abort$/;"	f
s:_is_absolute_path	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^  function! s:_is_absolute_path(path) abort$/;"	f
s:_pad_with_char	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
s:_path2project_directory_git	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_others	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_svn	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_redir	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_redir(cmd) abort$/;"	f
s:_replace	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
s:_runtime_files	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^  function! s:_runtime_files(path) abort$/;"	f
s:_split_by_wcswidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
s:_split_by_wcswidth_once	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
s:_unify_path	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:_unify_path_cache	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:_unify_path_cache = {}$/;"	v
s:_uniq	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^  function! s:_uniq(list) abort$/;"	f
s:_vital_depends	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_files	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:_vital_files(pattern) abort$/;"	f
s:_vital_files_cache	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:_vital_files_cache = []$/;"	v
s:_vital_files_cache_runtimepath	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:_vital_files_cache_runtimepath = ''$/;"	v
s:_vital_loaded	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_warn_deprecated	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
s:_wcwidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:_wcwidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:activateAll	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:activateAll()$/;"	f
s:activateBookmark	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
s:activateDirNode	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:activateDirNode(directoryNode)$/;"	f
s:activateFileNode	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
s:active_cwd	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let s:active_cwd = ''$/;"	v
s:active_cwd_len	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let s:active_cwd_len = 0$/;"	v
s:active_patterns	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let s:active_patterns = []$/;"	v
s:addChild	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
s:addProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! s:addProjectRoot(directory)$/;"	f
s:addTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
s:add_matches	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:add_matches(corrlist, ...) " {{{1$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	plugged\\tagbar\\autoload\\tagbar\\prototypes\\typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_tag_recursive	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
s:addtomrufs	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
s:all	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:all(f, xs) abort$/;"	f
s:all1	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:all1 = s:ini1 . '\\|' . s:tail1$/;"	v
s:all2	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:all2 = s:ini2 . '\\|' . s:tail2$/;"	v
s:allBuffers	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^let s:allBuffers = {}$/;"	v
s:alpha	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let s:alpha = 2.0\/(10+1)$/;"	v
s:anchor_regex	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:anchor_regex(re, cnum, method) " {{{1$/;"	f
s:and	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:and(xs) abort$/;"	f
s:any	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:any(f, xs) abort$/;"	f
s:append_ul	autoload\\plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:apply	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:apply(property) abort "{{{$/;"	f
s:argmaps	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
s:ars	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:ask	autoload\\plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload\\plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	autoload\\plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload\\plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:async_code	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_code = 0$/;"	v
s:async_congest	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let s:async_congest = 0$/;"	v
s:async_congest	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let s:async_congest = has('patch-8.0.100')? 1 : 0$/;"	v
s:async_congest	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_congest = 0$/;"	v
s:async_debug	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_debug = 0$/;"	v
s:async_efm	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_efm = &errorformat$/;"	v
s:async_head	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_head = 0$/;"	v
s:async_info	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_info = { 'text':"", 'post':'', 'postsave':'' }$/;"	v
s:async_nvim	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_nvim = has('nvim')? 1 : 0$/;"	v
s:async_output	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_output = {}$/;"	v
s:async_quick	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let s:async_quick = (v:version >= 800 || has('patch-7.4.1997'))? 1 : 0$/;"	v
s:async_quick	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let s:async_quick = has('nvim-0.2.0')? 1 : 0$/;"	v
s:async_quick	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_quick = 0$/;"	v
s:async_scroll	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_scroll = 0$/;"	v
s:async_start	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_start = 0$/;"	v
s:async_state	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_state = 0$/;"	v
s:async_tail	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:async_tail = 0$/;"	v
s:asyncrun_support	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^		let s:asyncrun_support = 1$/;"	v
s:asyncrun_support	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let s:asyncrun_support = 1$/;"	v
s:asyncrun_support	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:asyncrun_support = 0$/;"	v
s:asyncrun_windows	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	let s:asyncrun_windows = 1$/;"	v
s:asyncrun_windows	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^let s:asyncrun_windows = 0$/;"	v
s:at	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:at(str)$/;"	f
s:autocmds	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:autocmds()$/;"	f
s:autocommands_done	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:backslashdump	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:backslashdump(value, indent) abort$/;"	f
s:bang	autoload\\plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload\\plug.vim	/^function! s:bar()$/;"	f
s:base_spec	autoload\\plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:basetypes	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:basetypes = {$/;"	v
s:begin_failed_skip_pattern	plugged\\ale\\ale_linters\\perl\\perl.vim	/^let s:begin_failed_skip_pattern = '\\v' . join([$/;"	v
s:better_whitespace_initialized	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^let s:better_whitespace_initialized = 0$/;"	v
s:bin_dir	plugged\\ale\\autoload\\ale\\python.vim	/^let s:bin_dir = has('unix') ? 'bin' : 'Scripts'$/;"	v
s:binary_search	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
s:bins	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^let s:bins = [$/;"	v
s:blacklist	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:blacklist(filepath, filetype) abort " {{{$/;"	f
s:block_regex	plugged\\vim-json\\indent\\json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\/;"	v
s:bookmarkListContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:bookmarkListContent(clv)$/;"	f
s:bookmarks	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^let s:bookmarks = []$/;"	v
s:bool	plugged\\vim-editorconfig\\autoload\\editorconfig\\insert_final_newline.vim	/^function! s:bool(value) abort "{{{$/;"	f
s:break	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:break(f, xs) abort$/;"	f
s:break	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:break(type, arg) abort$/;"	f
s:breaksnr	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:breaksnr(arg) abort$/;"	f
s:bufferEntry	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:bufferEntry(bufnr)$/;"	f
s:bufferListContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:bufferListContent(clv)$/;"	f
s:buffer_seqno	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:buffunc	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
s:bufnr_width	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:bufnr_width = 3$/;"	v
s:bufnrfilpath	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:bufnrfilpath(line)$/;"	f
s:bufparts	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:bufparts(bufnr)$/;"	f
s:buftab	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
s:bufwins	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
s:build_path	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:build_path() abort$/;"	f
s:buildpat	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
s:bvars	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:bvars = {$/;"	v
s:byfname	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:byfname()$/;"	f
s:c_comments	plugged\\vim-matchup\\after\\ftplugin\\c_matchup.vim	/^function! s:c_comments()$/;"	f
s:cache_classstructures	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let s:cache_classstructures = {}$/;"	v
s:cache_module_path	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:cache_module_path = {}$/;"	v
s:cache_sid	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:cache_sid = {}$/;"	v
s:cache_tags	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let s:cache_tags = {}$/;"	v
s:cache_tags_checksum	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^	let s:cache_tags_checksum = ''$/;"	v
s:cached_map	plugged\\ale\\autoload\\ale\\filetypes.vim	/^let s:cached_map = {}$/;"	v
s:cachefile	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
s:capture_group_sort	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:capture_group_sort(a, b) abort dict$/;"	f
s:ccex	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:chCwd	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:chCwd(node)$/;"	f
s:chRoot	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:chRoot(node)$/;"	f
s:chain_results	plugged\\ale\\autoload\\ale\\assert.vim	/^let s:chain_results = []$/;"	v
s:changed_wildignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let s:changed_wildignore = 0$/;"	v
s:changelist	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! s:changelist(bufnr)$/;"	f
s:channel_map	plugged\\ale\\autoload\\ale\\socket.vim	/^let s:channel_map = get(s:, 'channel_map', {})$/;"	v
s:char_range	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:char_range(from, to) abort$/;"	f
s:characters	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^let s:characters     = {}$/;"	v
s:chdir	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:chdir(path)$/;"	f
s:check_quickfix	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^	function! s:check_quickfix()$/;"	f
s:check_ruby	autoload\\plug.vim	/^function! s:check_ruby()$/;"	f
s:checkbuf	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:checkbuf()$/;"	f
s:checked_ctags	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:checkout	autoload\\plug.vim	/^function! s:checkout(spec)$/;"	f
s:chknearby	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
s:choices	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
s:chomp	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
s:chop	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
s:chop	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:chop(str) abort "{{{$/;"	f
s:chsh	autoload\\plug.vim	/^function! s:chsh(swap)$/;"	f
s:classpath_sep	plugged\\ale\\ale_linters\\java\\javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:classpath_sep	plugged\\ale\\ale_linters\\kotlin\\kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:clean	autoload\\plug.vim	/^function! s:clean(force)$/;"	f
s:clear	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:clear(list) abort$/;"	f
s:clearOldFolds	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
s:closeChildren	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
s:closeCurrentDir	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
s:closeFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeKindFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
s:closeTreeWindow	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
s:col_end_patterns	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^let s:col_end_patterns = [$/;"	v
s:collectKeysInfo	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! s:collectKeysInfo(mapName)$/;"	f
s:collection	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^let s:collection      = {}$/;"	v
s:combinations	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:combinations(list, r) abort$/;"	f
s:commonMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^let s:commonMap    = {}$/;"	v
s:common_head	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:common_head(strs) abort$/;"	f
s:compareEntries	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! s:compareEntries(a, b)$/;"	f
s:compareJumps	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^function! s:compareJumps(a, b)$/;"	f
s:compare_by_kind	plugged\\tagbar\\autoload\\tagbar\\sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
s:compare_by_line	plugged\\tagbar\\autoload\\tagbar\\sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
s:compare_git_uri	autoload\\plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_typeinfo	plugged\\tagbar\\autoload\\tagbar\\sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:comparent	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:comparent(...)$/;"	f
s:compensate_for_pum	plugged\\ultisnips\\autoload\\UltiSnips.vim	/^function! s:compensate_for_pum()$/;"	f
s:compfnlen	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
s:compile_commands_cache	plugged\\ale\\autoload\\ale\\c.vim	/^    let s:compile_commands_cache = {}$/;"	v
s:completer	plugged\\vim-matchup\\test\\forwhile.vim	/^              let s:completer.context = matchstr(l:line, '\\S*$')$/;"	v
s:completer	plugged\\vim-matchup\\test\\forwhile.vim	/^          let s:completer = l:completer$/;"	v
s:completer	plugged\\vim-matchup\\test\\tabs.vim	/^				let s:completer.context = matchstr(l:line, '\\S*$')$/;"	v
s:completer	plugged\\vim-matchup\\test\\tabs.vim	/^		let s:completer = l:completer$/;"	v
s:compmatlen	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
s:compmreb	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
s:compmref	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:compmref(...)$/;"	f
s:comptime	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:comptime(...)$/;"	f
s:computeLowestNoises	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:computeLowestNoises(source)$/;"	f
s:compval	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:compval(...)$/;"	f
s:compval	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:compval(...)$/;"	f
s:concat	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:concat(list) abort$/;"	f
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^let s:config    = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^let s:config     = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^let s:config     = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:config        = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^let s:config      = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^let s:config         = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^let s:config       = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\nop.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^let s:config              = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^let s:config = ctrlspace#context#Configuration()$/;"	v
s:config	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^let s:config     = ctrlspace#context#Configuration()$/;"	v
s:configuration	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^let s:configuration = {$/;"	v
s:conj	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:conj(xs, x) abort$/;"	f
s:connections	plugged\\ale\\autoload\\ale\\lsp.vim	/^let s:connections = get(s:, 'connections', [])$/;"	v
s:cons	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:cons(x, xs) abort$/;"	f
s:contains_multibyte	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
s:contentFromFileEngine	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:contentFromFileEngine()$/;"	f
s:contentSource	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:contentSource()$/;"	f
s:continuation	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:copyOrMoveSelectedBufferIntoTab	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! s:copyOrMoveSelectedBufferIntoTab(tab, move)$/;"	f
s:coretype_names	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:coretype_names = {$/;"	v
s:coretypes	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:coretypes = map(copy(g:ctrlp_types), '[s:coretype_names[v:val], v:val]')$/;"	v
s:countonly	plugged\\html5.vim\\indent\\html.vim	/^let s:countonly = 0$/;"	v
s:cpo_save	autoload\\plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged\\html5.vim\\indent\\html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged\\vim-json\\indent\\json.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged\\vim-matchup\\test\\rtp\\ftplugin\\matchuptest.vim	/^let s:cpo_save = &cpo$/;"	v
s:cr_key	plugged\\lexima.vim\\autoload\\lexima\\endwise_rule.vim	/^let s:cr_key = '<CR>'$/;"	v
s:createBookmarkJumps	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^function! s:createBookmarkJumps()$/;"	f
s:createBufferJumps	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^function! s:createBufferJumps()$/;"	f
s:createKinddict	plugged\\tagbar\\autoload\\tagbar\\prototypes\\typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
s:createStatusTabline	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^function! s:createStatusTabline()$/;"	f
s:createTabJumps	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^function! s:createTabJumps()$/;"	f
s:create_pseudotag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
s:ctags_is_uctags	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:currentListView	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^let s:currentListView = {}$/;"	v
s:currentProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^let s:currentProjectRoot = ""$/;"	v
s:current_syntax	plugged\\vim-jsx\\after\\syntax\\jsx.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:cursor_timer	plugged\\ale\\autoload\\ale\\cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:curtype	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:curtype()$/;"	f
s:debug_enabled	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^let s:debug_file = ''$/;"	v
s:default_ale_linter_aliases	plugged\\ale\\autoload\\ale\\linter.vim	/^let s:default_ale_linter_aliases = {$/;"	v
s:default_ale_linters	plugged\\ale\\autoload\\ale\\linter.vim	/^let s:default_ale_linters = {$/;"	v
s:default_comment_string	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^let s:default_comment_string = s:DefaultValue('commentstring')$/;"	v
s:default_comments	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^let s:default_comments       = s:DefaultValue('comments')$/;"	v
s:default_registry	plugged\\ale\\autoload\\ale\\fix\\registry.vim	/^let s:default_registry = {$/;"	v
s:default_rule	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:default_rule = {$/;"	v
s:defaults	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^let s:defaults = {'tab_width': 'indent_size'}$/;"	v
s:define_commands	autoload\\plug.vim	/^function! s:define_commands()$/;"	f
s:definitions	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^let s:definitions = {}$/;"	v
s:delayed_update_files	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delbuf	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:delbuf()$/;"	f
s:delbufcond	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:delbufcond(bufnr)$/;"	f
s:delent	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
s:delete	autoload\\plug.vim	/^function! s:delete(range, force)$/;"	f
s:deleteBookmark	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:deleteBookmark(bookmark)$/;"	f
s:delete_op	autoload\\plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:descriptions	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:descriptions = {$/;"	v
s:detectEngine	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! s:detectEngine()$/;"	f
s:dict2list	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:dict2list(dict)$/;"	f
s:dictindex	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
s:did_indent	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^  let s:did_indent=b:did_indent$/;"	v
s:diff	autoload\\plug.vim	/^function! s:diff()$/;"	f
s:diffidx	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:diffidx(a, b) abort$/;"	f
s:dirArrows	plugged\\nerdtree\\syntax\\nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpand/;"	v
s:dircompl	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
s:dircounts	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^let s:dircounts = {}$/;"	v
s:dirpath	autoload\\plug.vim	/^  function! s:dirpath(path)$/;"	f
s:disable_maps_and_commands	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:disable_maps_and_commands(file, buf) abort$/;"	f
s:dismrk	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:dismrk()$/;"	f
s:displayContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:displayContent()$/;"	f
s:displayHelp	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:displayHelp()$/;"	f
s:do	autoload\\plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do_delayed_update	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
s:do_trim_trailing_whitespace	plugged\\vim-editorconfig\\autoload\\editorconfig\\trim_trailing_whitespace.vim	/^function! s:do_trim_trailing_whitespace() abort "{{{$/;"	f
s:doautocmd	autoload\\plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload\\plug.vim	/^function! s:dobufread(names)$/;"	f
s:dohighlight	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:dohighlight()$/;"	f
s:done_bundles	autoload\\pathogen.vim	/^let s:done_bundles = {}$/;"	v
s:dosigns	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:dosigns()$/;"	f
s:dstring	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:dstring(expr) abort$/;"	f
s:editorconfig	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^let s:editorconfig = '.editorconfig'$/;"	v
s:eff_curpos	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:eff_curpos = [1, 1]$/;"	v
s:effcol	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:effcol(expr)$/;"	f
s:effline	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:effline(expr)$/;"	f
s:elapsed	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:elapsed(nr)$/;"	f
s:enable_neovim	plugged\\ale\\ale_linters\\vim\\vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim' : ''$/;"	v
s:encoding	plugged\\vim-editorconfig\\autoload\\editorconfig\\charset.vim	/^let s:encoding = [$/;"	v
s:encoding_patterns	plugged\\vim-editorconfig\\autoload\\editorconfig\\charset.vim	/^let s:encoding_patterns = [$/;"	v
s:end_col_pattern_map	plugged\\ale\\ale_linters\\python\\flake8.vim	/^let s:end_col_pattern_map = {$/;"	v
s:end_of_line	plugged\\vim-editorconfig\\autoload\\editorconfig\\end_of_line.vim	/^let s:end_of_line =$/;"	v
s:endtag	plugged\\vim-jsx\\after\\indent\\jsx.vim	/^let s:endtag = '^\\s*\\\/\\?>\\s*;\\='$/;"	v
s:endtags	plugged\\html5.vim\\indent\\html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:ensurePath	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! s:ensurePath(file)$/;"	f
s:eol_whitespace_pattern	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^    let s:eol_whitespace_pattern .= '\\|[' . s:whitespace_chars . ']\\+\\ze[\\u0009]'$/;"	v
s:eol_whitespace_pattern	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^    let s:eol_whitespace_pattern = '[^\\u0009' . s:whitespace_chars . ']\\@1<=' . s:eol_whitespa/;"	v
s:eol_whitespace_pattern	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^let s:eol_whitespace_pattern = '[\\u0009' . s:whitespace_chars . ']\\+$'$/;"	v
s:err	autoload\\plug.vim	/^function! s:err(msg)$/;"	f
s:errors	plugged\\vim-ctrlspace\\plugin\\ctrlspace.vim	/^let s:errors = []$/;"	v
s:esc	autoload\\plug.vim	/^function! s:esc(path)$/;"	f
s:escape_file_searching	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_pattern	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escapes	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^let s:escapes = {$/;"	v
s:escrtp	autoload\\plug.vim	/^function! s:escrtp(path)$/;"	f
s:esctagscmd	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
s:eval	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:eval(val) abort "{{{$/;"	f
s:excl	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:excl(fn)$/;"	f
s:execWorkspaceCommands	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^function! s:execWorkspaceCommands(bang, name, lines)$/;"	f
s:execextvar	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
s:exectags	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
s:exectagsonfile	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
s:executable_cache_map	plugged\\ale\\autoload\\ale\\engine.vim	/^    let s:executable_cache_map = {}$/;"	v
s:execute	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:execute(mode)$/;"	f
s:exists	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:exists(name) abort$/;"	f
s:expand_bufnr	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:expand_modules	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:expand_modules(entry, all) abort$/;"	f
s:externalBufnr	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:externalBufnr = -1$/;"	v
s:extract_name	autoload\\plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:fcall	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:fcall(fn, path, ...) abort$/;"	f
s:ficounts	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:file	plugged\\vim-matchup\\autoload\\matchup\\misc.vim	/^let s:file = expand('<sfile>')$/;"	v
s:fileListContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:fileListContent(clv)$/;"	f
s:filecounts	plugged\\ctrlp.vim\\autoload\\ctrlp\\rtscript.vim	/^let s:filecounts = {}$/;"	v
s:filereadable	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:filereadable(path) abort$/;"	f
s:files	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^let s:files  = []$/;"	v
s:fillBufferSpace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:fillBufferSpace()$/;"	f
s:fill_defaults	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:fill_defaults(props) abort "{{{$/;"	f
s:filler	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:filler()$/;"	f
s:filter	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! s:filter(tags)$/;"	f
s:filter_matched	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:filter_matched(rule, path) abort "{{{$/;"	f
s:find	autoload\\pathogen.vim	/^function! s:find(count,cmd,file,lcd)$/;"	f
s:find	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:find(list, default, f) abort$/;"	f
s:findAndRevealPath	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:findAndRevealPath(pathStr)$/;"	f
s:findLowestSearchNoise	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:findLowestSearchNoise(text)$/;"	f
s:findSubsequence	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:findSubsequence(text, offset)$/;"	f
s:find_index	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
s:find_indices	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
s:find_last_index	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
s:find_name	autoload\\plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_root	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:find_root(path, markers)$/;"	f
s:find_rule	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^function! s:find_rule(char)$/;"	f
s:find_rule	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! s:find_rule(char)$/;"	f
s:findcommon	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
s:findcount	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! s:findcount(str, tgaddr)$/;"	f
s:findroot	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
s:finish	autoload\\plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload\\plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_completion	plugged\\tcomment_vim\\autoload\\tcomment\\complete.vim	/^let s:first_completion = 0$/;"	v
s:first_rtp	autoload\\plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:flatten	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
s:flatten	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:flatten(list, ...) abort$/;"	f
s:flushTextBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! s:flushTextBuffer()$/;"	f
s:fnameescape	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnesc	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
s:foldl	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
s:foldl1	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
s:foldr	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
s:foldr1	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
s:force	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:force(wise)$/;"	f
s:forgetBuffersInAllTabs	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! s:forgetBuffersInAllTabs(numbers)$/;"	f
s:format	plugged\\ale\\ale_linters\\vim\\vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {description} (see {r/;"	v
s:format	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:format(...)$/;"	f
s:format_git_log	autoload\\plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	autoload\\plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_statusline	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:format_statusline(offscreen) " {{{1$/;"	f
s:formatline	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:formatline(str)$/;"	f
s:formatul	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:formatul(...)$/;"	f
s:fpats	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:fpats = {$/;"	v
s:function	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:function(name) abort$/;"	f
s:gchar_virtpos	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:gchar_virtpos(lnum, cnum)$/;"	f
s:get	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! s:get() abort$/;"	f
s:getChildren	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:getChildren() dict abort$/;"	f
s:getChildrenByName	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
s:getClosedParentTline	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
s:getKind	plugged\\tagbar\\autoload\\tagbar\\prototypes\\typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
s:getNextCharWithPos	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! s:getNextCharWithPos(filelines, current_pos) " {{{$/;"	f
s:getPrototype	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	plugged\\tagbar\\autoload\\tagbar\\prototypes\\normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getSelectedDirectory	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^function! s:getSelectedDirectory()$/;"	f
s:getTags	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
s:getTagsByName	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
s:get_backref	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:get_backref(groups, bref, warn)$/;"	f
s:get_delim	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:get_delim(opts) " {{{1$/;"	f
s:get_last_selected	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^function! s:get_last_selected() abort$/;"	f
s:get_map_str	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
s:get_match_words	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^function! s:get_match_words()$/;"	f
s:get_matching_delims	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:get_matching_delims(down, stopline) dict " {{{1$/;"	f
s:get_project_patterns	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! s:get_project_patterns(root_dir) abort$/;"	f
s:get_selected_text	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^function! s:get_selected_text(...) abort$/;"	f
s:get_syntax_link_chain	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! s:get_syntax_link_chain()$/;"	f
s:get_tag	plugged\\html5.vim\\indent\\html.vim	/^func! s:get_tag(tagname)$/;"	f
s:getbookmarks	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
s:getchar	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:getchar(...) abort$/;"	f
s:getchar_safe	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
s:getcmdwintype_exists	plugged\\ale\\autoload\\ale.vim	/^let s:getcmdwintype_exists = exists('*getcmdwintype')$/;"	v
s:geteffline	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:geteffline(expr)$/;"	f
s:getenv	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:getenv()$/;"	f
s:getextvar	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
s:gethistdata	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:gethistdata()$/;"	f
s:gethistloc	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:gethistloc()$/;"	f
s:getinput	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:getinput(...)$/;"	f
s:getinput	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
s:getnewmix	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
s:getparent	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:getparent(item)$/;"	f
s:getregs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:getregs()$/;"	f
s:gettime	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^    function! s:gettime() abort$/;"	f
s:getundo	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:getundo()$/;"	f
s:git_validate	autoload\\plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload\\plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glbpath	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
s:glbs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:glob	autoload\\plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
s:glob	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:glob(pattern) abort$/;"	f
s:glob_dir	autoload\\plug.vim	/^function! s:glob_dir(path)$/;"	f
s:global_variable_list	plugged\\ale\\autoload\\ale\\debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globdirs	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
s:globpath	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:globpath(path, expr) abort$/;"	f
s:globpath	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:globpath(path, expr) abort "{{{$/;"	f
s:globpath_third_arg	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:globpath_third_arg = v:version > 702 || v:version == 702 && has('patch51')$/;"	v
s:globrtp	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:globrtp(expr) abort$/;"	f
s:go_to_definition_map	plugged\\ale\\autoload\\ale\\definition.vim	/^let s:go_to_definition_map = {}$/;"	v
s:goto	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:goto(line)$/;"	f
s:goto_markedwin	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
s:goto_tagbar	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
s:goto_win	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
s:group_by	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:group_by(xs, f) abort$/;"	f
s:gsub	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:guess_root	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^    function! s:guess_root(filename, markers)$/;"	f
s:handleAutochdir	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! s:handleAutochdir(switch)$/;"	f
s:handleLeftClick	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
s:handleMiddleMouse	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
s:handleSwitchbuf	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! s:handleSwitchbuf(switch)$/;"	f
s:has	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:has(list, value) abort$/;"	f
s:has_common_items	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
s:has_conceal	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:has_conceal = has('conceal')$/;"	v
s:has_dict_maparg	plugged\\supertab\\plugin\\supertab.vim	/^  let s:has_dict_maparg = v:version > 703 || (v:version == 703 && has('patch32'))$/;"	v
s:has_features	plugged\\ale\\plugin\\ale.vim	/^    let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')$/;"	v
s:has_features	plugged\\ale\\plugin\\ale.vim	/^    let s:has_features = has('timers') && has('nvim-0.2.0')$/;"	v
s:has_index	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:has_index(list, index) abort$/;"	f
s:has_plugin	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^function! s:has_plugin(plug)$/;"	f
s:hash	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:hash(str) abort$/;"	f
s:hash_match	autoload\\plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:headntail	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:headntail(str)$/;"	f
s:helpMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:helpMap = {$/;"	v
s:helpMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^let s:helpMap      = {}$/;"	v
s:highlight	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
s:hlgrps	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:hover_map	plugged\\ale\\autoload\\ale\\hover.vim	/^let s:hover_map = {}$/;"	v
s:ics	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:ifilter	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ifilter(list, str)$/;"	f
s:ignore	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ignore()$/;"	f
s:import	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:import(name, ...) abort$/;"	f
s:in_comm	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:indent_style	plugged\\vim-editorconfig\\autoload\\editorconfig\\indent_style.vim	/^let s:indent_style =$/;"	v
s:indent_tags	plugged\\html5.vim\\indent\\html.vim	/^let s:indent_tags = {}$/;"	v
s:infer_properties	autoload\\plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:ini1	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:ini1 = 'try\\|if'$/;"	v
s:ini2	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:ini2 = 'for\\|while' $/;"	v
s:init	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^let s:init = 0$/;"	v
s:init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^function! s:init()$/;"	f
s:init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! s:init()$/;"	f
s:init	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:init()$/;"	f
s:initCustomMappings	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! s:initCustomMappings()$/;"	f
s:initFoldState	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
s:initKeyMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! s:initKeyMap()$/;"	f
s:initKeyNames	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^function! s:initKeyNames()$/;"	f
s:initProjectRootsAndBookmarks	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^function! s:initProjectRootsAndBookmarks()$/;"	f
s:initVariable	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
s:init_default_mappings	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:init_default_mappings()$/;"	f
s:init_delim_lists	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:init_delim_lists(...) abort " {{{1$/;"	f
s:init_delim_lists_fast	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:init_delim_lists_fast(mps) abort " {{{1$/;"	f
s:init_delim_regexes	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:init_delim_regexes() abort " {{{1$/;"	f
s:init_delim_regexes_generator	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:init_delim_regexes_generator(list_name) abort " {{{1$/;"	f
s:init_delim_skip	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^function! s:init_delim_skip() abort "{{{1$/;"	f
s:init_done	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_modules	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:init_modules()$/;"	f
s:init_option	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:init_option(option, default)$/;"	f
s:init_options	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:init_options()$/;"	f
s:init_path	plugged\\ale\\autoload\\ale\\gradle.vim	/^let s:init_path = has('win32')$/;"	v
s:init_var	plugged\\tagbar\\plugin\\tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
s:input	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! s:input(input, input_after)$/;"	f
s:input_helper	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
s:input_safe	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
s:input_stack	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^let s:input_stack = lexima#charstack#new()$/;"	v
s:insertcache	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
s:insertstr	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:insertstr()$/;"	f
s:install	autoload\\plug.vim	/^function! s:install(force, names)$/;"	f
s:internalFilePath	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^function! s:internalFilePath(name)$/;"	f
s:intersect	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
s:invert_skip	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:invert_skip = 0$/;"	v
s:isFoldable	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFoldable	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFolded	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isFolded	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isKindheader	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isKindheader	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isNormalTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isNormalTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isPseudoTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isPseudoTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isSplitTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:isSplitTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:is_cmdwin	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^  function! s:is_cmdwin() abort$/;"	f
s:is_cygwin	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
s:is_cygwin	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_dict	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
s:is_float	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
s:is_funcref	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
s:is_list	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
s:is_local_plug	autoload\\plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_mac	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_mac() abort$/;"	f
s:is_mac	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_managed	autoload\\plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_maximized	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_number	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
s:is_numeric	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
s:is_preview_window_open	autoload\\plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_string	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
s:is_unix	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_unix() abort$/;"	f
s:is_unix	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_updated	autoload\\plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload\\plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_windows	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:is_windows() abort$/;"	f
s:is_windows	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:isabs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:isabs(path)$/;"	f
s:iscmdwin	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
s:isdirectory	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:isdirectory(path) abort$/;"	f
s:iskeyword_save	plugged\\php.vim\\syntax\\php.vim	/^let s:iskeyword_save = &iskeyword$/;"	v
s:ispathitem	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:ispathitem()$/;"	f
s:isterminal	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:isterminal(buf)$/;"	f
s:items	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^let s:items  = []$/;"	v
s:job_abort	autoload\\plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload\\plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload\\plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_info_map	plugged\\ale\\autoload\\ale\\engine.vim	/^    let s:job_info_map = {}$/;"	v
s:job_info_map	plugged\\ale\\autoload\\ale\\fix.vim	/^    let s:job_info_map = {}$/;"	v
s:job_kill_timers	plugged\\ale\\autoload\\ale\\job.vim	/^    let s:job_kill_timers = {}$/;"	v
s:job_map	plugged\\ale\\autoload\\ale\\job.vim	/^    let s:job_map = {}$/;"	v
s:job_out_cb	autoload\\plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jsx_match_words	plugged\\vim-jsx\\after\\ftplugin\\jsx.vim	/^  let s:jsx_match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
s:jsx_pragma_pattern	plugged\\vim-jsx\\ftdetect\\javascript.vim	/^let s:jsx_pragma_pattern = '\\%^\\_s*\\\/\\*\\*\\%(\\_.\\%(\\*\\\/\\)\\@!\\)*@jsx\\_.\\{-}\\*\\\//;"	v
s:jumpCounter	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^let s:jumpCounter = 0$/;"	v
s:jumpToChild	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToChild(currentNode, direction)$/;"	f
s:jumpToFirstChild	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
s:jumpToLastChild	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
s:jumpToNextSibling	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
s:jumpToParent	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
s:jumpToPrevSibling	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
s:jumpToRoot	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
s:jumpToSibling	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:jumpToSibling(currentNode, forward)$/;"	f
s:justify_equal_spacing	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
s:keepBuffersForKeys	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! s:keepBuffersForKeys(dict)$/;"	f
s:keyEscSequence	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^let s:keyEscSequence = 0$/;"	v
s:keyHelp	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! s:keyHelp(key, description)$/;"	f
s:keyMap	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^let s:keyMap         = {}$/;"	v
s:keyMaps	plugged\\nerdtree\\lib\\nerdtree\\key_map.vim	/^let s:keyMaps = {}$/;"	v
s:keyNames	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^let s:keyNames       = []$/;"	v
s:known_files	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files.get	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
s:known_files.has	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
s:known_files.put	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
s:known_files.rm	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
s:kprange	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:kprange = {$/;"	v
s:lang_available	plugged\\vim-editorconfig\\autoload\\editorconfig\\spell_language.vim	/^function! s:lang_available(value) abort "{{{$/;"	f
s:languages	plugged\\vim-editorconfig\\autoload\\editorconfig\\spell_language.vim	/^let s:languages = map(filter(globpath(&runtimepath, 'spell\/*', 1, 1), '!isdirectory(v:val)'), '/;"	v
s:lash	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:lash(...)$/;"	f
s:lash	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^fu! s:lash(...)$/;"	f
s:lastListView	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^let s:lastListView = "Buffer"$/;"	v
s:lastProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^let s:lastProjectRoot    = ""$/;"	v
s:last_alt_bufnr	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_done_pos	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:last_done_pos = []$/;"	v
s:last_highlight_tline	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_non_empty_line	autoload\\plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_pattern_options	plugged\\ale\\autoload\\ale\\pattern_options.vim	/^let s:last_pattern_options = {}$/;"	v
s:last_pos	plugged\\ale\\autoload\\ale\\cursor.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_rtp	autoload\\plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:lastline	autoload\\plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastvisual	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:lastvisual()$/;"	f
s:leavepre	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:leavepre()$/;"	f
s:leftSep	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^let s:leftSep = {$/;"	v
s:lencompare	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:lencompare(a, b) abort$/;"	f
s:levenshtein_distance	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
s:lexima_vital	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:lexima_vital = {$/;"	v
s:line_term	plugged\\vim-json\\indent\\json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:lineout	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^fu! s:lineout(dict)$/;"	f
s:lines	autoload\\plug.vim	/^function! s:lines(msg)$/;"	f
s:lines	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:lines(str) abort$/;"	f
s:lint_timer	plugged\\ale\\autoload\\ale.vim	/^let s:lint_timer = -1$/;"	v
s:linters	plugged\\ale\\autoload\\ale\\linter.vim	/^let s:linters = {}$/;"	v
s:lists	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^let s:lists           = []$/;"	v
s:load	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:load(...) dict abort$/;"	f
s:loadBufferIntoWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^function! s:loadBufferIntoWindow(winnr)$/;"	f
s:loadFileOrBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! s:loadFileOrBuffer(file)$/;"	f
s:loadFilesFromCache	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! s:loadFilesFromCache()$/;"	f
s:loadWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! s:loadWorkspace(bang, name)$/;"	f
s:load_plugin	autoload\\plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:load_project_patterns	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! s:load_project_patterns(root_dir) abort$/;"	f
s:loaded	autoload\\plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:loaded = {}$/;"	v
s:loaded_functions	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:loaded_functions = 1$/;"	v
s:loaded_names	autoload\\plug.vim	/^function! s:loaded_names()$/;"	f
s:localvimrc_ask	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_ask = g:localvimrc_ask$/;"	v
s:localvimrc_ask	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_ask = 1$/;"	v
s:localvimrc_autocmd	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_autocmd = g:localvimrc_autocmd$/;"	v
s:localvimrc_autocmd	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_autocmd = 1$/;"	v
s:localvimrc_blacklist	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^    let s:localvimrc_blacklist = [ g:localvimrc_blacklist ]$/;"	v
s:localvimrc_blacklist	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^    let s:localvimrc_blacklist = g:localvimrc_blacklist$/;"	v
s:localvimrc_blacklist	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_blacklist = [ "^$" ] " this never matches a file$/;"	v
s:localvimrc_count	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_count = g:localvimrc_count$/;"	v
s:localvimrc_count	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_count = -1$/;"	v
s:localvimrc_data	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_data = {}$/;"	v
s:localvimrc_enable	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_enable = g:localvimrc_enable$/;"	v
s:localvimrc_enable	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_enable = 1$/;"	v
s:localvimrc_event	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_event = g:localvimrc_event$/;"	v
s:localvimrc_event	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_event = [ "BufWinEnter" ]$/;"	v
s:localvimrc_event_pattern	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_event_pattern = g:localvimrc_event_pattern$/;"	v
s:localvimrc_event_pattern	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_event_pattern = "*"$/;"	v
s:localvimrc_file_directory_only	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_file_directory_only = g:localvimrc_file_directory_only$/;"	v
s:localvimrc_file_directory_only	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_file_directory_only = 0$/;"	v
s:localvimrc_finish	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_finish = 0$/;"	v
s:localvimrc_name	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^    let s:localvimrc_name = [ g:localvimrc_name ]$/;"	v
s:localvimrc_name	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^    let s:localvimrc_name = g:localvimrc_name$/;"	v
s:localvimrc_name	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_name = [ ".lvimrc" ]$/;"	v
s:localvimrc_persistence_file	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_persistence_file = expand('$HOME') . "\/.localvimrc_persistent"$/;"	v
s:localvimrc_persistence_file	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_persistence_file = expand('$HOME') . "\/_localvimrc_persistent"$/;"	v
s:localvimrc_persistence_file	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_persistence_file = g:localvimrc_persistence_file$/;"	v
s:localvimrc_persistence_file_checksum	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_persistence_file_checksum = ""$/;"	v
s:localvimrc_persistent	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_persistent = g:localvimrc_persistent$/;"	v
s:localvimrc_persistent	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_persistent = 0$/;"	v
s:localvimrc_persistent_data	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_persistent_data = {}$/;"	v
s:localvimrc_reverse	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_reverse = g:localvimrc_reverse$/;"	v
s:localvimrc_reverse	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_reverse = 0$/;"	v
s:localvimrc_sandbox	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^  let s:localvimrc_sandbox = g:localvimrc_sandbox$/;"	v
s:localvimrc_sandbox	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_sandbox = 1$/;"	v
s:localvimrc_sourced	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_sourced = {}$/;"	v
s:localvimrc_whitelist	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^    let s:localvimrc_whitelist = [ g:localvimrc_whitelist ]$/;"	v
s:localvimrc_whitelist	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^    let s:localvimrc_whitelist = g:localvimrc_whitelist$/;"	v
s:localvimrc_whitelist	plugged\\vim-localvimrc\\plugin\\localvimrc.vim	/^let s:localvimrc_whitelist = [ "^$" ] " this never matches a file$/;"	v
s:lod	autoload\\plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload\\plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload\\plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload\\plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload\\plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:log(m)$/;"	f
s:log4	autoload\\plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	autoload\\plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload\\plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lsCmd	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:lsCmd()$/;"	f
s:lsp_linter_map	plugged\\ale\\autoload\\ale\\lsp_linter.vim	/^    let s:lsp_linter_map = {}$/;"	v
s:mac_gui	autoload\\plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:make_rule	plugged\\lexima.vim\\autoload\\lexima\\endwise_rule.vim	/^function! s:make_rule(at, end, filetype, syntax)$/;"	f
s:map	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! s:map(func, ...)$/;"	f
s:map	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^function! s:map(fn, ...)$/;"	f
s:map	plugged\\vim-matchup\\autoload\\matchup.vim	/^  function! s:map(mode, lhs, rhs, ...)$/;"	f
s:map_accum	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
s:map_dict	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^let s:map_dict = {}$/;"	v
s:map_dict	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^let s:map_dict = {}$/;"	v
s:map_impl	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^function! s:map_impl(char)$/;"	f
s:mark_window	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:mark_window() abort$/;"	f
s:match_encoding_pattern	plugged\\vim-editorconfig\\autoload\\editorconfig\\charset.vim	/^function! s:match_encoding_pattern(enc_name) abort "{{{$/;"	f
s:match_window_opts	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:match_window_opts()$/;"	f
s:matchbuf	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:matchbuf(item, pat)$/;"	f
s:matchfname	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
s:matchlens	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
s:matchparen	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^let s:matchparen = {}$/;"	v
s:matchparen.clear	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:matchparen.clear() abort dict " {{{1$/;"	f
s:matchparen.highlight	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:matchparen.highlight(...) abort dict " {{{1$/;"	f
s:matchparen.highlight_deferred	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:matchparen.highlight_deferred() abort dict " {{{1$/;"	f
s:matchstrpos	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^  function! s:matchstrpos(expr, pat, start) abort$/;"	f
s:matchtabe	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
s:matchtabs	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
s:max	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^fu! s:max(len, max)$/;"	f
s:max_by	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:max_by(list, expr) abort$/;"	f
s:maxf	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:maxf(len)$/;"	f
s:me	autoload\\plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:mergelists	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:mergelists()$/;"	f
s:mfunc	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:mfunc()$/;"	f
s:min_by	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:min_by(list, expr) abort$/;"	f
s:misc_init_module	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:misc_init_module() " {{{1$/;"	f
s:mixedsort	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
s:mmode	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:mmode()$/;"	f
s:mode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^let s:mode = {$/;"	v
s:mode.Disable	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:mode.Disable() dict$/;"	f
s:mode.Enable	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:mode.Enable() dict$/;"	f
s:mode.HasData	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:mode.HasData(key) dict$/;"	f
s:mode.RemoveData	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:mode.RemoveData(key) dict$/;"	f
s:mode.SetData	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:mode.SetData(key, value) dict$/;"	f
s:mode.new	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^function! s:mode.new(name, listView, data) dict$/;"	f
s:modeInfo	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! s:modeInfo()$/;"	f
s:modeMap	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^let s:modeMap = {$/;"	v
s:modes	plugged\\supertab\\plugin\\supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	plugged\\supertab\\plugin\\supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\api.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\bookmarks.vim	/^let s:modes     = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\buffers.vim	/^let s:modes      = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^let s:modes      = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:modes         = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\init.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\jumps.vim	/^let s:modes       = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys.vim	/^let s:modes          = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\bookmark.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^let s:modes        = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\file.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\help.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\nop.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\search.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\tab.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^let s:modes               = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\tabs.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\ui.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\util.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^let s:modes  = ctrlspace#modes#Modes()$/;"	v
s:modes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^let s:modes      = ctrlspace#modes#Modes()$/;"	v
s:modevar	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:modevar()$/;"	f
s:modify	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
s:motion_init_module	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:motion_init_module() " {{{1$/;"	f
s:mruf_map_string	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^let s:mruf_map_string = '!stridx(v:val, cwd) ? strpart(v:val, idx) : v:val'$/;"	v
s:msg	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
s:mtype	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:mtype()$/;"	f
s:multipliers	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
s:names	autoload\\plug.vim	/^function! s:names(...)$/;"	f
s:narrowable	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:narrowable()$/;"	f
s:nearby_disabled	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:new_window	autoload\\plug.vim	/^function! s:new_window()$/;"	f
s:new_window	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:new_window      = 1$/;"	v
s:newcache	plugged\\ctrlp.vim\\autoload\\ctrlp\\mixed.vim	/^fu! s:newcache(cwd)$/;"	f
s:noLists	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\modes.vim	/^let s:noLists         = []$/;"	v
s:nocache	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:nocache(...)$/;"	f
s:nocache	plugged\\ctrlp.vim\\autoload\\ctrlp\\dir.vim	/^fu! s:nocache()$/;"	f
s:nocache	plugged\\ctrlp.vim\\autoload\\ctrlp\\rtscript.vim	/^fu! s:nocache()$/;"	f
s:nosort	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:nosort()$/;"	f
s:nosplit	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:nosplit()$/;"	f
s:not_bslash	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^let s:not_bslash = '\\v%(\\\\@<!%(\\\\\\\\)*)@4<=\\m'$/;"	v
s:nr2byte	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:nr2byte(nr) abort$/;"	f
s:nr2enc_char	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
s:nr2hex	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:nr2hex(nr) abort$/;"	f
s:nsplit	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:null_comment_string	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^let s:null_comment_string    = '%s'$/;"	v
s:nvim	autoload\\plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload\\plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:offset	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:offset(lines, height)$/;"	f
s:old_cpo	plugged\\nerdtree\\plugin\\NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:omni_start_map	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:omni_start_map = {$/;"	v
s:on_bufwritepost_insert_final_newline	plugged\\vim-editorconfig\\autoload\\editorconfig\\insert_final_newline.vim	/^function! s:on_bufwritepost_insert_final_newline() abort "{{{$/;"	f
s:on_bufwritepre_insert_final_newline	plugged\\vim-editorconfig\\autoload\\editorconfig\\insert_final_newline.vim	/^function! s:on_bufwritepre_insert_final_newline() abort "{{{$/;"	f
s:open	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^function! s:open(buffer, opener) abort$/;"	f
s:openExplorer	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
s:openFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:openFold() abort dict$/;"	f
s:openFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
s:openHSplit	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
s:openInNewTab	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
s:openInNewTabSilent	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
s:openKindFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
s:openNodeRecursively	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
s:openParents	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:openParents() abort dict$/;"	f
s:openVSplit	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
s:openfile	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
s:opfirst	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:opfunc	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:opfunc(t) abort$/;"	f
s:opts	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:opts(...)$/;"	f
s:or	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:or(xs) abort$/;"	f
s:pad_between_letters	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
s:pad_both_sides	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
s:pad_left	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
s:pad_right	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
s:padding_by_displaywidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
s:palette	plugged\\LeaderF\\autoload\\leaderf\\colorscheme\\default.vim	/^let s:palette = {$/;"	v
s:palette	plugged\\LeaderF\\autoload\\leaderf\\colorscheme\\powerline.vim	/^let s:palette = {$/;"	v
s:parse	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:parse(lines) abort "{{{$/;"	f
s:parse_args	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^function! s:parse_args(args) " {{{1$/;"	f
s:parse_options	autoload\\plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_pattern	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:parse_pattern(lines) abort "{{{$/;"	f
s:parse_properties	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:parse_properties(lines) abort "{{{$/;"	f
s:parseline	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:parseline(line)$/;"	f
s:parser_delim_new	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:parser_delim_new(lnum, cnum, opts) " {{{1$/;"	f
s:partial_timers	plugged\\ale\\autoload\\ale\\util.vim	/^    let s:partial_timers = {}$/;"	v
s:partition	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:partition(f, xs) abort$/;"	f
s:parts	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
s:path	autoload\\plug.vim	/^  function! s:path(path)$/;"	f
s:path	plugged\\vim-matchup\\test\\addrtp.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path2directory	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
s:path2project_directory	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
s:path_join	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:path_join(home, name)$/;"	f
s:pathshorten	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
s:pattern	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^let s:pattern = '\\v^([a-zA-Z]?:?[^:]+):(\\d+):(\\d+)?:? ([^:]+): (.+)$'$/;"	v
s:pattern	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? /;"	v
s:pattern	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	plugged\\tagbar\\syntax\\tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:paused = 0$/;"	v
s:permutations	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:permutations(list, ...) abort$/;"	f
s:pi_paren_sid	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:pi_paren_sid() " {{{1$/;"	f
s:pi_paren_sid	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^let s:pi_paren_sid = -1$/;"	v
s:plug_buf	autoload\\plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload\\plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload\\plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	autoload\\plug.vim	/^function! s:plug_window_exists()$/;"	f
s:pluginBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^let s:pluginBuffer = -1$/;"	v
s:pluginFolder	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\context.vim	/^let s:pluginFolder = fnamemodify(resolve(expand('<sfile>:p')), ':h:h:h')$/;"	v
s:plugin_path	plugged\\ctrlp-py-matcher\\autoload\\pymatcher.vim	/^let s:plugin_path = escape(expand('<sfile>:p:h'), '\\')$/;"	v
s:pop	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:pop(list) abort$/;"	f
s:pragma_error	plugged\\ale\\autoload\\ale\\handlers\\gcc.vim	/^let s:pragma_error = '#pragma once in main file'$/;"	v
s:prepare	autoload\\plug.vim	/^function! s:prepare(...)$/;"	f
s:prepareContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:prepareContent(items)$/;"	f
s:prev_wildignore	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let s:prev_wildignore = ''$/;"	v
s:previewNodeCurrent	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
s:previewNodeHSplit	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
s:previewNodeVSplit	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
s:preview_commit	autoload\\plug.vim	/^function! s:preview_commit()$/;"	f
s:previewwindow	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:previewwindow() abort$/;"	f
s:process	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
s:process	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
s:process	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! s:process(clines, ...)$/;"	f
s:process_hlend	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^function! s:process_hlend(re, cursorpos) " {{{1$/;"	f
s:product	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:product(lists) abort$/;"	f
s:progress_bar	autoload\\plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload\\plug.vim	/^function! s:progress_opt(base)$/;"	f
s:proj_cache	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^let s:proj_cache = {}$/;"	v
s:projectRoots	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^let s:projectRoots       = {}$/;"	v
s:projectionist_detect	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^function! s:projectionist_detect() abort$/;"	f
s:promptToDelBuffer	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:promptToRenameBuffer	plugged\\nerdtree\\nerdtree_plugin\\fs_menu.vim	/^function! s:promptToRenameBuffer(bufnum, msg, newFileName)$/;"	f
s:properties	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:properties() abort "{{{$/;"	f
s:push	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:push(list, val) abort$/;"	f
s:puts	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^function! s:puts(str)$/;"	f
s:pwin_by_tagbar	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:queued_buffer_number	plugged\\ale\\autoload\\ale.vim	/^let s:queued_buffer_number = -1$/;"	v
s:readfile	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:readfile(path, ...) abort$/;"	f
s:readfileToTmpbuffer	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^function! s:readfileToTmpbuffer(file) " {{{$/;"	f
s:reap	autoload\\plug.vim	/^function! s:reap(name)$/;"	f
s:record	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
s:references_map	plugged\\ale\\autoload\\ale\\references.vim	/^let s:references_map = {}$/;"	v
s:reformat	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:reformat(mrufs, ...)$/;"	f
s:refreshCurrent	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
s:refreshRoot	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:refreshRoot()$/;"	f
s:regexfilter	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
s:regexp	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:regexp(pattern) abort "{{{$/;"	f
s:regexp_rules	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^let s:regexp_rules =$/;"	v
s:regisfilter	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
s:regress_bar	autoload\\plug.vim	/^function! s:regress_bar()$/;"	f
s:regularize	plugged\\lexima.vim\\autoload\\lexima.vim	/^function! s:regularize(rule)$/;"	f
s:rel	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:rel = has('reltime')$/;"	v
s:reload_plugins	autoload\\plug.vim	/^function! s:reload_plugins()$/;"	f
s:reltimefloat	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^  function! s:reltimefloat(time)$/;"	f
s:reltimefloat	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^  function! s:reltimefloat(time)$/;"	f
s:remarksigns	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:remarksigns()$/;"	f
s:removeChild	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
s:removeProjectRoot	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\roots.vim	/^function! s:removeProjectRoot(directory)$/;"	f
s:removeTag	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
s:remove_comment	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:remove_comment(line) abort "{{{$/;"	f
s:remove_rtp	autoload\\plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload\\plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	autoload\\plug.vim	/^function! s:reorg_rtp()$/;"	f
s:replace	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:replace(str, from, to) abort$/;"	f
s:replace_first	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
s:reset	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:reset() abort dict$/;"	f
s:resetWindow	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:resetWindow()$/;"	f
s:resonators	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^let s:resonators = ['.', '\/', '_', '-', ' ']$/;"	v
s:retry	autoload\\plug.vim	/^function! s:retry()$/;"	f
s:reuseWin	plugged\\nerdtree\\autoload\\nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:reverse	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:reverse(str) abort$/;"	f
s:revert	autoload\\plug.vim	/^function! s:revert()$/;"	f
s:rightSep	plugged\\LeaderF\\autoload\\leaderf\\colorscheme.vim	/^let s:rightSep = {$/;"	v
s:rm_rf	autoload\\plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	autoload\\plug.vim	/^  function! s:rtp(spec)$/;"	f
s:run	plugged\\asyncrun.vim\\plugin\\asyncrun.vim	/^function! s:run(opts)$/;"	f
s:runtime_globpath	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:runtime_globpath(file) abort$/;"	f
s:runtime_loaded_map	plugged\\ale\\autoload\\ale\\linter.vim	/^let s:runtime_loaded_map = {}$/;"	v
s:safe_printf	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:safe_printf(format, ...)$/;"	f
s:samerootsyml	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
s:sanstail	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
s:saveFilesInCache	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! s:saveFilesInCache()$/;"	f
s:saveFirstWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! s:saveFirstWorkspace()$/;"	f
s:saveWorkspace	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\workspace.vim	/^function! s:saveWorkspace(name)$/;"	f
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima\\cmdmode.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima\\endwise_rule.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima\\insmode.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\lexima\\string.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Vim\\Buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\lexima.vim\\plugin\\lexima.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\phpcomplete.vim\\ftplugin\\php_phpcomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\supertab\\plugin\\supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugged\\tcomment_vim\\plugin\\tcomment.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\ultisnips\\autoload\\neocomplete\\sources\\ultisnips.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\ultisnips\\ftplugin\\snippets.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-editorconfig\\plugin\\editorconfig.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-gitbranch\\autoload\\gitbranch.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-gitbranch\\autoload\\hgbranch.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-gitbranch\\plugin\\gitbranch.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-gitbranch\\plugin\\hgbranch.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\after\\ftplugin\\html_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\after\\ftplugin\\vim_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\after\\ftplugin\\xml_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\motion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\pos.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\text_obj.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\transmute.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-matchup\\autoload\\matchup\\util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:save_cpo = &cpo$/;"	v
s:savebookmark	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
s:savetofile	plugged\\ctrlp.vim\\autoload\\ctrlp\\mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
s:scan	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:scan(str, pattern) abort$/;"	f
s:scan	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:scan(path) abort "{{{$/;"	f
s:script_path	plugged\\ale\\autoload\\ale\\gradle.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:script_path	plugged\\phpcomplete.vim\\autoload\\phpcomplete.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:scriptdir	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^let s:scriptdir = expand('<sfile>:p:r')$/;"	v
s:search	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:search(pattern) abort$/;"	f
s:section	autoload\\plug.vim	/^function! s:section(flags)$/;"	f
s:self_file	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:self_file = expand('<sfile>')$/;"	v
s:self_version	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^let s:self_version = expand('<sfile>:t:r')$/;"	v
s:sep	plugged\\ale\\autoload\\ale\\c.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged\\ale\\autoload\\ale\\handlers\\eslint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged\\ale\\autoload\\ale\\python.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:setActiveLine	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:setActiveLine()$/;"	f
s:setFolded	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
s:setUpBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\window.vim	/^function! s:setUpBuffer()$/;"	f
s:set_default	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
s:set_match_words	plugged\\ultisnips\\ftplugin\\snippets.vim	/^  let s:set_match_words = 1$/;"	v
s:setentries	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:setentries()$/;"	f
s:settype	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:settype(type)$/;"	f
s:setup_insmode	plugged\\lexima.vim\\plugin\\lexima.vim	/^function! s:setup_insmode()$/;"	f
s:setup_keymaps	plugged\\tagbar\\plugin\\tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
s:setup_match_words	plugged\\vim-matchup\\after\\ftplugin\\tex_matchup.vim	/^function! s:setup_match_words()$/;"	f
s:setup_options	plugged\\tagbar\\plugin\\tagbar.vim	/^function! s:setup_options() abort$/;"	f
s:setupblank	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:setupblank()$/;"	f
s:sftpsync_timer	plugin\\sftpsync.vim	/^let s:sftpsync_timer = timer_start(g:sftpsync_cache_purge_timeout, 'sftpsync#PurgeConnections', /;"	v
s:shellesc	autoload\\plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	autoload\\plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellslash	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:shellslash(path) abort$/;"	f
s:shift	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:shift(list) abort$/;"	f
s:short_help	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:short_help      = 1$/;"	v
s:shortest	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
s:should_complete_map	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:should_complete_map = {$/;"	v
s:should_lint_file_for_buffer	plugged\\ale\\autoload\\ale.vim	/^let s:should_lint_file_for_buffer = {}$/;"	v
s:showMenu	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:showMenu(node)$/;"	f
s:sid	plugged\\vim-matchup\\autoload\\matchup.vim	/^let s:sid = printf("\\<SNR>%d_", s:snr())$/;"	v
s:sidedict	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:sidedict = {$/;"	v
s:sidedict	plugged\\vim-matchup\\autoload\\matchup\\loader.vim	/^let s:sidedict = {$/;"	v
s:sizes	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:sizes         = ctrlspace#context#SymbolSizes()$/;"	v
s:skip_expr	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:smart_execute_command	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
s:snapshot	autoload\\plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snr	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:snr()$/;"	f
s:sort	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:sort(list, expr) abort$/;"	f
s:sortTags	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
s:sort_by	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
s:sorted_items	plugged\\ale\\autoload\\ale\\pattern_options.vim	/^let s:sorted_items = []$/;"	v
s:sortedlist	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^let s:sortedlist = {$/;"	v
s:sortedlist.add	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^function! s:sortedlist.add(x)$/;"	f
s:sortedlist.as_list	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^function! s:sortedlist.as_list()$/;"	f
s:sortedlist.clear	plugged\\lexima.vim\\autoload\\lexima\\sortedlist.vim	/^function! s:sortedlist.clear()$/;"	f
s:source	autoload\\plug.vim	/^function! s:source(from, ...)$/;"	f
s:source	plugged\\ultisnips\\autoload\\neocomplete\\sources\\ultisnips.vim	/^let s:source = {$/;"	v
s:source.gather_candidates	plugged\\ultisnips\\autoload\\neocomplete\\sources\\ultisnips.vim	/^function! s:source.gather_candidates(context)$/;"	f
s:span	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:span(f, xs) abort$/;"	f
s:spawn	autoload\\plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split3	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
s:split_by_displaywidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
s:split_leftright	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
s:split_rtp	autoload\\plug.vim	/^function! s:split_rtp()$/;"	f
s:stack	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^let s:stack = {$/;"	v
s:stack._fire_change_event	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack._fire_change_event()$/;"	f
s:stack.count	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack.count()$/;"	f
s:stack.is_empty	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack.is_empty()$/;"	f
s:stack.peek	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack.peek(...)$/;"	f
s:stack.pop	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack.pop(n)$/;"	f
s:stack.pop_all	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack.pop_all()$/;"	f
s:stack.push	plugged\\lexima.vim\\autoload\\lexima\\charstack.vim	/^function! s:stack.push(str)$/;"	f
s:status	autoload\\plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload\\plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload\\plug.vim	/^function! s:status_update() range$/;"	f
s:statusline_in_use	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:stopline	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:stopline = get(g:, 'matchup_delim_stopline', 1500)$/;"	v
s:str	plugged\\tagbar\\autoload\\tagbar\\prototypes\\normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
s:strchars	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^  function! s:strchars(str) abort$/;"	f
s:strfmt	plugged\\tagbar\\autoload\\tagbar\\prototypes\\normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strfmt	plugged\\tagbar\\autoload\\tagbar\\prototypes\\pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strip_whitespace_pattern	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^let s:strip_whitespace_pattern = s:eol_whitespace_pattern$/;"	v
s:strwidth	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:strwidth(str)$/;"	f
s:strwidthpart	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart_reverse	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:strwidthpart_reverse	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:sub	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:sublist	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
s:sublist7071	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
s:substitute_last	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
s:substitute_path_separator	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
s:sw	plugged\\vim-javascript\\indent\\javascript.vim	/^  function s:sw()$/;"	f
s:switch_in	autoload\\plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload\\plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	autoload\\plug.vim	/^function! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\changes.vim	/^fu! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\line.vim	/^fu! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\quickfix.vim	/^fu! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\tag.vim	/^fu! s:syntax()$/;"	f
s:syntax	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^fu! s:syntax()$/;"	f
s:system	autoload\\plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload\\plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tabContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:tabContent(clv)$/;"	f
s:tabHelp	plugged\\supertab\\plugin\\supertab.vim	/^  let s:tabHelp =$/;"	v
s:tail	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:tail()$/;"	f
s:tail1	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:tail1 = 'except\\|finally'$/;"	v
s:tail1	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:tail1 = s:tail1 . '\\|elif\\|else'$/;"	v
s:tail2	plugged\\vim-python-match\\ftplugin\\python_match.vim	/^let s:tail2 = 'break\\|continue'$/;"	v
s:take_while	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:take_while(f, xs) abort$/;"	f
s:temp_dir	plugged\\ale\\autoload\\ale\\handlers\\haskell.vim	/^let s:temp_dir = fnamemodify(ale#util#Tempname(), ':h')$/;"	v
s:temp_dir	plugged\\ale\\autoload\\ale\\path.vim	/^let s:temp_dir = ale#path#Simplify(fnamemodify(ale#util#Tempname(), ':h'))$/;"	v
s:temp_regex_prefix	plugged\\ale\\autoload\\ale\\handlers\\haskell.vim	/^let s:temp_regex_prefix =$/;"	v
s:test	plugged\\vim-matchup\\test\\issues\\15\\gc.vim	/^function! s:test()$/;"	f
s:test	plugged\\vim-matchup\\test\\issues\\16\\any.vim	/^function! s:test()$/;"	f
s:text	plugged\\ctrlp.vim\\autoload\\ctrlp\\undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:textBuffer	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\help.vim	/^let s:textBuffer    = []$/;"	v
s:text_obj_init_module	plugged\\vim-matchup\\autoload\\matchup.vim	/^function! s:text_obj_init_module() " {{{1$/;"	f
s:textdialog	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
s:tick	autoload\\plug.vim	/^function! s:tick()$/;"	f
s:time_start	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let s:time_start = {}$/;"	v
s:timeout	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let s:timeout = 0$/;"	v
s:timeout_enabled	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let s:timeout_enabled = 0$/;"	v
s:timeout_pulse_time	plugged\\vim-matchup\\autoload\\matchup\\perf.vim	/^let s:timeout_pulse_time = reltime()$/;"	v
s:timer_args	plugged\\ale\\autoload\\ale\\list.vim	/^    let s:timer_args = {}$/;"	v
s:timer_callback	plugged\\vim-matchup\\autoload\\matchup\\matchparen.vim	/^function! s:timer_callback(win_id, timer_id) abort " {{{1$/;"	f
s:timer_id	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:timer_id = -1$/;"	v
s:to_a	autoload\\plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload\\plug.vim	/^function! s:to_s(v)$/;"	f
s:toggleAllMode	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\buffer.vim	/^function! s:toggleAllMode()$/;"	f
s:toggleFold	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
s:toggleIgnoreFilter	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
s:toggleListView	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! s:toggleListView(k, mode)$/;"	f
s:toggleListViewAndSearch	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\keys\\common.vim	/^function! s:toggleListViewAndSearch(k, mode)$/;"	f
s:toggleShowBookmarks	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
s:toggleShowFiles	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
s:toggleShowHidden	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
s:toggleZoom	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:toggleZoom()$/;"	f
s:trace	plugged\\ctrlp.vim\\autoload\\ctrlp\\autoignore.vim	/^function! s:trace(message) abort$/;"	f
s:tree_up_dir_line	plugged\\nerdtree\\syntax\\nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trigger_character_map	plugged\\ale\\autoload\\ale\\completion.vim	/^let s:trigger_character_map = {$/;"	v
s:triggers	autoload\\plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload\\plug.vim	/^function! s:trim(str)$/;"	f
s:trim	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:trim(str) abort$/;"	f
s:trim	plugged\\vim-editorconfig\\autoload\\editorconfig.vim	/^function! s:trim(lines) abort "{{{$/;"	f
s:truncate	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate_skipping	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:truncate_skipping	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:type_init_done	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:types	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^let s:types = ['fil', 'buf', 'mru']$/;"	v
s:types	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^let s:types = {$/;"	v
s:types	plugged\\supertab\\plugin\\supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	plugged\\supertab\\plugin\\supertab.vim	/^  let s:types =$/;"	v
s:types	plugged\\vim-matchup\\autoload\\matchup\\delim.vim	/^let s:types = {$/;"	v
s:uniq	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq_by	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
s:unite_source	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^let s:unite_source = {$/;"	v
s:unite_source	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^let s:unite_source.action_table.expand = {$/;"	v
s:unite_source	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^let s:unite_source.action_table.preview = {$/;"	v
s:unite_source.action_table.expand.func	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^function! s:unite_source.action_table.expand.func(candidate)$/;"	f
s:unite_source.action_table.preview.func	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^function! s:unite_source.action_table.preview.func(candidate)$/;"	f
s:unite_source.gather_candidates	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^function! s:unite_source.gather_candidates(args, context)$/;"	f
s:unite_source.get_longest_snippet_len	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^function! s:unite_source.get_longest_snippet_len(snippet_list)$/;"	f
s:unite_source.hooks.on_syntax	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^function! s:unite_source.hooks.on_syntax(args, context) abort$/;"	f
s:unlet_for	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! s:unlet_for(files) abort$/;"	f
s:unload	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! s:unload() abort$/;"	f
s:unmarksigns	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
s:unshift	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:unshift(list, val) abort$/;"	f
s:upDirCurrentRootClosed	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
s:upDirCurrentRootOpen	plugged\\nerdtree\\autoload\\nerdtree\\ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
s:update	autoload\\plug.vim	/^function! s:update(force, names)$/;"	f
s:updateFileList	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\files.vim	/^function! s:updateFileList(path, newPath)$/;"	f
s:updateSearchResults	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\search.vim	/^let s:updateSearchResults = 0$/;"	v
s:update_finish	autoload\\plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload\\plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	autoload\\plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	autoload\\plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	autoload\\plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload\\plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload\\plug.vim	/^function! s:upgrade_specs()$/;"	f
s:usrign	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
s:vacantdict	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
s:validfile	plugged\\ctrlp.vim\\autoload\\ctrlp\\buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
s:version_cache	plugged\\ale\\autoload\\ale\\semver.vim	/^let s:version_cache = {}$/;"	v
s:version_requirement	autoload\\plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	autoload\\plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_quitting	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:vimrc	backup\\_vimrc	/^let s:vimrc = $APPDATA . '\/Vimfiles\/_vimrc'$/;"	v
s:visibility_symbols	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:vopen_warning	autoload\\pathogen.vim	/^let s:vopen_warning = 0$/;"	v
s:walker	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
s:warn	autoload\\pathogen.vim	/^function! s:warn(msg) abort$/;"	f
s:warn	autoload\\plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warning	plugged\\tagbar\\autoload\\tagbar.vim	/^function! s:warning(msg) abort$/;"	f
s:warnings	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:warnings = {$/;"	v
s:wcswidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wcswidth	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:whitespace_chars	plugged\\vim-better-whitespace\\plugin\\better-whitespace.vim	/^let s:whitespace_chars='\\u0020\\u00a0\\u1680\\u180e\\u2000-\\u200b\\u202f\\u205f\\u3000\\ufeff'$/;"	v
s:wig_cond	plugged\\ctrlp.vim\\autoload\\ctrlp\\utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:window_expanded	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:window_pos = {$/;"	v
s:winrestcmd	plugged\\tagbar\\autoload\\tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:with_cd	autoload\\plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:with_index	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:with_index(list, ...) abort$/;"	f
s:word_regex_list	plugged\\ale\\ale_linters\\vim\\vint.vim	/^let s:word_regex_list = [$/;"	v
s:workspaceListContent	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\engine.vim	/^function! s:workspaceListContent(clv)$/;"	f
s:workspaces	plugged\\vim-ctrlspace\\autoload\\ctrlspace\\workspaces.vim	/^let s:workspaces = []$/;"	v
s:wrap	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\String.vim	/^function! s:wrap(str,...) abort$/;"	f
s:writecache	plugged\\ctrlp.vim\\autoload\\ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
s:writecache	plugged\\ctrlp.vim\\autoload\\ctrlp\\bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
s:z	plugged\\vim-javascript\\indent\\javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:zip	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:zip(...) abort$/;"	f
s:zip_fill	plugged\\lexima.vim\\autoload\\vital\\_lexima\\Data\\List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
saveToCache	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def saveToCache(self, buf_name_list):$/;"	m	class:Mru
save_mark	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def save_mark(name):$/;"	f
score	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    float score;$/;"	m	struct:HighlightGroup	typeref:typename:float	file:
score	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    float score;$/;"	m	struct:ValueElements	typeref:typename:float	file:
script	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^                $script = preg_replace('{\\\\\\\\@\\d+}', '\\@', $script);$/;"	v
script	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^        $script = $captures['script'];$/;"	v
scriptease	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^augroup scriptease$/;"	a
scriptease#capture	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#capture(excmd) abort$/;"	f
scriptease#cfile	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#cfile() abort$/;"	f
scriptease#complete	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#complete(A,L,P) abort$/;"	f
scriptease#disarm	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#disarm(file) abort$/;"	f
scriptease#disarm_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#disarm_command(bang, ...) abort$/;"	f
scriptease#dump	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#dump(object, ...) abort$/;"	f
scriptease#filterop	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#filterop(...) abort$/;"	f
scriptease#helptopic	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#helptopic() abort$/;"	f
scriptease#includeexpr	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#includeexpr(file) abort$/;"	f
scriptease#locate	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#locate(path) abort$/;"	f
scriptease#messages_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#messages_command(bang) abort$/;"	f
scriptease#open_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#open_command(count,cmd,file,lcd) abort$/;"	f
scriptease#pp_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#pp_command(bang, lnum, value) abort$/;"	f
scriptease#ppmsg_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#ppmsg_command(bang, count, value) abort$/;"	f
scriptease#runtime_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#runtime_command(bang, ...) abort$/;"	f
scriptease#scriptid	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#scriptid(filename) abort$/;"	f
scriptease#scriptname	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#scriptname(file) abort$/;"	f
scriptease#scriptnames_qflist	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#scriptnames_qflist() abort$/;"	f
scriptease#setup_help	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#setup_help() abort$/;"	f
scriptease#setup_vim	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#setup_vim() abort$/;"	f
scriptease#synnames	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#synnames(...) abort$/;"	f
scriptease#synnames_map	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#synnames_map(count) abort$/;"	f
scriptease#time_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#time_command(cmd, count) abort$/;"	f
scriptease#verbose_command	plugged\\vim-scriptease\\autoload\\scriptease.vim	/^function! scriptease#verbose_command(level, excmd) abort$/;"	f
scriptease.vim	plugged\\vim-scriptease\\README.markdown	/^# scriptease.vim$/;"	c
scriptease_projectionist	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^augroup scriptease_projectionist$/;"	a
second	plugged\\LeaderF\\install.bat	/^:second$/;"	l
select	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def select(start, end):$/;"	f
selectAll	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def selectAll(self):$/;"	m	class:Manager
selectMulti	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def selectMulti(self):$/;"	m	class:Manager
select_next_tab	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def select_next_tab(self, backwards=False):$/;"	m	class:SnippetInstance
selfExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\selfExpl.py	/^selfExplManager = SelfExplManager()$/;"	v
selfs	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^$selfs = $b3->return_self_array();$/;"	v
semi	plugged\\vim-snippets\\pythonx\\javascript_snippets.py	/^def semi(snip):$/;"	f
semicolonAtEndOfThisObject	plugged\\vim-json\\json-test.json	/^	"semicolonAtEndOfThisObject":"trailingComma",$/;"	s
send	plugged\\ultisnips\\test\\vim_interface.py	/^    def send(self, keys):$/;"	m	class:VimInterfaceWindows
send_to_terminal	plugged\\ultisnips\\test\\vim_interface.py	/^    def send_to_terminal(self, s):$/;"	m	class:VimInterface
send_to_terminal	plugged\\ultisnips\\test\\vim_interface.py	/^    def send_to_terminal(self, s):$/;"	m	class:VimInterfaceTmux
send_to_vim	plugged\\ultisnips\\test\\vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterface
send_to_vim	plugged\\ultisnips\\test\\vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterfaceTmux
send_to_vim	plugged\\ultisnips\\test\\vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterfaceTmuxNeovim
session	plugged\\php.vim\\scripts\\syntax.ini	/^session = yes$/;"	k	section:extensions
set	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def set(self, line, column):$/;"	m	class:_SnippetUtilCursor
setBuffer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def setBuffer(self, content):$/;"	m	class:LfInstance
setBufferTimestamp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mru.py	/^    def setBufferTimestamp(self, buf_number):$/;"	m	class:Mru
setConfig	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def setConfig(self, category, config):$/;"	m	class:AnyExplorer
setContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def setContent(self, content):$/;"	m	class:Explorer
setContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def setContent(self, content):$/;"	m	class:Explorer
setContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def setContent(self, content):$/;"	m	class:FileExplorer
setContent	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def setContent(self, content):$/;"	m	class:Manager
setCurrentMode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def setCurrentMode(self, mode):$/;"	m	class:LfCli
setNameOnlyFeature	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def setNameOnlyFeature(self, state):$/;"	m	class:LfCli
setPattern	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def setPattern(self, pattern):$/;"	m	class:LfCli
setRefineFeature	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\cli.py	/^    def setRefineFeature(self, state):$/;"	m	class:LfCli
setStatus	autoload\\sftpsync\\python\\sftpsync.py	/^	def setStatus(self, status):$/;"	m	class:SftpSync
setStlCategory	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def setStlCategory(self, category):$/;"	m	class:LfInstance
setStlCwd	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def setStlCwd(self, cwd):$/;"	m	class:LfInstance
setStlMode	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def setStlMode(self, mode):$/;"	m	class:LfInstance
setStlTotal	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def setStlTotal(self, total):$/;"	m	class:LfInstance
setUp	plugged\\ultisnips\\test\\vim_test_case.py	/^    def setUp(self):$/;"	m	class:VimTestCase
set_cursor_from_pos	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def set_cursor_from_pos(pos):$/;"	f
set_mark_from_pos	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def set_mark_from_pos(name, pos):$/;"	f
set_precedence	plugged\\supertab\\ftplugin\\html.vim	/^        let set_precedence = !eclim#util#ListContains(natures, 'php')$/;"	v
set_precedence	plugged\\supertab\\ftplugin\\html.vim	/^  let set_precedence = 1$/;"	v
setup_other_plugins	plugged\\ultisnips\\test_all.py	/^def setup_other_plugins(all_plugins):$/;"	f
sftpSync	autoload\\sftpsync\\python\\sftpsync.py	/^sftpSync = SftpSync()$/;"	v
sftpsync	plugin\\sftpsync_conf.vim	/^augroup sftpsync$/;"	a
sftpsync#Cycle	autoload\\sftpsync.vim	/^function! sftpsync#Cycle(targets)$/;"	f
sftpsync#Init	autoload\\sftpsync.vim	/^function! sftpsync#Init(target, once)$/;"	f
sftpsync#PurgeConnections	autoload\\sftpsync.vim	/^function! sftpsync#PurgeConnections(timer)$/;"	f
sftpsync#Upload	autoload\\sftpsync.vim	/^function! sftpsync#Upload(...)$/;"	f
shell_in_repro	plugged\\ultisnips\\Makefile	/^shell_in_repro:$/;"	t
shift	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def shift(self, amount=1):$/;"	m	class:SnippetUtil
shmop	plugged\\php.vim\\scripts\\syntax.ini	/^shmop = no$/;"	k	section:extensions
showRelativePath	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^def showRelativePath(func):$/;"	f
silent_call	plugged\\ultisnips\\test\\vim_interface.py	/^def silent_call(cmd):$/;"	f
simplexml	plugged\\php.vim\\scripts\\syntax.ini	/^simplexml = yes$/;"	k	section:extensions
size	plugged\\vim-json\\json-test.json	/^        "size": 36,$/;"	n	object:widget.text
skip_if	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
skip_if	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanMatchContext
skip_if	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
skip_if	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
skip_if	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    skip_if = lambda self: 'Vim older than 7.4.214 is required' \\$/;"	m	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
skip_if	plugged\\ultisnips\\test\\test_Chars.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:_UmlautsBase
skip_if	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    skip_if = lambda self: 'Bug in Neovim.' \\$/;"	m	class:ContextSnippets_ReportErrorOnIndexOutOfRange
skip_if	plugged\\ultisnips\\test\\test_Editing.py	/^    skip_if = check_required_vim_version$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
skip_if	plugged\\ultisnips\\test\\test_Editing.py	/^    skip_if = check_required_vim_version$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
skip_if	plugged\\ultisnips\\test\\test_Format.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_InDefValue_Leave
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_InDefValue_Overwrite
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_ShebangPython
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_SimpleExample
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TestEscapedChars_Overwrite
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TextInNextLine
skip_if	plugged\\ultisnips\\test\\test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_WithUmlauts
skip_if	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
skip_if	plugged\\ultisnips\\test\\test_Transformation.py	/^    skip_if = lambda self: no_unidecode_available()$/;"	m	class:Transformation_LowerCaseAsciiResult
skip_if	plugged\\ultisnips\\test\\test_Transformation.py	/^    skip_if = lambda self: no_unidecode_available()$/;"	m	class:Transformation_SimpleCaseAsciiResult
skip_if	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TestLangmapWithUtf8_ExpectCorrectResult
skip_if	plugged\\ultisnips\\test\\vim_test_case.py	/^    skip_if = lambda self: None$/;"	m	class:VimTestCase
sleeptime	plugged\\ultisnips\\test\\vim_test_case.py	/^    sleeptime = 0.00$/;"	v	class:VimTestCase
snipMate & UltiSnip Snippets	plugged\\vim-snippets\\README.md	/^snipMate & UltiSnip Snippets$/;"	c
snipMate_Disabled	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_Disabled(_VimTest):$/;"	c
snipMate_EmptyLinesContinueSnippets	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_EmptyLinesContinueSnippets(_VimTest):$/;"	c
snipMate_Extends	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_Extends(_VimTest):$/;"	c
snipMate_Interpolation	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_Interpolation(_VimTest):$/;"	c
snipMate_InterpolationWithSystem	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_InterpolationWithSystem(_VimTest):$/;"	c
snipMate_Issue658	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_Issue658(_VimTest):$/;"	c
snipMate_MultiMatches	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_MultiMatches(_VimTest):$/;"	c
snipMate_NoNestedTabstops	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_NoNestedTabstops(_VimTest):$/;"	c
snipMate_OtherFiletype	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_OtherFiletype(_VimTest):$/;"	c
snipMate_OverwrittenByRegExpTrigger	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_OverwrittenByRegExpTrigger(_VimTest):$/;"	c
snipMate_SimpleSnippet	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_SimpleSnippet(_VimTest):$/;"	c
snipMate_SimpleSnippetInSnippetFile	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_SimpleSnippetInSnippetFile(_VimTest):$/;"	c
snipMate_SimpleSnippetSubDirectory	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_SimpleSnippetSubDirectory(_VimTest):$/;"	c
snipMate_TestMirrors	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_TestMirrors(_VimTest):$/;"	c
snipMate_TestMirrorsInPlaceholders	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_TestMirrorsInPlaceholders(_VimTest):$/;"	c
snipMate_TestMirrorsInPlaceholders_Overwrite	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_TestMirrorsInPlaceholders_Overwrite(_VimTest):$/;"	c
snipMate_TestNoBraceTabstops	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_TestNoBraceTabstops(_VimTest):$/;"	c
snipMate_TestNoBraceTabstopsAndMirrors	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_TestNoBraceTabstopsAndMirrors(_VimTest):$/;"	c
snipMate_Visual_Simple	plugged\\ultisnips\\test\\test_SnipMate.py	/^class snipMate_Visual_Simple(_VimTest):$/;"	c
snippet_end	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def snippet_end(self):$/;"	m	class:SnippetUtil
snippet_start	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def snippet_start(self):$/;"	m	class:SnippetUtil
snippets	plugged\\ultisnips\\test\\test_Autocommands.py	/^    snippets = ('test', '[ ${1:foo} ]')$/;"	v	class:Autocommands
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', """Hello \\t ${1:default}\\n$2""")$/;"	v	class:LeaveTrailingWhitespace
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', """Hello\\t ${1:default}\\n$2""", '', 's')$/;"	v	class:RemoveTrailingWhitespace
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', """next line\\n\\nshould be empty""", '', '')$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', """next line\\n\\nshould be empty""", '', 'm')$/;"	v	class:TrimSpacesAtEndOfLines
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_EndNL
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_EndStartNL
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_JustNL
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_StartNL
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:_MultiLineDefault
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('trig', 'success')$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('trig', 'success')$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü $1')$/;"	v	class:Snippet_With_Umlauts_Mirrors
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü ${2:hello}ßß\\nüüüü')$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü ${2:hello}ßß\\nüüüü')$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü ${2:hello}ßß\\nüüüü')$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü `!p snip.rv = len(t[1])*"a"`')$/;"	v	class:Snippet_With_Umlauts_Python
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = ('ül', 'üüüüüßßßß')$/;"	v	class:Snippet_With_Umlauts_TypeOn
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = _snip_quote("'")$/;"	v	class:Snippet_With_SingleQuote
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = _snip_quote("'")$/;"	v	class:Snippet_With_SingleQuote_List
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = _snip_quote('"')$/;"	v	class:Snippet_With_DoubleQuote
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = _snip_quote('"')$/;"	v	class:Snippet_With_DoubleQuote_List
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = _snip_quote('ü')$/;"	v	class:Snippet_With_Umlauts
snippets	plugged\\ultisnips\\test\\test_Chars.py	/^    snippets = _snip_quote('ü')$/;"	v	class:Snippet_With_Umlauts_List
snippets	plugged\\ultisnips\\test\\test_Completion.py	/^    snippets = ('test', '$1 $2')$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
snippets	plugged\\ultisnips\\test\\test_Completion.py	/^    snippets = ('test', '$1 $2')$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
snippets	plugged\\ultisnips\\test\\test_Completion.py	/^    snippets = ('test', '$1 ${1:blah}')$/;"	v	class:Completion_SimpleExample_ECR
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ($/;"	v	class:JumpForward_DefSnippet
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('i', 'if $1:\\n\\t$2')$/;"	v	class:Undo_ChangesInPlaceholder
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('i', 'if $1:\\n\\t$2')$/;"	v	class:Undo_CompletelyUndoSnippet
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('i', 'if:\\n\\t$1')$/;"	v	class:Undo_RemoveOneSnippetByTime
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('i', 'if:\\n\\t$1')$/;"	v	class:Undo_RemoveOneSnippetByTime2
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '$1 Hello\\naaa ${1} bbb\\nWorld')$/;"	v	class:Undo_RemoveEditInTabstop
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '$1hello\\nnice\\nworld')$/;"	v	class:DeleteLastTwoLinesInSnippet
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '${1:hello} $1')$/;"	v	class:DeleteSnippetInsertion0
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '${1:hi}\\n${2:world}\\nend')$/;"	v	class:DeleteCurrentTabStop2_JumpBack
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '${1:hi}\\n${2:world}\\nend')$/;"	v	class:DeleteCurrentTabStop3_JumpAround
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '${1:hi}\\nend')$/;"	v	class:DeleteCurrentTabStop1_JumpBack
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '${1:one}(${2:xxx})${3:three}')$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', '''\\$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', 'A${1:C} ${0:DDD}', 'This is Case 1')$/;"	v	class:Backspace_TabStop_Zero
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', 'A${1:C} ${2:DDD}', 'This is Case 1')$/;"	v	class:Backspace_TabStop_NotZero
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', 'Hello\\n${1:Hello}World')$/;"	v	class:Undo_RemoveWholeSnippet
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', 'Hello\\naaa ${1} bbb\\nWorld')$/;"	v	class:Undo_RemoveMultilineSnippet
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', r"$1${1\/(.*)\/(?0::.)\/}")$/;"	v	class:DeleteSnippetInsertion1
snippets	plugged\\ultisnips\\test\\test_Editing.py	/^    snippets = ('test', r"if $1: $2")$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
snippets	plugged\\ultisnips\\test\\test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt!')$/;"	v	class:_SimpleExpands
snippets	plugged\\ultisnips\\test\\test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt!\\nUnd Wie gehts')$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt!\\nUnd Wie gehts')$/;"	v	class:MultilineExpand_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt\\n')$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Expand.py	/^    snippets = ('test', 'SimpleText')$/;"	v	class:ExitSnippetModeAfterTabstopZero
snippets	plugged\\ultisnips\\test\\test_Fixes.py	/^    snippets = ('pd', 'padding: ${1:0}px')$/;"	v	class:VirtualEdit
snippets	plugged\\ultisnips\\test\\test_Fixes.py	/^    snippets = ('test', '${1:hello} ${2:world} ${0}')$/;"	v	class:RetainsTheUnnamedRegister
snippets	plugged\\ultisnips\\test\\test_Fixes.py	/^    snippets = ('test', '${1:hello} ${2:world} ${0}')$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
snippets	plugged\\ultisnips\\test\\test_Fixes.py	/^    snippets = ('test', '${2:#2} ${1:#1};$0')$/;"	v	class:Bug1251994
snippets	plugged\\ultisnips\\test\\test_Fixes.py	/^    snippets = ('test', '\\t${1}${0}')$/;"	v	class:ShiftWidthZero
snippets	plugged\\ultisnips\\test\\test_Fixes.py	/^    snippets = ('test', 'hello')$/;"	v	class:NonUnicodeDataInUnnamedRegister
snippets	plugged\\ultisnips\\test\\test_Folding.py	/^    snippets = ('fold',$/;"	v	class:FoldOverwrite_Simple_ECR
snippets	plugged\\ultisnips\\test\\test_Folding.py	/^    snippets = ('fold',$/;"	v	class:Fold_DeleteMiddleLine_ECR
snippets	plugged\\ultisnips\\test\\test_Folding.py	/^    snippets = ('test', r"""Hello {{{$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
snippets	plugged\\ultisnips\\test\\test_Folding.py	/^    snippets = ('test', r"""package ${1:`!v printf('c%02d', 3)`};$/;"	v	class:PerlSyntaxFold
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ($/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('m', '\\tBlaahblah \\t\\t  ')$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', '${1:longer expand}\\n$1\\n$0', '', 'f')$/;"	v	class:FOSimple_Break_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', '${1:longer expand}after\\nstart$1end')$/;"	v	class:FOTextAfter_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', '${1:longer expand}after\\nstart$1end')$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', 'Before${1:longer expand}After\\nstart$1end')$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', 'for\\n    blah')$/;"	v	class:ProperIndenting_SimpleCase_ECR
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', 'hui')$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
snippets	plugged\\ultisnips\\test\\test_Format.py	/^    snippets = ('test', 'hui')$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_CanOverwriteTabstop
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_OptExists
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_OptNoExists
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_TrickyReferences
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ($/;"	v	class:Python_WeirdScoping_Error
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """${1:hi} `!p res = t[1]+".blah"` End""")$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """${1:hi} `!p snip.rv = t[1]+".blah"` End""")$/;"	v	class:PythonCode_ReferencePlaceholder
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """${1\/.+\/egal\/m} ${1:`!p$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """${1\/.+\/egal\/m} ${1:`!p$/;"	v	class:PythonCode_TransformedBeforeMultiLine
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """Hallo ${1:now `#!\/usr\/bin\/env %s$/;"	v	class:TabStop_Shell_ShebangPython
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """`!p res = len(t[1])*"#"`\\n${1:some text}""")$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """`!p snip.rv = len(t[1])*"#"`\\n${1:some text}""")$/;"	v	class:PythonCode_ReferencePlaceholderBefore
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi `!p res = "Hallo"` End""")$/;"	v	class:PythonCodeOld_SimpleExample
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi `!p res = "Old"$/;"	v	class:PythonCode_UseNewOverOld
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi `!p snip.rv = "Hallo"` End""")$/;"	v	class:PythonCode_SimpleExample
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi `!p snip.rv = "Hallo1"$/;"	v	class:PythonCode_MultiAppend
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi `!p snip.rv = "Hallo1"$/;"	v	class:PythonCode_SimpleAppend
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi `!v indent(".")` End""")$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi$/;"	v	class:PythonCode_MultiAppendSimpleIndent
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """hi`!p snip.rv = ""`End""")$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """start `!p a = 1$/;"	v	class:PythonCodeOld_IndentedMultiline
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', """start `!p a = 1$/;"	v	class:PythonCode_MultilineIndented
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'Hallo ${1:now `echo fromecho`} end')$/;"	v	class:TabStop_Shell_InDefValue_Leave
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'Hallo ${1:now `echo fromecho`} end')$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'h`!p snip.rv = snip.v.mode + snip.v.text`b')$/;"	v	class:PythonVisual_LineSelect_Simple
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'h`!p snip.rv = snip.v.mode + snip.v.text`b')$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'h`!p snip.rv = snip.v.mode + snip.v.text`b')$/;"	v	class:PythonVisual_SelectOneWord
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'hi `echo hallo` you!')$/;"	v	class:TabStop_Shell_SimpleExample
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'hi `echo hallo`\\nWeiter')$/;"	v	class:TabStop_Shell_TextInNextLine
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', 'hi `echo höüäh` you!')$/;"	v	class:TabStop_Shell_WithUmlauts
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""`echo \\`echo "\\\\$hi"\\``""")$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""`hi="blah"; echo \\`echo "$hi"\\``""")$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi `!p a = "test"$/;"	v	class:PythonCode_Locals
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi `!p$/;"	v	class:PythonCode_IndentProblem
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_IndentEtSw
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_IndentEtSwOffset
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_IndentNoetSwTs
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_MultiAppendShift
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_MultiAppendShiftMethods
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_ResetIndent
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_SimpleMkline
snippets	plugged\\ultisnips\\test\\test_Interpolation.py	/^    snippets = ('test', r"""hi`!p snip.rv = "a" * 100`end""")$/;"	v	class:PythonCode_LongerTextThanSource_Chars
snippets	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    snippets = (('testblah', 'BLAAH', 'Say BLAH'),$/;"	v	class:_ListAllSnippets
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = 'test', 'welt${1:welt${2:welt}welt} $2'$/;"	v	class:Mirror_TestKillTabstop_Kill
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ($/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '    $1\\n$1\\na$1b\\n$1\\ntest $1 mich')$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 $1 $1 $1')$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 $1 $1 $1')$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 $1')$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 $1')$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 ${1:replace me}')$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 ${1:replace me}')$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 ${1:this is it} $1')$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 ${1:this is it} $1')$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1 Hinten\\n$1')$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n$1 Hinten')$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n$1')$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n$1')$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n$1')$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n$1\\n$1')$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n$1\\n$1')$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n${1:sometext}')$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\nVorne $1 Hinten')$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\nVorne $1')$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', '$1\\n\\n$1\\n\\n$1')$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ObenVorne $1 ObenHinten\\nVorne $1 Hinten')$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'Vorne $1 Hinten\\n$1')$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'Vorne $1\\n$1')$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1.h $1.c}\\ntest $1')$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1.h}')$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1}')$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1}')$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:snip} ${3:$1.h $2}')$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:snip} ${3:$1.h $2}')$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha $5 ${1:blub} $4 $0 ${2:$1.h} $1 $3 ${4:More}')$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha ${1:blub} ${2:$1.h}')$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha ${1:blub} ${2:$1}')$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha ${1:default value} $1\\nanother: $1 mirror')$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha ${1:default value} $1\\nanother: $1 mirror')$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha ${1:defa}\\n$1')$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Mirror.py	/^    snippets = ('test', 'ha ${1:defa}\\n$1')$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('<trh', '<tr>\\n\\t<th>$1<\/th>\\n\\t$2\\n<\/tr>\\n$3')$/;"	v	class:CursorMovement_BS_InEditMode
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', '${1:Hi}\\n${2:blub}')$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', '${1:Hi}\\n${2:blub}')$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', '${1:Some}')$/;"	v	class:IMMoving_CursorsKeys_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"$1 ${1:a tab}")$/;"	v	class:CursorMovement_Multiline_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"$1 ${1:a tab}")$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"$1 ${2:a tab} ${1:Tab}")$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"$1 ${2:a tab} ${1:Tab}")$/;"	v	class:IMMoving_NoExiting_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"$1 ${2:blub} ${1:Tab}")$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"${1:Hi} ${2:blub}")$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
snippets	plugged\\ultisnips\\test\\test_Movement.py	/^    snippets = ('test', r"${1:Hi} ${2:blub}")$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
snippets	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    snippets = ($/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
snippets	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    snippets = (('test', 'Case1', 'This is Case 1'),$/;"	v	class:_MultipleMatches
snippets	plugged\\ultisnips\\test\\test_Plugin.py	/^    snippets = ('long', 'Hello', '', 'w')$/;"	v	class:Plugin_SuperTab_SimpleTest
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_InnerWOTabStop_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_LeavingInnerInner_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_LeavingInner_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_MirroredZeroTS_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_BackspaceZero_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_TypeInZero2_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_TypeInZero_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', 'M START\\n    $0\\nM END')$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', 'M START\\n    $1\\nM END -> $0')$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', 'M START\\n$0\\nM END')$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', 'M START\\n$0\\nM END')$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', 'M START\\n$0\\nM END')$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Selection.py	/^    snippets = ('for',$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
snippets	plugged\\ultisnips\\test\\test_Selection.py	/^    snippets = ('for',$/;"	v	class:OldSelection_RealWorldCase_Test
snippets	plugged\\ultisnips\\test\\test_Selection.py	/^    snippets = ('test', '${1:World}')$/;"	v	class:_SelectModeMappings
snippets	plugged\\ultisnips\\test\\test_Selection.py	/^    snippets = ('test', 'h${1:blah}w $1')$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
snippets	plugged\\ultisnips\\test\\test_Selection.py	/^    snippets = ('test', 'h${1:blah}w $1')$/;"	v	class:OldSelection_SimpleTabstop_Test
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ($/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ($/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ($/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ($/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('((?<=\\W)|^)(\\.)', 'self.', '', 'r')$/;"	v	class:_Regex_Self
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('(.*test)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('(test *)+', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_Multiple
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('(test)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_Expand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('(test)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('(test.*)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('hi',$/;"	v	class:_TabExpand_RealWorld
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test ', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_WithSpace
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test it', 'Expand me!', '', 'b')$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test it', 'Expand me!', '', 'b')$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test it', 'Expand me!', '', 'b')$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test me', 'Expand me!')$/;"	v	class:MultiWordSnippet_Simple
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test', 'Expand me!', '', 'b')$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test', 'Expand me!', '', 'b')$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test', 'Expand me!', '', 'b')$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = ('test', '\\t\\tExpand\\tme!\\t', '', 't')$/;"	v	class:_No_Tab_Expand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test it', 'Expand me!', '', 'i'), )$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test it', 'Expand me!', '', 'i'), )$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test it', 'Expand me!', '', 'w'), )$/;"	v	class:_MultiWord_SnippetOptions_ExpandWordSnippets
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'w'), )$/;"	v	class:_SnippetOptions_ExpandWordSnippets
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (r"([abc]+)([def]+)", r"""`!p m = match$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
snippets	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    snippets = (r"cabfed", r"""`!p snip.rv =  match or "No match"`""")$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteExisting
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
snippets	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('echo', '$0 run')$/;"	v	class:TabStop_Exit_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('echo', 'echo ${1:Hallo}')$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'Hallo ${1:WELT} ups')$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo $0 $1')$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo $0 a small feed')$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo $0\\nnice $1 work\\n$3 $2\\nSeem to work')$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo $2 $1')$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo $2 $1')$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo ${0:End} ${1:Beginning}')$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo ${0:End} a small feed')$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo ${1:End} ${0:Beginning}')$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo ${2:End} mitte ${1:Beginning}')$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'hallo ${2:End} mitte${1:Beginning}')$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('hallo', 'nothing ${1:i} hups')$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $3  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $3 $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $3 $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """Test: ${1:snippet start\\nNested tabstop: $0\\nsnippet end}\\nTrailin/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """Test: ${1:snippet start\\nNested tabstop: $0\\nsnippet end}\\nTrailin/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', "$1: ${1:'${2:second}'} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', "$1: ${1:'${2:second}'} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', "$2: ${2:'${1:second}'} $1")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', '[ $1$2 ] $1')$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', '\\\\${1:literal}')$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', '\\n\\\\${1:literal}')$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'each_byte { |${1:byte}| $0 }')$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi $1 $2 ${1:first line\\nsecond line} ${2:Hi} world')$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi $1 ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi $1 ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_Leave
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_Overwrite
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second ${3:third}}} $4')$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second ${3:third}}} $4')$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second ${3:third}}} $4')$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second}} $2')$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second}} $2')$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second}} $2')$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'snip $1')$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'snip ${1:default}')$/;"	v	class:TabStopEscapingWhenSelected_ECR
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 'snip ${1:i}')$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', 't$1t${2: }t{\\n\\t$0\\n}')$/;"	v	class:TabStop_CROnlyOnSelectedNear
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r":latex:\\`$1\\`$0")$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"These are two backslashes \\\\\\\\ done")$/;"	v	class:TabStop_EscapingChars_Backslash3
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"This \\ is a backslash!")$/;"	v	class:TabStop_EscapingChars_Backslash
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"This is a backslash \\\\ done")$/;"	v	class:TabStop_EscapingChars_Backslash2
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"\\\\$1{$2}")$/;"	v	class:TabStop_EscapingChars_Backslash4
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"a\\${1:literal}")$/;"	v	class:TabStop_EscapingCharsDollars1
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"snip \\$0 $$0 end")$/;"	v	class:TabStop_EscapingCharsDollars
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"snip \\` literal")$/;"	v	class:TabStop_EscapingCharsBackticks
snippets	plugged\\ultisnips\\test\\test_TabStop.py	/^    snippets = ('test', r"usage: \\`basename \\$0\\` ${1:args}")$/;"	v	class:TabStop_EscapingChars_RealLife
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/(aa)|.*\/(?1:yes:no\\\\)\/}"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/(aa)|.*\/(?1:yes\\:no\\))\/}"$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/(aa)|.*\/(?1:yes\\\\:no)\/}"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('ascii', '$1 ${1\/(.*)\/$1\/a}')$/;"	v	class:Transformation_SimpleCaseAsciiResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('ascii', '$1 ${1\/(.*)\/\\L$1\\E\/a}')$/;"	v	class:Transformation_LowerCaseAsciiResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.)\/\\\\u$1\/}')$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.*)\/\\L$1\\E\/}')$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.*)\/\\\\U$1\\E\/}')$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.*)\/\\l$1\/}')$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(?:(^a)|(^b)).*\/(?1:yes:no)\/}')$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(?:(^a)|(^b)).*\/(?1:yes:no)\/}')$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/([ab])oo\/$1ull\/}')$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(^a).*\/(?0:began with an a)\/}')$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/foo\/batzl\/}')$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '$1 ${1\/foo\/batzl\/}')$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1:Some Text}${1\/.+\/\\\\U$0\\E\/}\\n${1\/.+\/\\L$0\\E\/}')$/;"	v	class:Transformation_MultipleTransformations_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1:some}')$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1:some}')$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1}')$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1}')$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1\/foo\/batzl\/} $1')$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', '${1\/foo\/batzl\/} ${1:replace me}')$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:m1)\/} ${2\/.+\/(?0:m2)\/} '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:m1)\/} ${2\/.+\/(?0:m2)\/} '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:matched)\/} ${1:default}')$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:matched)\/} ${1:default}')$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/(\\w+(?:\\W+\\w+){,7})\\W*(.+)?\/$1(?2:...)\/}")$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/(dead) (par[^ ]*)\/this $2 is a bit $1\/}")$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/, \/g}")$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/-\/g}")$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/\\n\/}")$/;"	v	class:Transformation_CINewlines_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/\\t\/}")$/;"	v	class:Transformation_CITabstop_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/^.*?(-)?(>)?$\/(?2::(?1:>:.))\/}")$/;"	v	class:Transformation_ConditionalInConditional_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/hal((?:lo)|(?:ul))\/(?1:ha\\($1\\))\/}")$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/test\/blah\/i}")$/;"	v	class:Transformation_OptionIgnoreCase_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${2:${1\/.+\/(?0:defined $0)\/}}")$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"$1 ${2:${1\/.+\/(?0:defined $0)\/}}")$/;"	v	class:Transformation_InsideTabOvertype_ECR
snippets	plugged\\ultisnips\\test\\test_Transformation.py	/^    snippets = ('test', r"${VISUAL\/^\/* \/mg}")$/;"	v	class:Transformation_OptionMultiline_ECR
snippets	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    snippets = ("te'stâ", 'abc123ά', '123êabc')$/;"	v	class:VerifyVimDict3
snippets	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    snippets = ('te"stâ', 'abc123ά', '123êabc')$/;"	v	class:VerifyVimDict2
snippets	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    snippets = ('testme',$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    snippets = ('testme',$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    snippets = ('testme',$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
snippets	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    snippets = ('testâ', 'abc123ά', '123\\'êabc')$/;"	v	class:VerifyVimDict1
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('if', 'if {\\n\\t${VISUAL}$0\\n}')$/;"	v	class:Visual_LineSelect_DedentLine
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${0:${VISUAL}}\\nend')$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${VISUAL}\\n\\t${1:here_we_go}\\nend')$/;"	v	class:Visual_LineSelect_WithTabStop
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${VISUAL}\\nend')$/;"	v	class:Visual_LineSelect_CheckIndentSimple
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${VISUAL}\\nend')$/;"	v	class:Visual_LineSelect_CheckIndentTwice
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:${VISUAL}}b')$/;"	v	class:Visual_InDefaultText_SelectOneWord
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:${VISUAL}}b')$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:bef${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:bef${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:beforea${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:beforea${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${1:beforeaaa${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${2:ahh}${VISUAL}${1:ups}b', 'Description', 'i')$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL:world}b')$/;"	v	class:VisualWithDefault_ExpandWithVisual
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL:world}b')$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b${VISUAL}a')$/;"	v	class:Visual_SelectOneWord_TwiceVisual
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_CrossOneLine
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_ExpandTwice
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_LineSelect_Simple
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_NoVisualSelection_Ignore
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_SelectOneWord
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', '', 'i')$/;"	v	class:Visual_SelectOneWordExclusive
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', '', 'i')$/;"	v	class:Visual_SelectOneWordInclusive
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', '', 'i')$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', 'Description', 'i')$/;"	v	class:Visual_SelectOneWord_Inword
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', 'Description', 'i')$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', 'hello\\n\\t ${1:${VISUAL}}\\nend')$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${1:bef${VISUAL\/.\/\\U$0\\E\/g}aft}b")$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${1:bef${VISUAL\/.\/\\U$0\\E\/g}aft}b")$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${VISUAL:\\\/\\\/ body}b")$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${VISUAL:world\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${VISUAL:world\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${VISUAL\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformation_LineSelect_Simple
snippets	plugged\\ultisnips\\test\\test_Visual.py	/^    snippets = ('test', r"h${VISUAL\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformation_SelectOneWord
snippets	plugged\\ultisnips\\test\\vim_test_case.py	/^    snippets = ()$/;"	v	class:VimTestCase
snippets_in_current_scope	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def snippets_in_current_scope(self, searchAll):$/;"	m	class:SnippetManager
snmp	plugged\\php.vim\\scripts\\syntax.ini	/^snmp = no$/;"	k	section:extensions
soap	plugged\\php.vim\\scripts\\syntax.ini	/^soap = yes$/;"	k	section:extensions
sockets	plugged\\php.vim\\scripts\\syntax.ini	/^sockets = yes$/;"	k	section:extensions
some	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace.php	/^$some = method_calls();$/;"	v	namespace:Mahou
some	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace2.php	/^$some = method_calls();$/;"	v	namespace:Mahou
some	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\single_namespace_uppercase.php	/^$some = method_calls();$/;"	v	namespace:Mahou
someModel	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops.php	/^$someModel = new Model();$/;"	v
someModel	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\multi_hoops_extra_whitespace.php	/^$someModel = new Model();$/;"	v
source	plugged\\tagbar-phpctags.vim\\Makefile	/^source := README.md \\$/;"	m
space_before_function_paren	plugged\\vim-snippets\\pythonx\\javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
spaces_to_indent	plugged\\ultisnips\\pythonx\\UltiSnips\\indent_util.py	/^    def spaces_to_indent(self, indent):$/;"	m	class:IndentUtil
spl	plugged\\php.vim\\scripts\\syntax.ini	/^spl = yes$/;"	k	section:extensions
split_at_whitespace	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^def split_at_whitespace(string):$/;"	f
sqlite	plugged\\php.vim\\scripts\\syntax.ini	/^sqlite = no$/;"	k	section:extensions
sqlite3	plugged\\php.vim\\scripts\\syntax.ini	/^sqlite3 = yes$/;"	k	section:extensions
src	plugged\\vim-json\\json-test.json	/^        "src": "Images\/Sun.png",$/;"	s	object:widget.image
stab	plugged\\supertab\\plugin\\supertab.vim	/^        let stab = ''$/;"	v
stab	plugged\\supertab\\plugin\\supertab.vim	/^        let stab = substitute(stab, '()$', '', '')$/;"	v
stab	plugged\\supertab\\plugin\\supertab.vim	/^        let stab = substitute(stab, '<SID>\\c', '<SNR>' . existing_stab.sid . '_', '')$/;"	v
stab	plugged\\supertab\\plugin\\supertab.vim	/^      let stab = substitute(stab, '\\(<[-a-zA-Z0-9]\\+>\\)', '\\\\\\1', 'g')$/;"	v
stab	plugged\\supertab\\plugin\\supertab.vim	/^    let stab = maparg('<s-tab>', 'i')$/;"	v
standard	plugged\\php.vim\\scripts\\syntax.ini	/^standard = yes$/;"	k	section:extensions
start	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def start(self, arg_line, *args, **kwargs):$/;"	m	class:AnyHub
start	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_base.py	/^    def start(self):$/;"	m	class:TextObject
startExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def startExplorer(self, win_pos, *args, **kwargs):$/;"	m	class:AnyExplManager
startExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def startExplorer(self, win_pos, *args, **kwargs):$/;"	m	class:FileExplManager
startExplorer	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def startExplorer(self, win_pos, *args, **kwargs):$/;"	m	class:Manager
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:MirrorToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:PythonCodeToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:ShellCodeToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:TabStopToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:TransformationToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:VimLCodeToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:VisualToken
starts_here	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^    def starts_here(cls, stream, chars=r'{}\\$`'):$/;"	m	class:EscapeCharToken
static_bar	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    protected static $static_bar;$/;"	v	class:Foo
static_bar2	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^    static public $static_bar2;$/;"	v	class:Foo
static_final_protected_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    static final protected function static_final_protected_method()$/;"	f	class:UserClass
static_property	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUnknownClass\\foo_properties.class.php	/^    public static $static_property = 'bar';$/;"	v	class:FooPropertiesClass
static_public_method	plugged\\phpcomplete.vim\\tests\\fixtures\\CompleteUserClass\\user_extended.class.php	/^    static public function static_public_method($foo) {$/;"	f	class:UserClass
statics	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^$statics = $b3->return_static_array();$/;"	v
steps	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSameLine
steps	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSameLine1
steps	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSecondLine
steps	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSecondLine1
steps	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    steps = ($/;"	v	class:MovePosition_InsSameLine1
steps	plugged\\ultisnips\\pythonx\\UltiSnips\\test_position.py	/^    steps = ($/;"	v	class:MovePosition_InsSameLine2
string	plugged\\vim-json\\json-test.json	/^    "string": "500",$/;"	s
string	plugged\\vim-json\\json-test.json	/^    "string": "this is a string, with a escaped \\" inside",$/;"	s
string	plugged\\vim-json\\json-test.json	/^    "string": "true",$/;"	s
style	plugged\\vim-json\\json-test.json	/^        "style": "bold",$/;"	s	object:widget.text
supertab_close_preview	plugged\\supertab\\plugin\\supertab.vim	/^    augroup supertab_close_preview$/;"	a
supertab_completion_mode	plugged\\supertab\\plugin\\supertab.vim	/^    augroup supertab_completion_mode$/;"	a
supertab_ignorecase	plugged\\supertab\\plugin\\supertab.vim	/^          augroup supertab_ignorecase$/;"	a
supertab_reset	plugged\\supertab\\plugin\\supertab.vim	/^  augroup supertab_reset$/;"	a
supertab_retain	plugged\\supertab\\plugin\\supertab.vim	/^    augroup supertab_retain$/;"	a
supportsMulti	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def supportsMulti(self):$/;"	m	class:AnyExplorer
supportsMulti	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def supportsMulti(self):$/;"	m	class:Explorer
supportsMulti	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def supportsMulti(self):$/;"	m	class:Explorer
supportsMulti	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def supportsMulti(self):$/;"	m	class:FileExplorer
supportsMulti	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def supportsMulti(self):$/;"	m	class:MruExplorer
supportsNameOnly	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\anyExpl.py	/^    def supportsNameOnly(self):$/;"	m	class:AnyExplorer
supportsNameOnly	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\bufExpl.py	/^    def supportsNameOnly(self):$/;"	m	class:BufferExplorer
supportsNameOnly	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer2.py	/^    def supportsNameOnly(self):$/;"	m	class:Explorer
supportsNameOnly	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\explorer3.py	/^    def supportsNameOnly(self):$/;"	m	class:Explorer
supportsNameOnly	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\fileExpl.py	/^    def supportsNameOnly(self):$/;"	m	class:FileExplorer
supportsNameOnly	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\mruExpl.py	/^    def supportsNameOnly(self):$/;"	m	class:MruExplorer
suspend_proxy_edits	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^def suspend_proxy_edits():$/;"	f
sybase_ct	plugged\\php.vim\\scripts\\syntax.ini	/^sybase_ct = no$/;"	k	section:extensions
sysvmsg	plugged\\php.vim\\scripts\\syntax.ini	/^sysvmsg = no$/;"	k	section:extensions
sysvsem	plugged\\php.vim\\scripts\\syntax.ini	/^sysvsem = no$/;"	k	section:extensions
sysvshm	plugged\\php.vim\\scripts\\syntax.ini	/^sysvshm = no$/;"	k	section:extensions
t	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py b:Lf_AnyExplManager."accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "bufTagExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "bufExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "fileExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "functionExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "helpExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "lineExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "mruExplManager.accept('t')"<CR>$/;"	m
t	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> t             :exec g:Lf_py "tagExplManager.accept('t')"<CR>$/;"	m
t	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>$/;"	m
tabpage	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def tabpage(self):$/;"	m	class:LfInstance
tagExplManager	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\tagExpl.py	/^tagExplManager = TagExplManager()$/;"	v
tagbar#CloseWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#OpenWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#ToggleWindow	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#autoopen	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#debug#enabled	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	plugged\\tagbar\\autoload\\tagbar\\debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#prototypes#basetag#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	plugged\\tagbar\\autoload\\tagbar\\prototypes\\typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	plugged\\tagbar\\autoload\\tagbar\\sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	plugged\\tagbar\\autoload\\tagbar\\state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	plugged\\tagbar\\autoload\\tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	plugged\\tagbar\\autoload\\tagbar\\types\\ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	plugged\\tagbar\\autoload\\tagbar\\types\\uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tagbar-phpctags	plugged\\tagbar-phpctags.vim\\README.md	/^tagbar-phpctags$/;"	c
tcomment#Comment	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#Comment(beg, end, ...) abort$/;"	f
tcomment#CommentAs	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#CommentAs(beg, end, comment_anyway, filetype, ...) abort$/;"	f
tcomment#DefineType	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#DefineType(...) abort$/;"	f
tcomment#GetLineC	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#GetLineC(...) abort$/;"	f
tcomment#GuessCommentType	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#GuessCommentType(...) abort "{{{3$/;"	f
tcomment#MaybeReuseOptions	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#MaybeReuseOptions(name) abort "{{{3$/;"	f
tcomment#ResetOption	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#ResetOption() abort "{{{3$/;"	f
tcomment#SetOption	plugged\\tcomment_vim\\autoload\\tcomment.vim	/^function! tcomment#SetOption(name, arg) abort "{{{3$/;"	f
tcomment#commentdef#BlockGetCommentString	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#BlockGetCommentString(cdef) abort$/;"	f
tcomment#commentdef#BlockGetMiddleString	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#BlockGetMiddleString(cdef) abort$/;"	f
tcomment#commentdef#Extend	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#Extend(beg, end, comment_mode, cdef, args) abort$/;"	f
tcomment#commentdef#Get	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#Get(beg, end, comment_mode, ...) abort$/;"	f
tcomment#commentdef#GetBlockCommentRx	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#GetBlockCommentRx(cdef) abort$/;"	f
tcomment#commentdef#GetCommentReplace	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#GetCommentReplace(cdef, cms0) abort$/;"	f
tcomment#commentdef#GetCustom	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#GetCustom(ft, comment_mode, ...) abort$/;"	f
tcomment#commentdef#GetForType	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#GetForType(beg, end, comment_mode, filetype) abort "{{{3$/;"	f
tcomment#commentdef#RepeatCommentstring	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#RepeatCommentstring(cdef) abort "{{{3$/;"	f
tcomment#commentdef#SetWhitespaceMode	plugged\\tcomment_vim\\autoload\\tcomment\\commentdef.vim	/^function! tcomment#commentdef#SetWhitespaceMode(cdef) abort "{{{3$/;"	f
tcomment#commentmode#AddExtra	plugged\\tcomment_vim\\autoload\\tcomment\\commentmode.vim	/^function! tcomment#commentmode#AddExtra(comment_mode, extra, beg, end) abort "{{{3$/;"	f
tcomment#commentmode#Guess	plugged\\tcomment_vim\\autoload\\tcomment\\commentmode.vim	/^function! tcomment#commentmode#Guess(comment_mode, supported_comment_modes) abort "{{{3$/;"	f
tcomment#compatibility#Strdisplaywidth	plugged\\tcomment_vim\\autoload\\tcomment\\compatibility.vim	/^    function! tcomment#compatibility#Strdisplaywidth(...) abort "{{{3$/;"	f
tcomment#compatibility#Strdisplaywidth	plugged\\tcomment_vim\\autoload\\tcomment\\compatibility.vim	/^    function! tcomment#compatibility#Strdisplaywidth(string, ...) abort "{{{3$/;"	f
tcomment#compatibility#Strwidth	plugged\\tcomment_vim\\autoload\\tcomment\\compatibility.vim	/^    function! tcomment#compatibility#Strwidth(text) abort "{{{3$/;"	f
tcomment#complete#Args	plugged\\tcomment_vim\\autoload\\tcomment\\complete.vim	/^function! tcomment#complete#Args(ArgLead, CmdLine, CursorPos) abort "{{{3$/;"	f
tcomment#complete#Complete	plugged\\tcomment_vim\\autoload\\tcomment\\complete.vim	/^function! tcomment#complete#Complete(ArgLead, CmdLine, CursorPos) abort "{{{3$/;"	f
tcomment#cursor#GetStartEnd	plugged\\tcomment_vim\\autoload\\tcomment\\cursor.vim	/^function! tcomment#cursor#GetStartEnd(beg, end, comment_mode) abort "{{{3$/;"	f
tcomment#cursor#SetPos	plugged\\tcomment_vim\\autoload\\tcomment\\cursor.vim	/^function! tcomment#cursor#SetPos(expr, pos) abort "{{{3$/;"	f
tcomment#deprecated#Check	plugged\\tcomment_vim\\autoload\\tcomment\\deprecated.vim	/^function! tcomment#deprecated#Check() abort "{{{3$/;"	f
tcomment#filetype#Get	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^function! tcomment#filetype#Get(...) abort "{{{3$/;"	f
tcomment#filetype#GetAlt	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^function! tcomment#filetype#GetAlt(filetype, cdef) abort "{{{3$/;"	f
tcomment#filetype#Guess	plugged\\tcomment_vim\\autoload\\tcomment\\filetype.vim	/^function! tcomment#filetype#Guess(beg, end, comment_mode, filetype, ...) abort$/;"	f
tcomment#format#EncodeCommentPart	plugged\\tcomment_vim\\autoload\\tcomment\\format.vim	/^function! tcomment#format#EncodeCommentPart(string) abort$/;"	f
tcomment#format#Printf1	plugged\\tcomment_vim\\autoload\\tcomment\\format.vim	/^function! tcomment#format#Printf1(fmt, expr) abort$/;"	f
tcomment#operator#Anyway	plugged\\tcomment_vim\\autoload\\tcomment\\operator.vim	/^function! tcomment#operator#Anyway(type) abort "{{{3$/;"	f
tcomment#operator#Line	plugged\\tcomment_vim\\autoload\\tcomment\\operator.vim	/^function! tcomment#operator#Line(type) abort "{{{3$/;"	f
tcomment#operator#LineAnyway	plugged\\tcomment_vim\\autoload\\tcomment\\operator.vim	/^function! tcomment#operator#LineAnyway(type) abort "{{{3$/;"	f
tcomment#operator#Op	plugged\\tcomment_vim\\autoload\\tcomment\\operator.vim	/^function! tcomment#operator#Op(type, ...) abort "{{{3$/;"	f
tcomment#regex#Count	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#Count(string, rx) abort$/;"	f
tcomment#regex#EndColRx	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#EndColRx(comment_mode, lnum, pos) abort$/;"	f
tcomment#regex#EndLineRx	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#EndLineRx(pos) abort$/;"	f
tcomment#regex#EndPosRx	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#EndPosRx(comment_mode, lnum, col) abort$/;"	f
tcomment#regex#StartColRx	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#StartColRx(cdef, comment_mode, col, ...) abort$/;"	f
tcomment#regex#StartLineRx	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#StartLineRx(pos) abort$/;"	f
tcomment#regex#StartPosRx	plugged\\tcomment_vim\\autoload\\tcomment\\regex.vim	/^function! tcomment#regex#StartPosRx(cdef, comment_mode, line, col) abort$/;"	f
tcomment#syntax#GetSyntaxName	plugged\\tcomment_vim\\autoload\\tcomment\\syntax.vim	/^function! tcomment#syntax#GetSyntaxName(lnum, col) abort "{{{3$/;"	f
tcomment#textobject#InlineComment	plugged\\tcomment_vim\\autoload\\tcomment\\textobject.vim	/^function! tcomment#textobject#InlineComment() abort "{{{3$/;"	f
tcomment#type#Collect	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^function! tcomment#type#Collect() abort$/;"	f
tcomment#type#Define	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^function! tcomment#type#Define(name, commentdef, ...) abort$/;"	f
tcomment#type#Exists	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^function! tcomment#type#Exists(name, ...) abort$/;"	f
tcomment#type#GetDefinition	plugged\\tcomment_vim\\autoload\\tcomment\\type.vim	/^function! tcomment#type#GetDefinition(name, ...) abort$/;"	f
tcomment#vimoptions#MakeCommentDefinition	plugged\\tcomment_vim\\autoload\\tcomment\\vimoptions.vim	/^function! tcomment#vimoptions#MakeCommentDefinition(comment_mode) abort$/;"	f
tearDown	plugged\\ultisnips\\test\\vim_test_case.py	/^    def tearDown(self):$/;"	m	class:VimTestCase
template	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^    $template = str_ireplace($/;"	v
template	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$template = file_get_contents('\/var\/php\/syntax\/php.vim');$/;"	v
template	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$template = preg_replace($/;"	v
template	plugged\\php.vim\\scripts\\update-vim-syntax.php	/^$template = preg_replace_callback($/;"	v
test	plugged\\vim-localvimrc\\Makefile	/^test:$/;"	t
test	plugged\\vim-matchup\\test\\issues\\33\\test.rb	/^    def test $/;"	f	class:LoremIpsum.Lorem
test/*	plugged\\vim-matchup\\.projections.json	/^  "test\/*": {"type": "test"}$/;"	o
testFunc	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentNameSpace\\code_blocks.php	/^$testFunc = function () {$/;"	f
tests	plugged\\ale\\run-tests.bat	/^if not "%1"=="" set tests=%1$/;"	v
tests	plugged\\ale\\run-tests.bat	/^set tests=test\/*.vader test\/*\/*.vader test\/*\/*\/*.vader test\/*\/*\/*\/*.vader$/;"	v
text	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    char* text;$/;"	m	struct:TextContext	typeref:typename:char *	file:
text	plugged\\ultisnips\\pythonx\\UltiSnips\\vim_state.py	/^    def text(self):$/;"	m	class:VisualContentPreserver
text	plugged\\vim-json\\json-test.json	/^    "text": {$/;"	o	object:widget
text_after	plugged\\ultisnips\\test\\test_Format.py	/^    text_after = ''$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
text_after	plugged\\ultisnips\\test\\vim_test_case.py	/^    text_after = '\\n\\n --- some text after --- '$/;"	v	class:VimTestCase
text_before	plugged\\ultisnips\\test\\test_Format.py	/^    text_before = ''$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
text_before	plugged\\ultisnips\\test\\vim_test_case.py	/^    text_before = ' --- some text before --- \\n\\n'$/;"	v	class:VimTestCase
text_len	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint16_t text_len;$/;"	m	struct:TextContext	typeref:typename:uint16_t	file:
text_mask	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^    uint64_t* text_mask;$/;"	m	struct:TextContext	typeref:typename:uint64_t *	file:
thises	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\self_return_type_array.php	/^$thises = $b3->return_this_array();$/;"	v
tidy	plugged\\php.vim\\scripts\\syntax.ini	/^tidy = no$/;"	k	section:extensions
title	plugged\\vim-json\\json-test.json	/^			"title": "S",$/;"	s	object:GlossDiv
title	plugged\\vim-json\\json-test.json	/^        "title": "Sample Konfabulator Widget",$/;"	s	object:widget.window
title	plugged\\vim-json\\json-test.json	/^        "title": "example glossary",$/;"	s
tlist_php_settings	ftplugin\\php.vim	/^let tlist_php_settings = 'php;f:function'$/;"	v
tlist_vim_settings	ftplugin\\vim.vim	/^let tlist_vim_settings = 'vim;f:function'$/;"	v
to_vim	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def to_vim(self):$/;"	m	class:_VimCursor
to_vim_cursor	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def to_vim_cursor(self):$/;"	m	class:_SnippetUtilCursor
toggleHelp	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\manager.py	/^    def toggleHelp(self):$/;"	m	class:Manager
tokenize	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_lexer.py	/^def tokenize(text, indent, offset, allowed_tokens):$/;"	f
tokenize_snippet_text	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\parsing\\_base.py	/^def tokenize_snippet_text(snippet_instance, text, indent,$/;"	f
tokenizer	plugged\\php.vim\\scripts\\syntax.ini	/^tokenizer = yes$/;"	k	section:extensions
tox	plugged\\ale\\test\\command_callback\\python_paths\\namespace_package_tox\\tox.ini	/^[tox]$/;"	s
transform	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^def transform(a, cmds):$/;"	f
tries	plugged\\ale\\run-tests.bat	/^set tries=0$/;"	v
trigger	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\definition\\_base.py	/^    def trigger(self):$/;"	m	class:SnippetDefinition
type	plugged\\tcomment_vim\\addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tcomment_vim.git"},$/;"	s	object:repository
type	plugged\\vim-matchup\\.projections.json	/^  "README.md": {"type": "readme"},$/;"	s	object:README.md
type	plugged\\vim-matchup\\.projections.json	/^  "autoload\/*.vim": {"type": "autoload"},$/;"	s	object:autoload/*.vim
type	plugged\\vim-matchup\\.projections.json	/^  "doc\/*.txt": {"type": "doc"},$/;"	s	object:doc/*.txt
type	plugged\\vim-matchup\\.projections.json	/^  "plugin\/*.vim": {"type": "plugin"},$/;"	s	object:plugin/*.vim
type	plugged\\vim-matchup\\.projections.json	/^  "test\/*": {"type": "test"}$/;"	s	object:test/*
type	plugged\\vim-snippets\\addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
tz	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\call_chains.php	/^$tz = DateTime::createFromFormat()->getTimezone();$/;"	v
u	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\static_docblock_return.php	/^$u = User::getUser();$/;"	v
ultisnips_snippets	plugged\\ultisnips\\ftplugin\\snippets.vim	/^augroup ultisnips_snippets.vim$/;"	a
unescape	plugged\\ultisnips\\pythonx\\UltiSnips\\text.py	/^def unescape(text):$/;"	f
unescape	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^def unescape(s):$/;"	f
unfinished	plugged\\phpcomplete.vim\\tests\\fixtures\\GetCurrentFunctionBoundaries\\test.php	/^function unfinished() {$/;"	f
uninstall	plugged\\html5.vim\\Makefile	/^uninstall: uninstall-files rmrecord$/;"	t
uninstall	plugged\\supertab\\Makefile	/^uninstall:$/;"	t
uninstall-files	plugged\\html5.vim\\Makefile	/^uninstall-files:$/;"	t
unique_name_temp	plugged\\ultisnips\\test\\vim_interface.py	/^    def unique_name_temp(self, suffix='', prefix=''):$/;"	m	class:TempFileManager
unite#sources#ultisnips#define	plugged\\ultisnips\\autoload\\unite\\sources\\ultisnips.vim	/^function! unite#sources#ultisnips#define()$/;"	f
unlink_file	plugged\\html5.vim\\Makefile	/^unlink_file = \\$/;"	m
unregister_snippet_source	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet_manager.py	/^    def unregister_snippet_source(self, name):$/;"	m	class:SnippetManager
unshift	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def unshift(self, amount=1):$/;"	m	class:SnippetUtil
update	plugged\\html5.vim\\Makefile	/^update:$/;"	t
update_extends	plugged\\ultisnips\\pythonx\\UltiSnips\\snippet\\source\\_base.py	/^    def update_extends(self, child_ft, parent_fts):$/;"	m	class:SnippetSource
update_textobjects	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_snippet_instance.py	/^    def update_textobjects(self, buf):$/;"	m	class:SnippetInstance
upload	autoload\\sftpsync\\python\\sftpsync.py	/^	def upload(self, filename, target):$/;"	m	class:SftpSync
url	plugged\\tcomment_vim\\addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tcomment_vim.git"},$/;"	s	object:repository
url	plugged\\vim-snippets\\addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
usage	plugged\\phpcomplete.vim\\bin\\generate_builtin_dicts.php	/^function usage($argv) {$/;"	f
use_proxy_buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^def use_proxy_buffer(snippets_stack, vstate):$/;"	f
v	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py b:Lf_AnyExplManager."accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "bufTagExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "bufExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "fileExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "functionExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "helpExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "lineExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "mruExplManager.accept('v')"<CR>$/;"	m
v	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> v             :exec g:Lf_py "tagExplManager.accept('v')"<CR>$/;"	m
v	plugged\\ale\\ftplugin\\ale-preview-selection.vim	/^noremap <buffer> v <NOP>$/;"	m
v	plugged\\ultisnips\\pythonx\\UltiSnips\\text_objects\\_python_code.py	/^    def v(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
vOffset	plugged\\vim-json\\json-test.json	/^        "vOffset": 100,$/;"	n	object:widget.text
vOffset	plugged\\vim-json\\json-test.json	/^        "vOffset": 250,$/;"	n	object:widget.image
valTable	plugged\\LeaderF\\autoload\\leaderf\\fuzzyMatch_C\\fuzzyMatch.c	/^static uint16_t valTable[64] =$/;"	v	typeref:typename:uint16_t[64]	file:
validate_buffer	plugged\\ultisnips\\pythonx\\UltiSnips\\buffer_proxy.py	/^    def validate_buffer(self):$/;"	m	class:VimBufferProxy
value	plugged\\vim-json\\json-test.json	/^      {"value": "Close", "onclick": "CloseDoc()"}$/;"	s	object:menu.popup.menuitem.2
value	plugged\\vim-json\\json-test.json	/^      {"value": "New", "onclick": "CreateNewDoc()"},$/;"	s	object:menu.popup.menuitem.0
value	plugged\\vim-json\\json-test.json	/^      {"value": "Open", "onclick": "OpenDoc()"},$/;"	s	object:menu.popup.menuitem.1
value	plugged\\vim-json\\json-test.json	/^  "value": "File",$/;"	s	object:menu
version	plugged\\html5.vim\\Makefile	/^version:$/;"	t
version	plugged\\tagbar-phpctags.vim\\Makefile	/^version := 0.5.1$/;"	m
version	plugged\\tcomment_vim\\addon-info.json	/^    "version" : "dev",$/;"	s
version	plugged\\ultisnips\\test\\vim_test_case.py	/^    version = None  # Will be set to vim --version output$/;"	v	class:VimTestCase
vim match-up	plugged\\vim-matchup\\README.md	/^# vim match-up$/;"	c
vim-editorconfig	plugged\\vim-editorconfig\\README.md	/^vim-editorconfig$/;"	c
vim-gitbranch	plugged\\vim-gitbranch\\README.md	/^# vim-gitbranch$/;"	c
vim-javascript	plugged\\vim-javascript\\README.md	/^# vim-javascript$/;"	c
vim-jsx	plugged\\vim-jsx\\README.md	/^vim-jsx$/;"	c
vim-script	plugged\\vim-matchup\\README.md	/^#### vim-script$/;"	t
vim-tools	plugged\\vim-localvimrc\\Makefile	/^vim-tools = support\/vim-tools$/;"	m
vim_executable	plugged\\ultisnips\\test\\vim_interface.py	/^    def vim_executable(self):$/;"	m	class:VimInterface
vim_flavor	plugged\\ultisnips\\test\\vim_test_case.py	/^    vim_flavor = None # will be 'vim' or 'neovim'.$/;"	v	class:VimTestCase
vim_snippets#Filename	plugged\\vim-snippets\\autoload\\vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
vimball	plugged\\html5.vim\\Makefile	/^vimball:$/;"	t
vimball-edit	plugged\\html5.vim\\Makefile	/^vimball-edit:$/;"	t
vimstring_escape	plugged\\phpcomplete.vim\\bin\\generator\\tools.php	/^function vimstring_escape($str) {$/;"	f
vimtex, for LaTeX documents	plugged\\vim-matchup\\README.md	/^### vimtex, for LaTeX documents$/;"	S
virtual_position	plugged\\ultisnips\\pythonx\\UltiSnips\\_vim.py	/^def virtual_position(line, col):$/;"	f
vital#	plugged\\lexima.vim\\autoload\\vital\\_lexima.vim	/^function! vital#{s:self_version}#new() abort$/;"	f
vital#of	plugged\\lexima.vim\\autoload\\vital.vim	/^function! vital#of(name) abort$/;"	f
wait_until_file_exists	plugged\\ultisnips\\test\\vim_interface.py	/^def wait_until_file_exists(file_path, times=None, interval=0.01):$/;"	f
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:MatchIsTooCheap
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:MultiLine
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestCheapDelete
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestCommonCharacters
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestCrash
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_BackspaceOneChar
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_DeleteOneChar
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_InsertOneChar
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_InsertOneChar1
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestLotsaNewlines
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestNoSubstring
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestRealLife
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestRealLife1
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestUltiSnipsProblem
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ($/;"	v	class:TestWithNewline
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ()$/;"	v	class:TestAllMatch
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ()$/;"	v	class:TestEmptyString
wanted	plugged\\ultisnips\\pythonx\\UltiSnips\\test_diff.py	/^    wanted = ()$/;"	v	class:TestGuessing_Noop0
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = ' :latex:`Hello`World'$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = '123 simple 123 expand 123 456'$/;"	v	class:Anon_Trigger_Multi
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = ':latex:`Hello`World'$/;"	v	class:Anon_NoTrigger_BeginningOfLine
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = 'abc simple expand'$/;"	v	class:Anon_NoTrigger_AfterSpace
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = 'abcsimple 123 expand 123 456'$/;"	v	class:Anon_NoTrigger_Multi
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = 'abcsimple expand'$/;"	v	class:Anon_NoTrigger_Simple
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = 'simple expand'$/;"	v	class:Anon_Trigger_Opts
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = 'simple expand'$/;"	v	class:Anon_Trigger_Simple
wanted	plugged\\ultisnips\\test\\test_AnonymousExpansion.py	/^    wanted = 'simple expand\\nabc' + EX$/;"	v	class:Anon_Trigger_Twice
wanted	plugged\\ultisnips\\test\\test_Autocommands.py	/^    wanted = '[ [ bar ] ] done M1U1'$/;"	v	class:Autocommands
wanted	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    wanted = 'abc'$/;"	v	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
wanted	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    wanted = 'autotriggered'$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
wanted	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    wanted = 'autotriggered'$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
wanted	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    wanted = 'autotriggered\\na'$/;"	v	class:Autotrigger_CanMatchContext
wanted	plugged\\ultisnips\\test\\test_Autotrigger.py	/^    wanted = 'if var == nil: pass\\n='$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_BS
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_Jump
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_Type
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_EndNL
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_EndStartNL
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_JustNL
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_StartNL
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """Hello \\t \\nGoodbye"""$/;"	v	class:LeaveTrailingWhitespace
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """Hello\\nGoodbye"""$/;"	v	class:RemoveTrailingWhitespace
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """\\tnext line\\n\\n\\tshould be empty"""$/;"	v	class:TrimSpacesAtEndOfLines
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = """\\tnext line\\n\\t\\n\\tshould be empty"""$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = "Expand me'!"$/;"	v	class:Snippet_With_SingleQuote
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = "Expand me'!"$/;"	v	class:Snippet_With_SingleQuote_List
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = "Expand me\\"!"$/;"	v	class:Snippet_With_DoubleQuote
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = "Expand me\\"!"$/;"	v	class:Snippet_With_DoubleQuote_List
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'Expand meü!'$/;"	v	class:Snippet_With_Umlauts
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'Expand meü!'$/;"	v	class:Snippet_With_Umlauts_List
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'oouu success b'$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'te üü hello üü hello'$/;"	v	class:Snippet_With_Umlauts_Mirrors
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'te üü hüüll üü aaaaa'$/;"	v	class:Snippet_With_Umlauts_Python
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'te üü more text üü helloßß\\nüüüüend'$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'te üü world üü helloßß\\nüüüüend'$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'te üü world üü more textßß\\nüüüüend'$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'te üüüüüßßßßmore text'$/;"	v	class:Snippet_With_Umlauts_TypeOn
wanted	plugged\\ultisnips\\test\\test_Chars.py	/^    wanted = 'ööuu success b'$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
wanted	plugged\\ultisnips\\test\\test_Completion.py	/^    wanted = 'superkallifragilistik\\nsuperkallifragilistik some more ' \\$/;"	v	class:Completion_SimpleExample_ECR
wanted	plugged\\ultisnips\\test\\test_Completion.py	/^    wanted = COMPLETION_OPTIONS + 'completion1 foo'$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
wanted	plugged\\ultisnips\\test\\test_Completion.py	/^    wanted = COMPLETION_OPTIONS + 'foo completion1'$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = "(2, 1)"$/;"	v	class:ContextSnippets_CursorIsZeroBased
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = "1 1"$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = "Yes No"$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = 'abc'$/;"	v	class:ContextSnippets_ExpandOnTrue
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = 'abc'$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = 'abc'$/;"	v	class:ContextSnippets_SimpleSnippet
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = 'b'$/;"	v	class:ContextSnippets_PriorityKeyword
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = 'e' + EX$/;"	v	class:ContextSnippets_ReportError
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = 'e' + EX$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = '{ < a > }'$/;"	v	class:ContextSnippets_UseContext
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = keys$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = keys$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
wanted	plugged\\ultisnips\\test\\test_ContextSnippets.py	/^    wanted = r"""$/;"	v	class:ContextSnippets_SnippetPriority
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = ''$/;"	v	class:Undo_CompletelyUndoSnippet
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = '''\\$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'AA BBB'$/;"	v	class:Backspace_TabStop_NotZero
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'AA BBB'$/;"	v	class:Backspace_TabStop_Zero
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'a b c\\na\\nb\\nc\\n\\nshallnot'$/;"	v	class:JumpForward_DefSnippet
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'aaaaa()3333'$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'end'$/;"	v	class:DeleteCurrentTabStop1_JumpBack
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'first line\\n\\n\\ntest\\n\\n\\nthird line'$/;"	v	class:Undo_RemoveWholeSnippet
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'hello upsi Hello\\naaa upsi bbb\\nWorld'$/;"	v	class:Undo_RemoveEditInTabstop
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'hello'$/;"	v	class:DeleteLastTwoLinesInSnippet
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'hello\\nend'$/;"	v	class:DeleteCurrentTabStop2_JumpBack
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'hello\\nendworld'$/;"	v	class:DeleteCurrentTabStop3_JumpAround
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'if :\\n\\t'$/;"	v	class:Undo_ChangesInPlaceholder
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'if a: test'$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'if:\\n\\t'$/;"	v	class:Undo_RemoveOneSnippetByTime2
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'if:\\n\\ti'$/;"	v	class:Undo_RemoveOneSnippetByTime
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'test'$/;"	v	class:DeleteSnippetInsertion1
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'test'$/;"	v	class:Undo_RemoveMultilineSnippet
wanted	plugged\\ultisnips\\test\\test_Editing.py	/^    wanted = 'world'$/;"	v	class:DeleteSnippetInsertion0
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Hallo Welt!'$/;"	v	class:SimpleExpand_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Hallo Welt!\\nHallo We'$/;"	v	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Hallo Welt!\\nHallo Welt!'$/;"	v	class:SimpleExpandTwice_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Hallo Welt!and again'$/;"	v	class:SimpleExpandTypeAfterExpand_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Hallo Welt\\n\\nAnd more'$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'SimpleText' + EX$/;"	v	class:ExitSnippetModeAfterTabstopZero
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Wie Hallo Welt! gehts'$/;"	v	class:ExpandInTheMiddleOfLine_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Wie Hallo Welt!\\nUnd Wie gehts gehts'$/;"	v	class:MultilineExpand_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'Wie Hallo Welt!\\nUnd Wie gehtsHuiui! gehts'$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'hallo ' + EX$/;"	v	class:DoNotExpandAfterSpace_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Expand.py	/^    wanted = 'na du Hallo Welt!and blub'$/;"	v	class:SimpleExpandTypeAndDelete_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Fixes.py	/^    wanted = '  world hello;blub'$/;"	v	class:Bug1251994
wanted	plugged\\ultisnips\\test\\test_Fixes.py	/^    wanted = '\\nblah\\nhello world '$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
wanted	plugged\\ultisnips\\test\\test_Fixes.py	/^    wanted = '\\t\\t\\tpadding: 2px'$/;"	v	class:VirtualEdit
wanted	plugged\\ultisnips\\test\\test_Fixes.py	/^    wanted = '\\tfoo'$/;"	v	class:ShiftWidthZero
wanted	plugged\\ultisnips\\test\\test_Fixes.py	/^    wanted = 'hello'$/;"	v	class:NonUnicodeDataInUnnamedRegister
wanted	plugged\\ultisnips\\test\\test_Fixes.py	/^    wanted = 'yank HELLO world yank'$/;"	v	class:RetainsTheUnnamedRegister
wanted	plugged\\ultisnips\\test\\test_Folding.py	/^    wanted = """Hello {{{$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
wanted	plugged\\ultisnips\\test\\test_Folding.py	/^    wanted = '# hi  {{{\\n\\n# End: hi  }}}'$/;"	v	class:FoldOverwrite_Simple_ECR
wanted	plugged\\ultisnips\\test\\test_Folding.py	/^    wanted = '# hi  {{{\\n\\n# End: hi  }}}'$/;"	v	class:Fold_DeleteMiddleLine_ECR
wanted	plugged\\ultisnips\\test\\test_Folding.py	/^    wanted = 'package c03;\\nsub junk {}\\n1;'$/;"	v	class:PerlSyntaxFold
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '    for\\n        blahHui'$/;"	v	class:ProperIndenting_SimpleCase_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '    hui\\n    blah'$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '    huiblah'$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '   Blaahblah \\t\\t  '$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '   Something\\n        Hallo'$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '#include <cstdlib>'$/;"	v	class:ProperIndenting_FirstLineInFileComplete_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = '#include <foo>'$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = 'This is a longer\\ntext that should\\nwrap as\\nformatoptions are\\nenabled\\n' + /;"	v	class:FOSimple_Break_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = \\$/;"	v	class:FOTextAfter_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = \\$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Format.py	/^    wanted = \\$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """        hi World End"""$/;"	v	class:PythonCode_IndentProblem
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """    hi$/;"	v	class:PythonCode_IndentEtSwOffset
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """   hi$/;"	v	class:PythonCode_IndentEtSw
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """   hi$/;"	v	class:PythonCode_IndentNoetSwTs
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendShift
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendShiftMethods
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendSimpleIndent
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_ResetIndent
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_SimpleMkline
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """first second (placeholder: first second (placeholder: ))$/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """first second (placeholder: first)$/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """hi no End"""$/;"	v	class:PythonCode_OptNoExists
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """hi nothing test End"""$/;"	v	class:PythonCode_Locals
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = """hi yes End"""$/;"	v	class:PythonCode_OptExists
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = "bl-\\n\\tah, bah"$/;"	v	class:PythonCode_CanOverwriteTabstop
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = '    hi 4 End'$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = '    start b isbigger a end'$/;"	v	class:PythonCodeOld_IndentedMultiline
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = '    start b isbigger a end'$/;"	v	class:PythonCode_MultilineIndented
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = '##########\\nHallo Welt'$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = '##########\\nHallo Welt'$/;"	v	class:PythonCode_ReferencePlaceholderBefore
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = '$hi'$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'Hallo now Hallo Welt endand more'$/;"	v	class:TabStop_Shell_ShebangPython
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'Hallo now fromecho endand more'$/;"	v	class:TabStop_Shell_InDefValue_Leave
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'Hallo overwrite endand more'$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'OKAYhokayoOKAY'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'aaa'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'blah'$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'egal Hallo End'$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'egal Hallo End'$/;"	v	class:PythonCode_TransformedBeforeMultiLine
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'h5b'$/;"	v	class:Python_WeirdScoping_Error
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hVhello\\nnice\\nworld\\nb'$/;"	v	class:PythonVisual_LineSelect_Simple
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hbabc'$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi Hallo End'$/;"	v	class:PythonCodeOld_SimpleExample
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi Hallo End'$/;"	v	class:PythonCode_SimpleExample
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi Hallo1\\nHallo2 End'$/;"	v	class:PythonCode_SimpleAppend
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi Hallo1\\nHallo2\\nHallo3 End'$/;"	v	class:PythonCode_MultiAppend
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi New End'$/;"	v	class:PythonCode_UseNewOverOld
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi hallo you!and more'$/;"	v	class:TabStop_Shell_SimpleExample
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi hallo\\nWeiterand more'$/;"	v	class:TabStop_Shell_TextInNextLine
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi höüäh you!and more'$/;"	v	class:TabStop_Shell_WithUmlauts
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi' + 100 * 'a' + 'endups'$/;"	v	class:PythonCode_LongerTextThanSource_Chars
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hi' + 100 * 'a' + 100 * '\\n' + 100 * 'a' + 'endups'$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hiEnd'$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'ho ho.blah End'$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'ho ho.blah End'$/;"	v	class:PythonCode_ReferencePlaceholder
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'hvblablubb'$/;"	v	class:PythonVisual_SelectOneWord
wanted	plugged\\ultisnips\\test\\test_Interpolation.py	/^    wanted = 'ups egal hi hi'$/;"	v	class:PythonCode_TrickyReferences
wanted	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    wanted = ' BLAAH'$/;"	v	class:ListAllAvailable_SpaceInFront_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    wanted = 'BLAAH'$/;"	v	class:ListAllAvailable_NothingTyped_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    wanted = 'hallo BLAAH'$/;"	v	class:ListAllAvailable_testtyped_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    wanted = 'hallo TEST ONE'$/;"	v	class:ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    wanted = 'hallo qualleHi'$/;"	v	class:ListAllAvailable_NonDefined_NoExpectionShouldBeRaised
wanted	plugged\\ultisnips\\test\\test_ListSnippets.py	/^    wanted = '} BLAAH'$/;"	v	class:ListAllAvailable_BraceInFront_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = """for(size_t a_variable = 0; a_variable < 100; a_variable *= 2)$/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = '    hallo\\nhallo\\nahallob\\nhallo\\ntest hallo mich'$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ObenVorne hallo welt ObenHinten\\nVorne hallo welt Hinten'$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'Vorne hallo test Hinten\\nhallo test'$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'Vorne hallo\\nhallo'$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'a a a'$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha blah hi hulla end hu hi hub hulla'$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha blub blub'$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha blub blub.h'$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha defa\\ndefa'$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha default value default value\\nanother: default value mirror'$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha stdin do snap stdin.h do snap'$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha stdin overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha stdin overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha stdin snip stdin.h snip'$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha stdin stdin.h stdin.c\\ntest stdin'$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha stdin stdinend'$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha world world\\nanother: world mirror'$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ha world\\nworld'$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hal\\nhal'$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'halhups\\nhalhups'$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo Du\\nAch Blah\\nhallo Du\\nAch Blah\\nhallo Du\\nAch Blah'$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo Du\\nHi\\n\\nhallo Du\\nHi\\n\\nhallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo Du\\nHi\\nhallo Du\\nHi\\nhallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo Hinten\\nhallo'$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo du hallo du hallo du hallo du'$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo du\\nwie gehts hallo du\\nwie gehts hallo du\\nwie gehts' \\$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo foo hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo foo hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo hallo'$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo noauch ahiuch_end'$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo noauch auchih_end'$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo noauch hinoauch_end'$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo noauch noauchab_end'$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo welt\\nVorne hallo welt Hinten'$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo weltelt '$/;"	v	class:Mirror_TestKillTabstop_Kill
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo\\nVorne hallo'$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo\\nagain\\nhallo\\nagain'$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo\\nhallo Hinten'$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'hallo\\nhallo'$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'this is it this is it this is it'$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Mirror.py	/^    wanted = 'ups hallo hallo blah'$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = '<tr>\\n\\t<th>blah<\/th>\\n<\/tr>\\nend'$/;"	v	class:CursorMovement_BS_InEditMode
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'hello tab blub tab ' + JF + 'hallothis'$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'hello tab hallo tab this'$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'hello tab hallo tab this'$/;"	v	class:IMMoving_NoExiting_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'hello tab hallo this'$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'hello tab\\nblub this\\n' + JF + 'testhallo'$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'hello' + JF + 'hallo tab blub this'$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'text'$/;"	v	class:IMMoving_CursorsKeys_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'thhallo\\nweltis thhallo\\nweltis'$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = 'this is something\\nvery nice\\nnot ' \\$/;"	v	class:CursorMovement_Multiline_ECR
wanted	plugged\\ultisnips\\test\\test_Movement.py	/^    wanted = JF + 'hallo\\nhello tab\\nblub this'$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
wanted	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    wanted = 'Case1'$/;"	v	class:Multiple_SimpleCaseSelectFirst_ECR
wanted	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    wanted = 'Case2'$/;"	v	class:Multiple_SimpleCaseSelectSecond_ECR
wanted	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    wanted = 'Case2'$/;"	v	class:Multiple_SimpleCaseSelectTooHigh_ESelectLast
wanted	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    wanted = 'testhi'$/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
wanted	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    wanted = 'testhi'$/;"	v	class:Multiple_SimpleCaseEscapeOut_ECR
wanted	plugged\\ultisnips\\test\\test_MultipleMatches.py	/^    wanted = 'testhi'$/;"	v	class:Multiple_SimpleCaseSelectZero_EEscape
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'This is a test snippet!'$/;"	v	class:ParseSnippets_SimpleSnippet
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'This is a test.'$/;"	v	class:ParseSnippets_MultiWord_Quotes
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'This is a test.'$/;"	v	class:ParseSnippets_MultiWord_Simple
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'This is a test.'$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'This is another test.'$/;"	v	class:ParseSnippets_MultiWord_Description
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'This is yet another test.'$/;"	v	class:ParseSnippets_MultiWord_Description_Option
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'abc az test'$/;"	v	class:ParseSnippets_MultiWord_RE1
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'foo-bar test bar\\t\\nfoo-bar test'$/;"	v	class:ParseSnippets_MultiWord_RE2
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 're-test'$/;"	v	class:ParseSnippets_MultiWord_RE3
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearAll
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine1
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_MissingEndSnippet
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_UnknownDirective
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'toclear' + EX + '\\n' + 'This is a test.'$/;"	v	class:ParseSnippets_ClearOne
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'toclear' + EX + '\\n' + 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearTwo
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'x a bob b y\\nx a jon b y'$/;"	v	class:ParseSnippets_Global_Python
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = 'x first a bob b y'$/;"	v	class:ParseSnippets_Global_Local_Python
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_MultiWord_NoContainer
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippet
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintPythonStacktrace
wanted	plugged\\ultisnips\\test\\test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
wanted	plugged\\ultisnips\\test\\test_Plugin.py	/^    wanted = 'longtextlongtext\\nlongtextlongtext\\nHello'$/;"	v	class:Plugin_SuperTab_SimpleTest
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'A A AB B C CD D DE E B hi'$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'A A C CD D DE E B again B hi'$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'A C CD D DE E B hi'$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'A C CD D DE E B'$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'A C CD D DE E B'$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'M START\\n    M START\\n        hi\\n    M END -> hallo\\n' \\$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'M START\\n    M START\\n        hi\\n    M END\\nM END'$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'M START\\n    M START\\n    hi\\n    M END\\nM END'$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'M START\\n    hallo M START\\n    hi\\n    M END\\nM END'$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'M START\\nM START\\n\\nM END\\nM END'$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ ASnip Hallo ASnip Hi ASnipendone two ] ASnip Hallo ASnip Hi ASnipendonetotalend'$/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ JST  JSThi ]end'$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ JST JSThi  two ]end'$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ Just some Texthi  two ]end'$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ [ a sec ] hallo ]ups world ]end'$/;"	v	class:RecTabStops_LeavingInnerInner_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ [ a sec ] sec ] hallo ]end'$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ a hallo ]ups world ]end'$/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ a sec ] hallo ]world'$/;"	v	class:RecTabStops_LeavingInner_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ hello  sec ]  world ]end'$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ hello  world ]  sec ]end'$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ hello  world ]ups  end ]'$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ one three three two ] four ]end'$/;"	v	class:RecTabStops_MirroredZeroTS_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ [ one three two ] four ]end'$/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ hello [ hi  two ]ups  three ]end'$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ hello\\n[ hi  two ]ups  three ]end'$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = '[ hello\\nhello again [ hi  two ]ups  three ]end'$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = 'form_for user, namespace: some_namespace, html: {(id: |class: |title:  )d: '$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = r"\\vec{\\frac{a}\\frac{aa}cc{two}{b}}hello \\frac{one}world{two}"$/;"	v	class:RecTabsStops_TypeInZero_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = r"_hello _world _end"$/;"	v	class:RecTabsStops_TypeInZero2_ECR
wanted	plugged\\ultisnips\\test\\test_Recursive.py	/^    wanted = r"oneoneexplicit zerotwotwo"$/;"	v	class:RecTabsStops_BackspaceZero_ECR
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = """for ($k = 0; $k < count; $k++) {$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = """for ($k = 0; $k < count; $k++) {$/;"	v	class:OldSelection_RealWorldCase_Test
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:SelectModeMappings_BufferLocalMappings_ECR
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:SelectModeMappings_RemoveBeforeSelecting_ECR
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:_SelectModeMappings
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'huiw ui'$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'huiw ui'$/;"	v	class:OldSelection_SimpleTabstop_Test
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'xello'$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'xello'$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
wanted	plugged\\ultisnips\\test\\test_Selection.py	/^    wanted = 'xello'$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = """<option value="some">not<\/option>ende"""$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = """<option value="some">some<\/option>ende"""$/;"	v	class:snipMate_TestMirrorsInPlaceholders
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = """\/*$/;"	v	class:snipMate_Issue658
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'This is a stand alone snippet\\nThis is two stand alone snippet\\nThree'$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'This is a test snippet'$/;"	v	class:snipMate_SimpleSnippetSubDirectory
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'This is a test snippet\\n# With a comment'$/;"	v	class:snipMate_SimpleSnippet
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'blah'$/;"	v	class:snipMate_Extends
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'blub is blah'$/;"	v	class:snipMate_TestNoBraceTabstops
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'blub is blub, blah is blah'$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'blub\\n\\nblah\\n'$/;"	v	class:snipMate_EmptyLinesContinueSnippets
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'for (j; j < blub; blub++) {\\n\\thi\\n}'$/;"	v	class:snipMate_TestMirrors
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'h$${2:blub}$$hi'$/;"	v	class:snipMate_NoNestedTabstops
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'hblablubb'$/;"	v	class:snipMate_Visual_Simple
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'hello' + EX + '\\nworked'$/;"	v	class:snipMate_OtherFiletype
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'hello' + EX$/;"	v	class:snipMate_Disabled
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'lac03lu'$/;"	v	class:snipMate_Interpolation
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'laöäülu'$/;"	v	class:snipMate_InterpolationWithSystem
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'two'$/;"	v	class:snipMate_MultiMatches
wanted	plugged\\ultisnips\\test\\test_SnipMate.py	/^    wanted = 'ultisnips'$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_CanModifyParentBody
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_EnsureIndent
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_MoveVisual
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """1 {$/;"	v	class:SnippetActions_UseCorrectJumpActions
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """1, 2"""$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """debug(test(some(complex(cond(a)))))$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """if not blah: pass"""$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """if some_check(1, 2, 3) or 4: 5"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """if x:$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """if x:$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """import smthing$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """some context$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """some_wrapper(wrapme(2, 1)3): 4"""$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = """totally_different(2, 1)3"""$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = '1: 1\\n2'$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = '[(1)2'$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = '\\nabc'$/;"	v	class:SnippetActions_PreActionModifiesBuffer
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = 'abc\\n'$/;"	v	class:SnippetActions_PostActionModifiesBuffer
wanted	plugged\\ultisnips\\test\\test_SnippetActions.py	/^    wanted = 'def123'$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = """\\t\\thi$/;"	v	class:No_Tab_Expand_RealWorld
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '   Expand me!'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '   Expand me!'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '  Expand me!'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '  Expand me!'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '  \\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET_Leading_Spaces
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '  \\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_Leading_Spaces
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = ' .a' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextAfter
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = ' self.'$/;"	v	class:SnippetOptions_Regex_Self_Space
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '$Expand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '-Expand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWordSnippet_Simple
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_NormalExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_Expand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_Multiple
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_WithSpace
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '[[Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix3
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET_SW
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET_SW_TS
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_No_TS
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_Simple
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = '\\t\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_Leading_Tabs
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a not at beginning'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a not at beginning'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a(Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix2
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a-Expand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a-Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'a.' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextBefore
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'aExpand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'aExpand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'abc test Expand me!'$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'atest it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'atest' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NoExpand
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'self.'$/;"	v	class:SnippetOptions_Regex_Self_Start
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'test No match'$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'test fedcab'$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
wanted	plugged\\ultisnips\\test\\test_SnippetOptions.py	/^    wanted = 'ßßExpand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'Hallo'$/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'Should only expand in p.\\ntest' + EX$/;"	v	class:SnippetPriorities_ClearedByChild
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'This is a test snippet'$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'This is a test snippet'$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'We overwrite'$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'We overwrite'$/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'We overwrite'$/;"	v	class:SnippetPriorities_OverwriteExisting
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'We overwrite\\nNo overwrite'$/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'again'$/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'test' + EX$/;"	v	class:SnippetPriorities_ClearedByParent
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear
wanted	plugged\\ultisnips\\test\\test_SnippetPriorities.py	/^    wanted = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear2
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<div allaway>\\n  Third Last\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<div blah>\\n  Hallo\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<div id="no">\\n  End\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<div id="some_id">\\n  \\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<div id="yes">\\n  Begin Hi\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<div>\\n  Hallo\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """<divSomethingElse>\\n  Nupl  Nox\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """halongertextblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """haoverwriteblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """haupsblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """hoverwritelEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = """hupslEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = "'Hallo': 'Hallo' Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = "'Hallo': 'Hallo' Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = "Test: blub\\nTrailing texthello"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = "Test: snippet start\\nNested tabstop: hello\\nsnippet end\\nTrailing text"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = "world = require('WORLD')End"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = '${1:literal}'$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = ':latex:`Hello`World'$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'Hallo haselnhipsut upsend'$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'Hallo: Hallo '$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'This \\\\ is a backslash!'$/;"	v	class:TabStop_EscapingChars_Backslash
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = '[ HelloWorld ] Hello'$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = '\\n${1:literal}'$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'a${1:literal}'$/;"	v	class:TabStop_EscapingCharsDollars1
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'each_byte { |byte| Blah }'$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'echo Hallo'$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Blah Lets replace it again' + JB * 2 + JF$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Blah mitteLets replace it again' + JB * 2 + JF$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Du Nase na'$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Hi' + 2 * JF + 'du Test'$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Nase a small feed'$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Nase a small feed'$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Test Hi'$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo Test mitte BeginningHi'$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hallo na Du Nase'$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi  Nothing  Nothing world'$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi Blah Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi Hallo '$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi Nothing Nothing world'$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi Nothing world'$/;"	v	class:TabStop_Multiline_Overwrite
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi first line\\nsecond line first line\\nsecond line world'$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi first line\\nsecond line world'$/;"	v	class:TabStop_Multiline_Leave
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi this Hallo Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi this Hallo Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi this second Hallo Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hi this second second'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hisnip '$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hisnip default'$/;"	v	class:TabStopEscapingWhenSelected_ECR
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'hisnip i'$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'ia(1, 2) after: 3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'ia(1, 2) after: 3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'nothing ship hups'$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'snip $0 $hi end'$/;"	v	class:TabStop_EscapingCharsDollars
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'snip ` literal'$/;"	v	class:TabStop_EscapingCharsBackticks
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'test hallo one more' + JF + '\\nnice world work\\n' \\$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'test run'$/;"	v	class:TabStop_Exit_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'tt\\nt{\\n\\tt\\n}'$/;"	v	class:TabStop_CROnlyOnSelectedNear
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'usage: `basename $0` [ -u -v -d ]'$/;"	v	class:TabStop_EscapingChars_RealLife
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = 'world = require(WORLD)End'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = r"These are two backslashes \\\\ done"$/;"	v	class:TabStop_EscapingChars_Backslash3
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = r"This is a backslash \\ done"$/;"	v	class:TabStop_EscapingChars_Backslash2
wanted	plugged\\ultisnips\\test\\test_TabStop.py	/^    wanted = r"\\hello{world}"$/;"	v	class:TabStop_EscapingChars_Backslash4
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = '* test\\n* test\\n* test'$/;"	v	class:Transformation_OptionMultiline_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'HALLO hallo'$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'Hallo hallo'$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'SomE tExt SOME TEXT \\nsome text '$/;"	v	class:Transformation_MultipleTransformations_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'TEST blah'$/;"	v	class:Transformation_OptionIgnoreCase_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'a b  c d e f ghhh h oha a b  c d e f ghhh h...'$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'a some more text began with an a'$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'a some yes'$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'a, nice,   building a, nice, building'$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'a, nice, building a-nice-building'$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'aa yes:no)'$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'aa yes\\\\'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'ab no\\\\'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'b some no'$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'dead parrot this parrot is a bit dead'$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'foo boo aoo foo bull aoo'$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo '$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo '$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo .\\nhallo- >\\nhallo-> '$/;"	v	class:Transformation_ConditionalInConditional_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo HALLO'$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo Hallo'$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo batzl hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo batzl hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo foo boy hallo batzl boy'$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo hallo'$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo is somethingb'$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo is somethingmore'$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo noAUCH ahiuchauch_end'$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo noAUCH auchauchih_end'$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo noAUCH hinoauchnoauch_end'$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'hallo noAUCH noauchnoauchab_end'$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'snip  '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'snip  m2  hi'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'snip m1  hi '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'snip matched hallo'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'sometext defined sometext'$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'sometext overwrite'$/;"	v	class:Transformation_InsideTabOvertype_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'test, hallo test\\nhallo'$/;"	v	class:Transformation_CINewlines_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'test, hallo test\\thallo'$/;"	v	class:Transformation_CITabstop_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'test, halul test, ha(ul)'$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'éèàçôïÉÈÀÇÔÏ€ eeacoiEEACOIEUR'$/;"	v	class:Transformation_SimpleCaseAsciiResult
wanted	plugged\\ultisnips\\test\\test_Transformation.py	/^    wanted = 'éèàçôïÉÈÀÇÔÏ€ eeacoieeacoieur'$/;"	v	class:Transformation_LowerCaseAsciiResult
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = """my snipped hi1$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = """my snipped hi1$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = """my snipped hi;$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = "te'123êabc"$/;"	v	class:VerifyVimDict3
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = 'abc simple expand'$/;"	v	class:AddFunc_Simple
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = 'simple expand'$/;"	v	class:AddFunc_Opt
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = 'te"123êabc'$/;"	v	class:VerifyVimDict2
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = 'test41123\\'êabc0'$/;"	v	class:VerifyVimDict1
wanted	plugged\\ultisnips\\test\\test_UltiSnipFunc.py	/^    wanted = ($/;"	v	class:AddNewSnippetSource
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = '\\tbhlablbub'$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'beg\\n\\t    hello\\n\\t    nice\\n\\t\\tworld\\nend'$/;"	v	class:Visual_LineSelect_CheckIndentTwice
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'beg\\n\\thello\\n\\tnice\\n\\tworld\\n\\tsuper\\nenddone'$/;"	v	class:Visual_LineSelect_WithTabStop
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'beg\\n\\thello\\n\\tnice\\n\\tworld\\nend'$/;"	v	class:Visual_LineSelect_CheckIndentSimple
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'beg\\n\\thello\\n\\tnice\\n\\tworld\\nend'$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'bhlablubb'$/;"	v	class:Visual_SelectOneWord_Inword
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'bla hblub\\n  hellobi'$/;"	v	class:Visual_CrossOneLine
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hBLABLUBb'$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hBLABLUBb'$/;"	v	class:VisualTransformation_SelectOneWord
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hHELLO\\n NICE\\n WORLDb'$/;"	v	class:VisualTransformation_LineSelect_Simple
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hWORLDbhi'$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'h\/\/ bodybhi'$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hbabc'$/;"	v	class:Visual_NoVisualSelection_Ignore
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hbefHELLO\\n    NICE\\n    WORLDaftbhi'$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hbefhello\\n    nice\\n    worldaftbhi'$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hbeforeaaahello\\n\\t  nice\\n\\t  worldaftbhi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hbeforeahello\\n\\tnice\\n\\tworldaftbhi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hblablub\\nb'$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hblablubb'$/;"	v	class:VisualWithDefault_ExpandWithVisual
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hblablubb'$/;"	v	class:Visual_SelectOneWord
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hblablubb\\nhb'$/;"	v	class:Visual_ExpandTwice
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hblablubbblabluba'$/;"	v	class:Visual_SelectOneWord_TwiceVisual
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hblablubbhello'$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hello\\n\\t hello\\n\\t nice\\n\\t world\\nendhi'$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hhello\\n nice\\n worldb'$/;"	v	class:Visual_LineSelect_Simple
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hhellob'$/;"	v	class:Visual_InDefaultText_SelectOneWord
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hjupbhi'$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hjupbhi'$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hnblablub\\nmmmbdone'$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hupsbhi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'hworldbhi'$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'if {\\n\\tif {\\n\\t\\tone\\n\\t\\ttwo\\n\\t}\\n\\tthree\\n}'$/;"	v	class:Visual_LineSelect_DedentLine
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'xxxhyyybyxxx'$/;"	v	class:Visual_SelectOneWordExclusive
wanted	plugged\\ultisnips\\test\\test_Visual.py	/^    wanted = 'xxxhyyyybxxx'$/;"	v	class:Visual_SelectOneWordInclusive
wanted	plugged\\ultisnips\\test\\vim_test_case.py	/^    wanted = ''$/;"	v	class:VimTestCase
wddx	plugged\\php.vim\\scripts\\syntax.ini	/^wddx = yes$/;"	k	section:extensions
widget	plugged\\vim-json\\json-test.json	/^{"widget": {$/;"	o
widget_attributes	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let widget_attributes = {$/;"	v
widget_role	plugged\\html5.vim\\autoload\\xml\\aria.vim	/^let widget_role = [$/;"	v
widget_role	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'grid/;"	v
width	plugged\\vim-json\\json-test.json	/^        "width": 500,$/;"	n	object:widget.window
window	plugged\\LeaderF\\autoload\\leaderf\\python\\leaderf\\instance.py	/^    def window(self):$/;"	m	class:LfInstance
window	plugged\\vim-json\\json-test.json	/^    "window": {$/;"	o	object:widget
wrap	plugged\\ultisnips\\pythonx\\UltiSnips\\err_to_scratch_buffer.py	/^def wrap(func):$/;"	f
wrapper	plugged\\ultisnips\\pythonx\\UltiSnips\\err_to_scratch_buffer.py	/^    def wrapper(self, *args, **kwds):$/;"	f	function:wrap	file:
write_class_signatures_to_vim_hash	plugged\\phpcomplete.vim\\bin\\generator\\classes.php	/^function write_class_signatures_to_vim_hash($signatures, $outpath, $keyname, $enabled_extensions/;"	f
write_constant_names_to_vim_hash	plugged\\phpcomplete.vim\\bin\\generator\\constants.php	/^function write_constant_names_to_vim_hash($constant_groups, $outpath, $keyname, $enabled_extensi/;"	f
write_function_signatures_to_vim_hash	plugged\\phpcomplete.vim\\bin\\generator\\functions.php	/^function write_function_signatures_to_vim_hash($signatures, $outpath, $keyname, $enabled_extensi/;"	f
write_snippets	plugged\\ultisnips\\utils\\get_tm_snippets.py	/^def write_snippets(snip_descr, f):$/;"	f
write_temp	plugged\\ultisnips\\test\\vim_interface.py	/^    def write_temp(self, file_path, content):$/;"	m	class:TempFileManager
x	plugged\\LeaderF\\autoload\\leaderf\\Any.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py b:Lf_AnyExplManager."accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\BufTag.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "bufTagExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\Buffer.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "bufExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\File.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "fileExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\Function.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "functionExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\Help.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "helpExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\Line.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "lineExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\Mru.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "mruExplManager.accept('h')"<CR>$/;"	m
x	plugged\\LeaderF\\autoload\\leaderf\\Tag.vim	/^    nnoremap <buffer> <silent> x             :exec g:Lf_py "tagExplManager.accept('h')"<CR>$/;"	m
x	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^	let x = "(foo)"$/;"	v
x	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let x = (   "( )"   )$/;"	v
xml	plugged\\php.vim\\scripts\\syntax.ini	/^xml = yes$/;"	k	section:extensions
xml	plugged\\phpcomplete.vim\\tests\\fixtures\\GetClassName\\builtin_function.php	/^$xml = simplexml_load_string('<'.'?xml version="1.0" encoding="utf-8" ?'.'><root><\/root>');$/;"	v	namespace:Foo
xml_attributes	plugged\\html5.vim\\autoload\\xml\\html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': /;"	v
xmlreader	plugged\\php.vim\\scripts\\syntax.ini	/^xmlreader = yes$/;"	k	section:extensions
xmlrpc	plugged\\php.vim\\scripts\\syntax.ini	/^xmlrpc = no$/;"	k	section:extensions
xmlwriter	plugged\\php.vim\\scripts\\syntax.ini	/^xmlwriter = yes$/;"	k	section:extensions
xsl	plugged\\php.vim\\scripts\\syntax.ini	/^xsl = no$/;"	k	section:extensions
y	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let y =  "("$/;"	v
z	plugged\\vim-matchup\\test\\issues\\10\\legacy.vim	/^let z =  (   '( ' ) . ' )'$/;"	v
zS	plugged\\vim-scriptease\\plugin\\scriptease.vim	/^  nmap zS <Plug>ScripteaseSynnames$/;"	m
zip	plugged\\php.vim\\scripts\\syntax.ini	/^zip = yes$/;"	k	section:extensions
zlib	plugged\\php.vim\\scripts\\syntax.ini	/^zlib = yes$/;"	k	section:extensions
~/.vimrc setup	plugged\\ctrlp-py-matcher\\README.md	/^### ~\/.vimrc setup$/;"	S
